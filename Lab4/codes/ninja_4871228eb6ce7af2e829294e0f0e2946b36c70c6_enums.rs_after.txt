use std::fmt::{Display, Formatter};

#[derive(Debug, Copy, Clone)]
#[allow(clippy::upper_case_acronyms)]
#[allow(non_camel_case_types)]
pub enum Usage {
    ChatGPT,
    API,
    Dashboard,
    Configuration,
    OAuth,
    Quit,
}

impl Usage {
    // could be generated by macro
    pub const USAGE_VARS: &'static [Usage] = &[
        Self::API,
        Self::ChatGPT,
        Self::Dashboard,
        Self::Configuration,
        Self::OAuth,
        Self::Quit,
    ];
}

impl Display for Usage {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
        match self {
            Usage::API => write!(f, "{self:?}           - Turbo API interactive conversation"),
            Usage::ChatGPT => write!(f, "{self:?}       - ChatGPT API interactive conversation"),
            Usage::Dashboard => write!(f, "{self:?}     - Dashboard settings"),
            Usage::OAuth => write!(f, "{self:?}         - OAuth authorization settings"),
            Usage::Configuration => write!(f, "{self:?} - API configuration settings"),
            Usage::Quit => write!(f, "{self:?}"),
        }
    }
}
