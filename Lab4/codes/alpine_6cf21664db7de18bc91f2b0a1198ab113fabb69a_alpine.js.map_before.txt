{"version":3,"file":"alpine.js","sources":["../src/utils.js","../src/directives/for.js","../src/directives/bind.js","../src/directives/on.js","../src/directives/model.js","../src/component.js","../src/directives/show.js","../src/directives/if.js","../src/index.js"],"sourcesContent":["\r\n// Thanks @stimulus:\r\n// https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts\r\nexport function domReady() {\r\n    return new Promise(resolve => {\r\n        if (document.readyState == \"loading\") {\r\n            document.addEventListener(\"DOMContentLoaded\", resolve)\r\n        } else {\r\n            resolve()\r\n        }\r\n    })\r\n}\r\n\r\nexport function arrayUnique(array) {\r\n    var a = array.concat();\r\n    for(var i=0; i<a.length; ++i) {\r\n        for(var j=i+1; j<a.length; ++j) {\r\n            if(a[i] === a[j])\r\n                a.splice(j--, 1);\r\n        }\r\n    }\r\n\r\n    return a;\r\n}\r\n\r\nexport function isTesting() {\r\n    return navigator.userAgent, navigator.userAgent.includes(\"Node.js\")\r\n        || navigator.userAgent.includes(\"jsdom\")\r\n}\r\n\r\nexport function kebabCase(subject) {\r\n    return subject.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[_\\s]/, '-').toLowerCase()\r\n}\r\n\r\nexport function walk(el, callback) {\r\n    if (callback(el) === false) return\r\n\r\n    let node = el.firstElementChild\r\n\r\n    while (node) {\r\n        walk(node, callback)\r\n\r\n        node = node.nextElementSibling\r\n    }\r\n}\r\n\r\nexport function debounce(func, wait) {\r\n    var timeout\r\n    return function () {\r\n        var context = this, args = arguments\r\n        var later = function () {\r\n            timeout = null\r\n            func.apply(context, args)\r\n        }\r\n        clearTimeout(timeout)\r\n        timeout = setTimeout(later, wait)\r\n    }\r\n}\r\n\r\nexport function saferEval(expression, dataContext, additionalHelperVariables = {}) {\r\n    return (new Function(['$data', ...Object.keys(additionalHelperVariables)], `var result; with($data) { result = ${expression} }; return result`))(\r\n        dataContext, ...Object.values(additionalHelperVariables)\r\n    )\r\n}\r\n\r\nexport function saferEvalNoReturn(expression, dataContext, additionalHelperVariables = {}) {\r\n    return (new Function(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { ${expression} }`))(\r\n        dataContext, ...Object.values(additionalHelperVariables)\r\n    )\r\n}\r\n\r\nexport function isXAttr(attr) {\r\n    const name = replaceAtAndColonWithStandardSyntax(attr.name)\r\n\r\n    const xAttrRE = /x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref)/\r\n\r\n    return xAttrRE.test(name)\r\n}\r\n\r\nexport function getXAttrs(el, type) {\r\n    return Array.from(el.attributes)\r\n        .filter(isXAttr)\r\n        .map(attr => {\r\n            const name = replaceAtAndColonWithStandardSyntax(attr.name)\r\n\r\n            const typeMatch = name.match(/x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref)/)\r\n            const valueMatch = name.match(/:([a-zA-Z\\-:]+)/)\r\n            const modifiers = name.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || []\r\n\r\n            return {\r\n                type: typeMatch ? typeMatch[1] : null,\r\n                value: valueMatch ? valueMatch[1] : null,\r\n                modifiers: modifiers.map(i => i.replace('.', '')),\r\n                expression: attr.value,\r\n            }\r\n        })\r\n        .filter(i => {\r\n            // If no type is passed in for filtering, bypassfilter\r\n            if (! type) return true\r\n\r\n            return i.type === type\r\n        })\r\n}\r\n\r\nexport function replaceAtAndColonWithStandardSyntax(name) {\r\n    if (name.startsWith('@')) {\r\n        return name.replace('@', 'x-on:')\r\n    } else if (name.startsWith(':')) {\r\n        return name.replace(':', 'x-bind:')\r\n    }\r\n\r\n    return name\r\n}\r\n\r\nexport function transitionIn(el, callback, forceSkip = false) {\r\n    if (forceSkip) return callback()\r\n\r\n    const attrs = getXAttrs(el, 'transition')\r\n\r\n    if (attrs.length < 1) return callback()\r\n\r\n    const enter = (attrs.find(i => i.value === 'enter') || { expression: '' }).expression.split(' ').filter(i => i !== '')\r\n    const enterStart = (attrs.find(i => i.value === 'enter-start') || { expression: '' }).expression.split(' ').filter(i => i !== '')\r\n    const enterEnd = (attrs.find(i => i.value === 'enter-end') || { expression: '' }).expression.split(' ').filter(i => i !== '')\r\n\r\n    transition(el, enter, enterStart, enterEnd, callback, () => {})\r\n}\r\n\r\nexport function transitionOut(el, callback, forceSkip = false) {\r\n    if (forceSkip) return callback()\r\n\r\n    const attrs = getXAttrs(el, 'transition')\r\n\r\n    if (attrs.length < 1) return callback()\r\n\r\n    const leave = (attrs.find(i => i.value === 'leave') || { expression: '' }).expression.split(' ').filter(i => i !== '')\r\n    const leaveStart = (attrs.find(i => i.value === 'leave-start') || { expression: '' }).expression.split(' ').filter(i => i !== '')\r\n    const leaveEnd = (attrs.find(i => i.value === 'leave-end') || { expression: '' }).expression.split(' ').filter(i => i !== '')\r\n\r\n    transition(el, leave, leaveStart, leaveEnd, () => {}, callback)\r\n}\r\n\r\nexport function transition(el, classesDuring, classesStart, classesEnd, hook1, hook2) {\r\n    const originalClasses = el.__x_original_classes || []\r\n    el.classList.add(...classesStart)\r\n    el.classList.add(...classesDuring)\r\n\r\n    requestAnimationFrame(() => {\r\n        const duration = Number(getComputedStyle(el).transitionDuration.replace('s', '')) * 1000\r\n\r\n        hook1()\r\n\r\n        requestAnimationFrame(() => {\r\n            // Don't remove classes that were in the original class attribute.\r\n            el.classList.remove(...classesStart.filter(i => !originalClasses.includes(i)))\r\n            el.classList.add(...classesEnd)\r\n\r\n            setTimeout(() => {\r\n                hook2()\r\n\r\n                // Adding an \"isConnected\" check, in case the callback\r\n                // removed the element from the DOM.\r\n                if (el.isConnected) {\r\n                    el.classList.remove(...classesDuring.filter(i => !originalClasses.includes(i)))\r\n                    el.classList.remove(...classesEnd.filter(i => !originalClasses.includes(i)))\r\n                }\r\n            }, duration);\r\n        })\r\n    });\r\n}\r\n\r\nexport function deepProxy(target, proxyHandler) {\r\n    // If target is null, return it.\r\n    if (target === null) return target;\r\n\r\n    // If target is not an object, return it.\r\n    if (typeof target !== 'object') return target;\r\n\r\n    // If target is a DOM node (like in the case of this.$el), return it.\r\n    if (target instanceof Node) return target\r\n\r\n    // If target is already an Alpine proxy, return it.\r\n    if (target['$isAlpineProxy']) return target;\r\n\r\n    // Otherwise proxy the properties recursively.\r\n    // This enables reactivity on setting nested data.\r\n    // Note that if a project is not a valid object, it won't be converted to a proxy\r\n    for (let property in target) {\r\n        target[property] = deepProxy(target[property], proxyHandler)\r\n    }\r\n\r\n    return new Proxy(target, proxyHandler)\r\n}\r\n","import { transitionIn, transitionOut, getXAttrs } from '../utils'\r\n\r\nexport function handleForDirective(component, el, expression, initialUpdate) {\r\n    const { single, bunch, iterator1, iterator2 } = parseFor(expression)\r\n\r\n    var items = component.evaluateReturnExpression(el, bunch)\r\n\r\n    // As we walk the array, we'll also walk the DOM (updating/creating as we go).\r\n    var previousEl = el\r\n    items.forEach((i, index, group) => {\r\n        const currentKey = getThisIterationsKeyFromTemplateTag(component, el, single, iterator1, iterator2, i, index, group)\r\n        let currentEl = previousEl.nextElementSibling\r\n\r\n        // Let's check and see if the x-for has already generated an element last time it ran.\r\n        if (currentEl && currentEl.__x_for_key !== undefined) {\r\n            // If the the key's don't match.\r\n            if (currentEl.__x_for_key !== currentKey) {\r\n                // We'll look ahead to see if we can find it further down.\r\n                var tmpCurrentEl = currentEl\r\n                while(tmpCurrentEl) {\r\n                    // If we found it later in the DOM.\r\n                    if (tmpCurrentEl.__x_for_key === currentKey) {\r\n                        // Move it to where it's supposed to be in the DOM.\r\n                        el.parentElement.insertBefore(tmpCurrentEl, currentEl)\r\n                        // And set it as the current element as if we just created it.\r\n                        currentEl = tmpCurrentEl\r\n                        break\r\n                    }\r\n\r\n                    tmpCurrentEl = (tmpCurrentEl.nextElementSibling && tmpCurrentEl.nextElementSibling.__x_for_key !== undefined) ? tmpCurrentEl.nextElementSibling : false\r\n                }\r\n            }\r\n\r\n            // Temporarily remove the key indicator to allow the normal \"updateElements\" to work\r\n            delete currentEl.__x_for_key\r\n\r\n            currentEl.__x_for_alias = single\r\n            currentEl.__x_for_value = i\r\n            component.updateElements(currentEl, () => {\r\n                return {[currentEl.__x_for_alias]: currentEl.__x_for_value}\r\n            })\r\n        } else {\r\n            // There are no more .__x_for_key elements, meaning the page is first loading, OR, there are\r\n            // extra items in the array that need to be added as new elements.\r\n\r\n            // Let's create a clone from the template.\r\n            const clone = document.importNode(el.content, true);\r\n            // Insert it where we are in the DOM.\r\n            el.parentElement.insertBefore(clone, currentEl)\r\n\r\n            // Set it as the current element.\r\n            currentEl = previousEl.nextElementSibling\r\n\r\n            // And transition it in if it's not the first page load.\r\n            transitionIn(currentEl, () => {}, initialUpdate)\r\n\r\n            // Now, let's walk the new DOM node and initialize everything,\r\n            // including new nested components.\r\n            // Note we are resolving the \"extraData\" alias stuff from the dom element value so that it's\r\n            // always up to date for listener handlers that don't get re-registered.\r\n            currentEl.__x_for_alias = single\r\n            currentEl.__x_for_value = i\r\n            component.initializeElements(currentEl, () => {\r\n                return {[currentEl.__x_for_alias]: currentEl.__x_for_value}\r\n            })\r\n        }\r\n\r\n        currentEl.__x_for_key = currentKey\r\n\r\n        previousEl = currentEl\r\n    })\r\n\r\n    // Now that we've added/updated/moved all the elements for the current state of the loop.\r\n    // Anything left over, we can get rid of.\r\n    var nextElementFromOldLoop = (previousEl.nextElementSibling && previousEl.nextElementSibling.__x_for_key !== undefined) ? previousEl.nextElementSibling : false\r\n\r\n    while(nextElementFromOldLoop) {\r\n        const nextElementFromOldLoopImmutable = nextElementFromOldLoop\r\n        const nextSibling = nextElementFromOldLoop.nextElementSibling\r\n\r\n        transitionOut(nextElementFromOldLoop, () => {\r\n            nextElementFromOldLoopImmutable.remove()\r\n        })\r\n\r\n        nextElementFromOldLoop = (nextSibling && nextSibling.__x_for_key !== undefined) ? nextSibling : false\r\n    }\r\n}\r\n\r\n// This was taken from VueJS 2.* core. Thanks Vue!\r\nfunction parseFor (expression) {\r\n    const forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/\r\n    const stripParensRE = /^\\(|\\)$/g\r\n    const forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/\r\n\r\n    const inMatch = expression.match(forAliasRE)\r\n    if (! inMatch) return\r\n    const res = {}\r\n    res.bunch = inMatch[2].trim()\r\n    const single = inMatch[1].trim().replace(stripParensRE, '')\r\n    const iteratorMatch = single.match(forIteratorRE)\r\n    if (iteratorMatch) {\r\n        res.single = single.replace(forIteratorRE, '').trim()\r\n        res.iterator1 = iteratorMatch[1].trim()\r\n        if (iteratorMatch[2]) {\r\n            res.iterator2 = iteratorMatch[2].trim()\r\n        }\r\n    } else {\r\n        res.single = single\r\n    }\r\n    return res\r\n  }\r\n\r\nfunction getThisIterationsKeyFromTemplateTag(component, el, single, iterator1, iterator2, i, index, group) {\r\n    const keyAttr = getXAttrs(el, 'bind').filter(attr => attr.value === 'key')[0]\r\n\r\n    let keyAliases = { [single]: i }\r\n    if (iterator1) keyAliases[iterator1] = index\r\n    if (iterator2) keyAliases[iterator2] = group\r\n\r\n    return keyAttr\r\n        ? component.evaluateReturnExpression(el, keyAttr.expression, () => keyAliases)\r\n        : index\r\n}\r\n","import { arrayUnique } from '../utils'\r\n\r\nexport function handleAttributeBindingDirective(component, el, attrName, expression, extraVars) {\r\n    var value = component.evaluateReturnExpression(el, expression, extraVars)\r\n\r\n    if (attrName === 'value') {\r\n        // If nested model key is undefined, set the default value to empty string.\r\n        if (value === undefined && expression.match(/\\./).length) {\r\n            value = ''\r\n        }\r\n\r\n        if (el.type === 'radio') {\r\n            el.checked = el.value == value\r\n        } else if (el.type === 'checkbox') {\r\n            if (Array.isArray(value)) {\r\n                // I'm purposely not using Array.includes here because it's\r\n                // strict, and because of Numeric/String mis-casting, I\r\n                // want the \"includes\" to be \"fuzzy\".\r\n                let valueFound = false\r\n                value.forEach(val => {\r\n                    if (val == el.value) {\r\n                        valueFound = true\r\n                    }\r\n                })\r\n\r\n                el.checked = valueFound\r\n            } else {\r\n                el.checked = !! value\r\n            }\r\n        } else if (el.tagName === 'SELECT') {\r\n            updateSelect(el, value)\r\n        } else {\r\n            el.value = value\r\n        }\r\n    } else if (attrName === 'class') {\r\n        if (Array.isArray(value)) {\r\n            const originalClasses = el.__x_original_classes || []\r\n            el.setAttribute('class', arrayUnique(originalClasses.concat(value)).join(' '))\r\n        } else if (typeof value === 'object') {\r\n            Object.keys(value).forEach(classNames => {\r\n                if (value[classNames]) {\r\n                    classNames.split(' ').forEach(className => el.classList.add(className))\r\n                } else {\r\n                    classNames.split(' ').forEach(className => el.classList.remove(className))\r\n                }\r\n            })\r\n        } else {\r\n            const originalClasses = el.__x_original_classes || []\r\n            const newClasses = value.split(' ')\r\n            el.setAttribute('class', arrayUnique(originalClasses.concat(newClasses)).join(' '))\r\n        }\r\n    } else if (['disabled', 'readonly', 'required', 'checked', 'hidden', 'selected'].includes(attrName)) {\r\n        // Boolean attributes have to be explicitly added and removed, not just set.\r\n        if (!! value) {\r\n            el.setAttribute(attrName, '')\r\n        } else {\r\n            el.removeAttribute(attrName)\r\n        }\r\n    } else {\r\n        el.setAttribute(attrName, value)\r\n    }\r\n}\r\n\r\nfunction updateSelect(el, value) {\r\n    const arrayWrappedValue = [].concat(value).map(value => { return value + '' })\r\n\r\n    Array.from(el.options).forEach(option => {\r\n        option.selected = arrayWrappedValue.includes(option.value || option.text)\r\n    })\r\n}\r\n","import { kebabCase } from '../utils'\r\n\r\nexport function registerListener(component, el, event, modifiers, expression, extraVars = {}) {\r\n    if (modifiers.includes('away')) {\r\n        const handler = e => {\r\n            // Don't do anything if the click came form the element or within it.\r\n            if (el.contains(e.target)) return\r\n\r\n            // Don't do anything if this element isn't currently visible.\r\n            if (el.offsetWidth < 1 && el.offsetHeight < 1) return\r\n\r\n            // Now that we are sure the element is visible, AND the click\r\n            // is from outside it, let's run the expression.\r\n            runListenerHandler(component, expression, e, extraVars)\r\n\r\n            if (modifiers.includes('once')) {\r\n                document.removeEventListener(event, handler)\r\n            }\r\n        }\r\n\r\n        // Listen for this event at the root level.\r\n        document.addEventListener(event, handler)\r\n    } else {\r\n        const listenerTarget = modifiers.includes('window')\r\n            ? window : (modifiers.includes('document') ? document : el)\r\n\r\n        const handler = e => {\r\n            if (isKeyEvent(event)) {\r\n                if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\r\n                    return\r\n                }\r\n            }\r\n\r\n            if (modifiers.includes('prevent')) e.preventDefault()\r\n            if (modifiers.includes('stop')) e.stopPropagation()\r\n\r\n            const returnValue = runListenerHandler(component, expression, e, extraVars)\r\n\r\n            if (returnValue === false) {\r\n                e.preventDefault()\r\n            } else {\r\n                if (modifiers.includes('once')) {\r\n                    listenerTarget.removeEventListener(event, handler)\r\n                }\r\n            }\r\n        }\r\n\r\n        listenerTarget.addEventListener(event, handler)\r\n    }\r\n}\r\n\r\nfunction runListenerHandler(component, expression, e, extraVars) {\r\n    return component.evaluateCommandExpression(e.target, expression, () => {\r\n        return {...extraVars(), '$event': e}\r\n    })\r\n}\r\n\r\nfunction isKeyEvent(event) {\r\n    return ['keydown', 'keyup'].includes(event)\r\n}\r\n\r\nfunction isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\r\n    let keyModifiers = modifiers.filter(i => {\r\n        return ! ['window', 'document', 'prevent', 'stop'].includes(i)\r\n    })\r\n\r\n    // If no modifier is specified, we'll call it a press.\r\n    if (keyModifiers.length === 0) return false\r\n\r\n    // If one is passed, AND it matches the key pressed, we'll call it a press.\r\n    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false\r\n\r\n    // The user is listening for key combinations.\r\n    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super']\r\n    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier))\r\n\r\n    keyModifiers = keyModifiers.filter(i => ! selectedSystemKeyModifiers.includes(i))\r\n\r\n    if (selectedSystemKeyModifiers.length > 0) {\r\n        const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {\r\n            // Alias \"cmd\" and \"super\" to \"meta\"\r\n            if (modifier === 'cmd' || modifier === 'super') modifier = 'meta'\r\n\r\n            return e[`${modifier}Key`]\r\n        })\r\n\r\n        // If all the modifiers selected are pressed, ...\r\n        if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\r\n            // AND the remaining key is pressed as well. It's a press.\r\n            if (keyModifiers[0] === keyToModifier(e.key)) return false\r\n        }\r\n    }\r\n\r\n    // We'll call it NOT a valid keypress.\r\n    return true\r\n}\r\n\r\nfunction keyToModifier(key) {\r\n    switch (key) {\r\n        case '/':\r\n            return 'slash'\r\n        case ' ':\r\n        case 'Spacebar':\r\n            return 'space'\r\n        default:\r\n            return kebabCase(key)\r\n    }\r\n}\r\n","import { registerListener } from './on'\r\n\r\nexport function registerModelListener(component, el, modifiers, expression, extraVars) {\r\n    // If the element we are binding to is a select, a radio, or checkbox\r\n    // we'll listen for the change event instead of the \"input\" event.\r\n    var event = (el.tagName.toLowerCase() === 'select')\r\n        || ['checkbox', 'radio'].includes(el.type)\r\n        || modifiers.includes('lazy')\r\n        ? 'change' : 'input'\r\n\r\n    const listenerExpression = `${expression} = rightSideOfExpression($event, ${expression})`\r\n\r\n    registerListener(component, el, event, modifiers, listenerExpression, () => {\r\n        return {\r\n            ...extraVars(),\r\n            rightSideOfExpression: generateModelAssignmentFunction(el, modifiers, expression),\r\n        }\r\n    })\r\n}\r\n\r\nfunction generateModelAssignmentFunction(el, modifiers, expression) {\r\n    if (el.type === 'radio') {\r\n        // Radio buttons only work properly when they share a name attribute.\r\n        // People might assume we take care of that for them, because\r\n        // they already set a shared \"x-model\" attribute.\r\n        if (! el.hasAttribute('name')) el.setAttribute('name', expression)\r\n    }\r\n\r\n    return (event, currentValue) => {\r\n        //check for event.detail. due to an issue where IE11 handles the event as a CustomEvent. The event should be undefined\r\n        if (event instanceof CustomEvent && event.detail) {\r\n            return event.detail\r\n        } else if (el.type === 'checkbox') {\r\n            // If the data we are binding to is an array, toggle it's value inside the array.\r\n            if (Array.isArray(currentValue)) {\r\n                return event.target.checked ? currentValue.concat([event.target.value]) : currentValue.filter(i => i !== event.target.value)\r\n            } else {\r\n                return event.target.checked\r\n            }\r\n        } else if (el.tagName.toLowerCase() === 'select' && el.multiple) {\r\n            return modifiers.includes('number')\r\n                ? Array.from(event.target.selectedOptions).map(option => { return parseFloat(option.value || option.text) })\r\n                : Array.from(event.target.selectedOptions).map(option => { return option.value || option.text })\r\n        } else {\r\n            return modifiers.includes('number')\r\n                ? parseFloat(event.target.value)\r\n                : (modifiers.includes('trim') ? event.target.value.trim() : event.target.value)\r\n        }\r\n    }\r\n}\r\n","import { walk, saferEval, saferEvalNoReturn, getXAttrs, debounce, deepProxy } from './utils'\r\nimport { handleForDirective } from './directives/for'\r\nimport { handleAttributeBindingDirective } from './directives/bind'\r\nimport { handleShowDirective } from './directives/show'\r\nimport { handleIfDirective } from './directives/if'\r\nimport { registerModelListener } from './directives/model'\r\nimport { registerListener } from './directives/on'\r\n\r\nexport default class Component {\r\n    constructor(el) {\r\n        this.$el = el\r\n\r\n        const dataAttr = this.$el.getAttribute('x-data')\r\n        const dataExpression = dataAttr === '' ? '{}' : dataAttr\r\n        const initExpression = this.$el.getAttribute('x-init')\r\n        const createdExpression = this.$el.getAttribute('x-created')\r\n        const mountedExpression = this.$el.getAttribute('x-mounted')\r\n\r\n        const unobservedData = saferEval(dataExpression, {})\r\n\r\n        /* IE11-ONLY:START */\r\n            // For IE11, add our magic properties to the original data for access.\r\n            // Since the polyfill proxy does not allow properties to be added after creation\r\n            unobservedData.$el = null\r\n            unobservedData.$refs = null\r\n            unobservedData.$nextTick = null\r\n        /* IE11-ONLY:END */\r\n\r\n        // Construct a Proxy-based observable. This will be used to handle reactivity.\r\n        this.$data = this.wrapDataInObservable(unobservedData)\r\n\r\n        // After making user-supplied data methods reactive, we can now add\r\n        // our magic properties to the original data for access.\r\n        unobservedData.$el = this.$el\r\n        unobservedData.$refs = this.getRefsProxy()\r\n\r\n        this.nextTickStack = []\r\n        unobservedData.$nextTick = (callback) => {\r\n            this.nextTickStack.push(callback)\r\n        }\r\n\r\n        var initReturnedCallback\r\n        if (initExpression) {\r\n            // We want to allow data manipulation, but not trigger DOM updates just yet.\r\n            // We haven't even initialized the elements with their Alpine bindings. I mean c'mon.\r\n            this.pauseReactivity = true\r\n            initReturnedCallback = this.evaluateReturnExpression(this.$el, initExpression)\r\n            this.pauseReactivity = false\r\n        }\r\n\r\n        if (createdExpression) {\r\n            console.warn('AlpineJS Warning: \"x-created\" is deprecated and will be removed in the next major version. Use \"x-init\" instead.')\r\n            this.pauseReactivity = true\r\n            saferEvalNoReturn(this.$el.getAttribute('x-created'), this.$data)\r\n            this.pauseReactivity = false\r\n        }\r\n\r\n        // Register all our listeners and set all our attribute bindings.\r\n        this.initializeElements(this.$el)\r\n\r\n        // Use mutation observer to detect new elements being added within this component at run-time.\r\n        // Alpine's just so darn flexible amirite?\r\n        this.listenForNewElementsToInitialize()\r\n\r\n        if (typeof initReturnedCallback === 'function') {\r\n            // Run the callback returned form the \"x-init\" hook to allow the user to do stuff after\r\n            // Alpine's got it's grubby little paws all over everything.\r\n            initReturnedCallback.call(this.$data)\r\n        }\r\n\r\n        if (mountedExpression) {\r\n            console.warn('AlpineJS Warning: \"x-mounted\" is deprecated and will be removed in the next major version. Use \"x-init\" (with a callback return) for the same behavior.')\r\n            // Run an \"x-mounted\" hook to allow the user to do stuff after\r\n            // Alpine's got it's grubby little paws all over everything.\r\n            saferEvalNoReturn(mountedExpression, this.$data)\r\n        }\r\n    }\r\n\r\n    wrapDataInObservable(data) {\r\n        var self = this\r\n\r\n        const proxyHandler = {\r\n            set(obj, property, value) {\r\n                // Set the value converting it to a \"Deep Proxy\" when required\r\n                // Note that if a project is not a valid object, it won't be converted to a proxy\r\n                const setWasSuccessful = Reflect.set(obj, property, deepProxy(value, proxyHandler))\r\n\r\n                // Don't react to data changes for cases like the `x-created` hook.\r\n                if (self.pauseReactivity) return setWasSuccessful\r\n\r\n                debounce(() => {\r\n                    self.updateElements(self.$el)\r\n\r\n                    // Walk through the $nextTick stack and clear it as we go.\r\n                    while (self.nextTickStack.length > 0) {\r\n                        self.nextTickStack.shift()()\r\n                    }\r\n                }, 0)()\r\n\r\n                return setWasSuccessful\r\n            },\r\n            get(target, key) {\r\n                // Provide a way to determine if this object is an Alpine proxy or not.\r\n                if (key === \"$isAlpineProxy\") return true\r\n\r\n                // Just return the flippin' value. Gawsh.\r\n                return target[key]\r\n            }\r\n        }\r\n\r\n        return deepProxy(data, proxyHandler)\r\n    }\r\n\r\n    walkAndSkipNestedComponents(el, callback, initializeComponentCallback = () => {}) {\r\n        walk(el, el => {\r\n            // We've hit a component.\r\n            if (el.hasAttribute('x-data')) {\r\n                // If it's not the current one.\r\n                if (! el.isSameNode(this.$el)) {\r\n                    // Initialize it if it's not.\r\n                    if (! el.__x) initializeComponentCallback(el)\r\n\r\n                    // Now we'll let that sub-component deal with itself.\r\n                    return false\r\n                }\r\n            }\r\n\r\n            return callback(el)\r\n        })\r\n    }\r\n\r\n    initializeElements(rootEl, extraVars = () => {}) {\r\n        this.walkAndSkipNestedComponents(rootEl, el => {\r\n            // Don't touch spawns from for loop\r\n            if (el.__x_for_key !== undefined) return false\r\n\r\n            this.initializeElement(el, extraVars)\r\n        }, el => {\r\n            el.__x = new Component(el)\r\n        })\r\n\r\n        // Walk through the $nextTick stack and clear it as we go.\r\n        while (this.nextTickStack.length > 0) {\r\n            this.nextTickStack.shift()()\r\n        }\r\n    }\r\n\r\n    initializeElement(el, extraVars) {\r\n        // To support class attribute merging, we have to know what the element's\r\n        // original class attribute looked like for reference.\r\n        if (el.hasAttribute('class') && getXAttrs(el).length > 0) {\r\n            el.__x_original_classes = el.getAttribute('class').split(' ')\r\n        }\r\n\r\n        this.registerListeners(el, extraVars)\r\n        this.resolveBoundAttributes(el, true, extraVars)\r\n    }\r\n\r\n    updateElements(rootEl, extraVars = () => {}) {\r\n        this.walkAndSkipNestedComponents(rootEl, el => {\r\n            // Don't touch spawns from for loop (and check if the root is actually a for loop in a parent, don't skip it.)\r\n            if (el.__x_for_key !== undefined && ! el.isSameNode(this.$el)) return false\r\n\r\n            this.updateElement(el, extraVars)\r\n        }, el => {\r\n            el.__x = new Component(el)\r\n        })\r\n    }\r\n\r\n    updateElement(el, extraVars) {\r\n        this.resolveBoundAttributes(el, false, extraVars)\r\n    }\r\n\r\n    registerListeners(el, extraVars) {\r\n        getXAttrs(el).forEach(({ type, value, modifiers, expression }) => {\r\n            switch (type) {\r\n                case 'on':\r\n                    registerListener(this, el, value, modifiers, expression, extraVars)\r\n                    break;\r\n\r\n                case 'model':\r\n                    registerModelListener(this, el, modifiers, expression, extraVars)\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n    resolveBoundAttributes(el, initialUpdate = false, extraVars) {\r\n        getXAttrs(el).forEach(({ type, value, modifiers, expression }) => {\r\n            switch (type) {\r\n                case 'model':\r\n                    handleAttributeBindingDirective(this, el, 'value', expression, extraVars)\r\n                    break;\r\n\r\n                case 'bind':\r\n                    // The :key binding on an x-for is special, ignore it.\r\n                    if (el.tagName.toLowerCase() === 'template' && value === 'key') return\r\n\r\n                    handleAttributeBindingDirective(this, el, value, expression, extraVars)\r\n                    break;\r\n\r\n                case 'text':\r\n                    var output = this.evaluateReturnExpression(el, expression, extraVars);\r\n\r\n                    // If nested model key is undefined, set the default value to empty string.\r\n                    if (output === undefined && expression.match(/\\./).length) {\r\n                        output = ''\r\n                    }\r\n\r\n                    el.innerText = output\r\n                    break;\r\n\r\n                case 'html':\r\n                    el.innerHTML = this.evaluateReturnExpression(el, expression, extraVars)\r\n                    break;\r\n\r\n                case 'show':\r\n                    var output = this.evaluateReturnExpression(el, expression, extraVars)\r\n\r\n                    handleShowDirective(el, output, initialUpdate)\r\n                    break;\r\n\r\n                case 'if':\r\n                    var output = this.evaluateReturnExpression(el, expression, extraVars)\r\n\r\n                    handleIfDirective(el, output, initialUpdate)\r\n                    break;\r\n\r\n                case 'for':\r\n                    handleForDirective(this, el, expression, initialUpdate)\r\n                    break;\r\n\r\n                case 'cloak':\r\n                    el.removeAttribute('x-cloak')\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n    evaluateReturnExpression(el, expression, extraVars = () => {}) {\r\n        return saferEval(expression, this.$data, {\r\n            ...extraVars(),\r\n            $dispatch: this.getDispatchFunction(el),\r\n        })\r\n    }\r\n\r\n    evaluateCommandExpression(el, expression, extraVars = () => {}) {\r\n        return saferEvalNoReturn(expression, this.$data, {\r\n            ...extraVars(),\r\n            $dispatch: this.getDispatchFunction(el),\r\n        })\r\n    }\r\n\r\n    getDispatchFunction (el) {\r\n        return (event, detail = {}) => {\r\n            el.dispatchEvent(new CustomEvent(event, {\r\n                detail,\r\n                bubbles: true,\r\n            }))\r\n        }\r\n    }\r\n\r\n    listenForNewElementsToInitialize() {\r\n        const targetNode = this.$el\r\n\r\n        const observerOptions = {\r\n            childList: true,\r\n            attributes: true,\r\n            subtree: true,\r\n        }\r\n\r\n        const observer = new MutationObserver((mutations) => {\r\n            for (let i=0; i < mutations.length; i++){\r\n                // Filter out mutations triggered from child components.\r\n                const closestParentComponent = mutations[i].target.closest('[x-data]')\r\n                if (! (closestParentComponent && closestParentComponent.isSameNode(this.$el))) return\r\n\r\n                if (mutations[i].type === 'attributes' && mutations[i].attributeName === 'x-data') {\r\n                    const rawData = saferEval(mutations[i].target.getAttribute('x-data'), {})\r\n\r\n                    Object.keys(rawData).forEach(key => {\r\n                        if (this.$data[key] !== rawData[key]) {\r\n                            this.$data[key] = rawData[key]\r\n                        }\r\n                    })\r\n                }\r\n\r\n                if (mutations[i].addedNodes.length > 0) {\r\n                    mutations[i].addedNodes.forEach(node => {\r\n                        if (node.nodeType !== 1) return\r\n\r\n                        if (node.matches('[x-data]')) {\r\n                            node.__x = new Component(node)\r\n                            return\r\n                        }\r\n\r\n                        this.initializeElements(node)\r\n                    })\r\n                }\r\n              }\r\n        })\r\n\r\n        observer.observe(targetNode, observerOptions);\r\n    }\r\n\r\n    getRefsProxy() {\r\n        var self = this\r\n\r\n        var refObj = {}\r\n\r\n        /* IE11-ONLY:START */\r\n            //add any properties that might be necessary for ie11 proxy\r\n            refObj.$isRefsProxy = false;\r\n            refObj.$isAlpineProxy = false;\r\n\r\n            // If we are in IE, since the polyfill needs all properties to be defined before building the proxy,\r\n            // we just loop on the element, look for any x-ref and create a the property on a fake object.\r\n            // We don't need to put a real value since it will be resolved by the proxy class\r\n            this.walkAndSkipNestedComponents(self.$el, el => {\r\n                if (el.hasAttribute('x-ref')) {\r\n                    refObj[el.getAttribute('x-ref')] = true\r\n                }\r\n            })\r\n        /* IE11-ONLY:END */\r\n\r\n\r\n        // One of the goals of this is to not hold elements in memory, but rather re-evaluate\r\n        // the DOM when the system needs something from it. This way, the framework is flexible and\r\n        // friendly to outside DOM changes from libraries like Vue/Livewire.\r\n        // For this reason, I'm using an \"on-demand\" proxy to fake a \"$refs\" object.\r\n        return new Proxy(refObj, {\r\n            get(object, property) {\r\n                if (property === '$isAlpineProxy') return true\r\n\r\n                var ref\r\n\r\n                // We can't just query the DOM because it's hard to filter out refs in\r\n                // nested components.\r\n                self.walkAndSkipNestedComponents(self.$el, el => {\r\n                    if (el.hasAttribute('x-ref') && el.getAttribute('x-ref') === property) {\r\n                        ref = el\r\n                    }\r\n                })\r\n\r\n                return ref\r\n            }\r\n        })\r\n    }\r\n}\r\n","import { transitionIn, transitionOut } from '../utils'\r\n\r\nexport function handleShowDirective(el, value, initialUpdate = false) {\r\n    if (! value) {\r\n        if ( el.style.display !== 'none' ) {\r\n            transitionOut(el, () => {\r\n                el.style.display = 'none'\r\n            }, initialUpdate)\r\n        }\r\n    } else {\r\n        if ( el.style.display !== '' ) {\r\n            transitionIn(el, () => {\r\n                if (el.style.length === 1) {\r\n                    el.removeAttribute('style')\r\n                } else {\r\n                    el.style.removeProperty('display')\r\n                }\r\n            }, initialUpdate)\r\n        }\r\n    }\r\n}\r\n","import { transitionIn, transitionOut } from '../utils'\r\n\r\nexport function handleIfDirective(el, expressionResult, initialUpdate) {\r\n    if (el.nodeName.toLowerCase() !== 'template') console.warn(`Alpine: [x-if] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#x-if`)\r\n\r\n    const elementHasAlreadyBeenAdded = el.nextElementSibling && el.nextElementSibling.__x_inserted_me === true\r\n\r\n    if (expressionResult && ! elementHasAlreadyBeenAdded) {\r\n        const clone = document.importNode(el.content, true);\r\n\r\n        el.parentElement.insertBefore(clone, el.nextElementSibling)\r\n\r\n        el.nextElementSibling.__x_inserted_me = true\r\n\r\n        transitionIn(el.nextElementSibling, () => {}, initialUpdate)\r\n    } else if (! expressionResult && elementHasAlreadyBeenAdded) {\r\n        transitionOut(el.nextElementSibling, () => {\r\n            el.nextElementSibling.remove()\r\n        }, initialUpdate)\r\n    }\r\n}\r\n","import Component from './component'\r\nimport { domReady, isTesting } from './utils'\r\n\r\nconst Alpine = {\r\n    start: async function () {\r\n        if (! isTesting()) {\r\n            await domReady()\r\n        }\r\n\r\n        this.discoverComponents(el => {\r\n            this.initializeComponent(el)\r\n        })\r\n\r\n        // It's easier and more performant to just support Turbolinks than listen\r\n        // to MutationOberserver mutations at the document level.\r\n        document.addEventListener(\"turbolinks:load\", () => {\r\n            this.discoverUninitializedComponents(el => {\r\n                this.initializeComponent(el)\r\n            })\r\n        })\r\n\r\n        this.listenForNewUninitializedComponentsAtRunTime(el => {\r\n            this.initializeComponent(el)\r\n        })\r\n    },\r\n\r\n    discoverComponents: function (callback) {\r\n        const rootEls = document.querySelectorAll('[x-data]');\r\n\r\n        rootEls.forEach(rootEl => {\r\n            callback(rootEl)\r\n        })\r\n    },\r\n\r\n    discoverUninitializedComponents: function (callback, el = null) {\r\n        const rootEls = (el || document).querySelectorAll('[x-data]');\r\n\r\n        Array.from(rootEls)\r\n            .filter(el => el.__x === undefined)\r\n            .forEach(rootEl => {\r\n                callback(rootEl)\r\n            })\r\n    },\r\n\r\n    listenForNewUninitializedComponentsAtRunTime: function (callback) {\r\n        const targetNode = document.querySelector('body');\r\n\r\n        const observerOptions = {\r\n            childList: true,\r\n            attributes: true,\r\n            subtree: true,\r\n        }\r\n\r\n        const observer = new MutationObserver((mutations) => {\r\n            for (let i=0; i < mutations.length; i++){\r\n                if (mutations[i].addedNodes.length > 0) {\r\n                    mutations[i].addedNodes.forEach(node => {\r\n                        // Discard non-element nodes (like line-breaks)\r\n                        if (node.nodeType !== 1) return\r\n\r\n                        // Discard any changes happening within an existing component.\r\n                        // They will take care of themselves.\r\n                        if (node.parentElement && node.parentElement.closest('[x-data]')) return\r\n\r\n                        this.discoverUninitializedComponents((el) => {\r\n                            this.initializeComponent(el)\r\n                        }, node.parentElement)\r\n                    })\r\n                }\r\n              }\r\n        })\r\n\r\n        observer.observe(targetNode, observerOptions)\r\n    },\r\n\r\n    initializeComponent: function (el) {\r\n        if (! el.__x) {\r\n            el.__x = new Component(el)\r\n        }\r\n    }\r\n}\r\n\r\nif (! isTesting()) {\r\n    window.Alpine = Alpine\r\n    window.Alpine.start()\r\n}\r\n\r\nexport default Alpine\r\n"],"names":["arrayUnique","array","a","concat","i","length","j","splice","isTesting","navigator","userAgent","includes","saferEval","expression","dataContext","additionalHelperVariables","Function","Object","keys","values","saferEvalNoReturn","isXAttr","attr","name","replaceAtAndColonWithStandardSyntax","test","getXAttrs","el","type","Array","from","attributes","filter","map","typeMatch","match","valueMatch","modifiers","value","replace","startsWith","transitionIn","callback","forceSkip","attrs","transition","find","split","transitionOut","classesDuring","classesStart","classesEnd","hook1","hook2","originalClasses","__x_original_classes","classList","add","requestAnimationFrame","duration","Number","getComputedStyle","transitionDuration","remove","setTimeout","isConnected","deepProxy","target","proxyHandler","Node","property","Proxy","handleForDirective","component","initialUpdate","single","bunch","iterator1","iterator2","forIteratorRE","inMatch","res","trim","iteratorMatch","parseFor","items","evaluateReturnExpression","previousEl","forEach","index","group","currentKey","keyAttr","keyAliases","getThisIterationsKeyFromTemplateTag","currentEl","nextElementSibling","undefined","__x_for_key","tmpCurrentEl","parentElement","insertBefore","__x_for_alias","__x_for_value","updateElements","clone","document","importNode","content","initializeElements","nextElementFromOldLoop","nextElementFromOldLoopImmutable","nextSibling","handleAttributeBindingDirective","attrName","extraVars","checked","isArray","valueFound","val","tagName","arrayWrappedValue","options","option","selected","text","updateSelect","setAttribute","join","classNames","className","newClasses","removeAttribute","registerListener","event","handler","e","contains","offsetWidth","offsetHeight","runListenerHandler","removeEventListener","addEventListener","listenerTarget","window","isKeyEvent","keyModifiers","keyToModifier","key","selectedSystemKeyModifiers","modifier","isListeningForASpecificKeyThatHasntBeenPressed","preventDefault","stopPropagation","evaluateCommandExpression","toLowerCase","generateModelAssignmentFunction","hasAttribute","currentValue","CustomEvent","detail","multiple","selectedOptions","parseFloat","Component","constructor","$el","dataAttr","this","getAttribute","dataExpression","initExpression","createdExpression","mountedExpression","unobservedData","$refs","$nextTick","nextTickStack","initReturnedCallback","call","func","wait","context","args","arguments","later","timeout","apply","clearTimeout","self","data","walk","node","firstElementChild","rightSideOfExpression","style","display","removeProperty","innerHTML","expressionResult","nodeName","console","warn","elementHasAlreadyBeenAdded","__x_inserted_me","handleIfDirective","observer","mutations","$data","refObj","Alpine","start","async","Promise","resolve","readyState","discoverComponents","initializeComponent","discoverUninitializedComponents","listenForNewUninitializedComponentsAtRunTime","querySelectorAll","rootEl","rootEls","__x","targetNode","querySelector","MutationObserver","addedNodes","nodeType","closest","observe","childList","subtree"],"mappings":"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"}
