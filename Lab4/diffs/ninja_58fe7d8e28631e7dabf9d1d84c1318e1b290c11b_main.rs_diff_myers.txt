diff --git a/src/main.rs b/src/main.rs
index b6ba308..9781ff5 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -11,17 +11,14 @@ use tikv_jemallocator::Jemalloc;
 #[global_allocator]
 static GLOBAL: Jemalloc = Jemalloc;
 
-use std::sync::Arc;
-
 use args::SubCommands;
 use clap::Parser;
 
-pub mod account;
 pub mod args;
 pub mod args_handle;
+pub mod conf;
 pub mod env;
 pub mod prompt;
-pub mod ui;
 pub mod util;
 
 fn main() -> anyhow::Result<()> {
@@ -54,34 +51,7 @@ fn main() -> anyhow::Result<()> {
                 }
             },
         },
-        None => main_ui()?,
+        None => {}
     }
     Ok(())
 }
-
-#[tokio::main]
-async fn main_ui() -> anyhow::Result<()> {
-    let (sync_io_tx, mut sync_io_rx) = tokio::sync::mpsc::channel::<ui::io::IoEvent>(100);
-
-    // We need to share the App between thread
-    let app = Arc::new(tokio::sync::Mutex::new(ui::app::App::new(
-        sync_io_tx.clone(),
-    )));
-    let app_ui = Arc::clone(&app);
-
-    // Set max_log_level to Trace
-    tui_logger::init_logger(log::LevelFilter::Info).unwrap();
-
-    // Set default level for unknown targets to Trace
-    tui_logger::set_default_level(log::LevelFilter::Info);
-
-    // Handle IO in a specifc thread
-    tokio::spawn(async move {
-        let mut handler = ui::io::handler::IoAsyncHandler::new(app);
-        while let Some(io_event) = sync_io_rx.recv().await {
-            handler.handle_io_event(io_event).await;
-        }
-    });
-
-    ui::start_ui(&app_ui).await
-}
