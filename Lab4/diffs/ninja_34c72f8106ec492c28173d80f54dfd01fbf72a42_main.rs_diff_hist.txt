diff --git a/src/main.rs b/src/main.rs
index 6c6b57b..930ae8e 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -2,11 +2,12 @@ use std::sync::Arc;
 
 use args::SubCommands;
 use clap::Parser;
+use tracing_subscriber::{prelude::__tracing_subscriber_SubscriberExt, util::SubscriberInitExt};
 
 pub mod account;
 pub mod args;
+pub mod args_handle;
 pub mod env;
-pub mod handle;
 pub mod prompt;
 pub mod ui;
 pub mod util;
@@ -14,7 +15,13 @@ pub mod util;
 fn main() -> anyhow::Result<()> {
     let opt = args::Opt::parse();
     std::env::set_var("RUST_LOG", opt.level);
-    env_logger::init_from_env(env_logger::Env::default());
+    tracing_subscriber::registry()
+        .with(
+            tracing_subscriber::EnvFilter::try_from_default_env()
+                .unwrap_or_else(|_| "RUST_LOG=warn".into()),
+        )
+        .with(tracing_subscriber::fmt::layer())
+        .init();
     match opt.command {
         Some(command) => match command {
             SubCommands::Account => {
@@ -26,19 +33,19 @@ fn main() -> anyhow::Result<()> {
                 unofficial_proxy: _,
             } => {}
             SubCommands::Serve(commands) => match commands {
-                args::ServeSubcommand::Run(args) => handle::serve(args, true)?,
+                args::ServeSubcommand::Run(args) => args_handle::serve(args, true)?,
                 #[cfg(target_family = "unix")]
-                args::ServeSubcommand::Stop => handle::serve_stop()?,
+                args::ServeSubcommand::Stop => args_handle::serve_stop()?,
                 #[cfg(target_family = "unix")]
-                args::ServeSubcommand::Start(args) => handle::serve_start(args)?,
+                args::ServeSubcommand::Start(args) => args_handle::serve_start(args)?,
                 #[cfg(target_family = "unix")]
-                args::ServeSubcommand::Restart(args) => handle::serve_restart(args)?,
+                args::ServeSubcommand::Restart(args) => args_handle::serve_restart(args)?,
                 #[cfg(target_family = "unix")]
-                args::ServeSubcommand::Status => handle::serve_status()?,
+                args::ServeSubcommand::Status => args_handle::serve_status()?,
                 #[cfg(target_family = "unix")]
-                args::ServeSubcommand::Log => handle::serve_log()?,
+                args::ServeSubcommand::Log => args_handle::serve_log()?,
                 args::ServeSubcommand::GT { cover, out } => {
-                    handle::generate_template(cover, out)?;
+                    args_handle::generate_template(cover, out)?;
                 }
             },
         },
