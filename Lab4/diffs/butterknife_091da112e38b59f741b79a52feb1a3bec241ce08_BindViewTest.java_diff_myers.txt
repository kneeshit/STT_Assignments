diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
index e5f23c2..570d7f6 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
@@ -45,18 +45,16 @@ public class BindViewTest {
         + "    target.thing = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -99,15 +97,16 @@ public class BindViewTest {
         + "    return new InnerUnbinder(target);\n"
         + "  }\n"
         + "  protected static final class InnerUnbinder implements Unbinder {\n"
-        + "    private Test target;\n"
+        + "    protected Test target;\n"
         + "    protected InnerUnbinder(Test target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      Test target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
         + "      target.thing = null;\n"
-        + "      target = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -162,18 +161,16 @@ public class BindViewTest {
         + "    target.thing = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Base> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -200,8 +197,9 @@ public class BindViewTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(Test target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      Test target = this.target;\n"
+        + "      super.unbind();\n"
         + "      target.thing = null;\n"
         + "    }\n"
         + "  }\n"
@@ -250,18 +248,16 @@ public class BindViewTest {
         + "    target.thing = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Outer.Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -307,18 +303,16 @@ public class BindViewTest {
         + "    target.thing = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -364,18 +358,16 @@ public class BindViewTest {
         + "    target.thing = finder.castView(view, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -421,18 +413,16 @@ public class BindViewTest {
         + "    target.thing = finder.castView(view, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -488,20 +478,19 @@ public class BindViewTest {
         + "    });\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      view1.setOnClickListener(null);\n"
         + "      target.thing1 = null;\n"
+        + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -565,18 +554,16 @@ public class BindViewTest {
         + "    target.view = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.view = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -626,18 +613,16 @@ public class BindViewTest {
         + "    target.view = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.view = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -667,8 +652,9 @@ public class BindViewTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      target.thing = null;\n"
         + "    }\n"
         + "  }\n"
@@ -719,18 +705,16 @@ public class BindViewTest {
         + "    target.view = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.view = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -760,8 +744,9 @@ public class BindViewTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      target.thing = null;\n"
         + "    }\n"
         + "  }\n"
