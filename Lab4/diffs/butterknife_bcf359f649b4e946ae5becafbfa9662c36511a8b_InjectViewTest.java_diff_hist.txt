diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
index ca53071..ec423b1 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
@@ -26,13 +26,14 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void reset(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -62,13 +63,14 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = (android.widget.TextView) view;",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void reset(T target) {",
             "    target.thing = null;",
             "  }",
             "}"
@@ -99,8 +101,9 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
             "    target.thing1 = view;",
@@ -113,7 +116,7 @@ public class InjectViewTest {
             "        }",
             "      });",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void reset(T target) {",
             "    target.thing1 = null;",
             "  }",
             "}"
@@ -161,13 +164,14 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findOptionalView(source, 1);",
             "    target.view = view;",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void reset(T target) {",
             "    target.view = null;",
             "  }",
             "}"
@@ -202,13 +206,14 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void reset(T target) {",
             "    target.view = null;",
             "  }",
             "}"
@@ -219,15 +224,16 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.TestOne target, Object source) {",
-            "    test.Test$$ViewInjector.inject(finder, target, source);",
+            "public class TestOne$$ViewInjector<T extends test.TestOne> ",
+            "    extends test.Test$$ViewInjector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "    super.inject(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
             "  }",
-            "  public static void reset(test.TestOne target) {",
-            "    test.Test$$ViewInjector.reset(target);",
+            "  @Override public void reset(T target) {",
+            "    super.reset(target);",
             "    target.thing = null;",
             "  }",
             "}"
@@ -262,13 +268,14 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class Test$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
             "  }",
-            "  public static void reset(test.Test target) {",
+            "  @Override public void reset(T target) {",
             "    target.view = null;",
             "  }",
             "}"
@@ -279,15 +286,16 @@ public class InjectViewTest {
             "package test;",
             "import android.view.View;",
             "import butterknife.ButterKnife.Finder;",
-            "public class TestOne$$ViewInjector {",
-            "  public static void inject(Finder finder, final test.TestOne target, Object source) {",
-            "    test.Test$$ViewInjector.inject(finder, target, source);",
+            "public class TestOne$$ViewInjector<T extends test.TestOne> ",
+            "    extends test.Test$$ViewInjector<T> {",
+            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "    super.inject(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
             "  }",
-            "  public static void reset(test.TestOne target) {",
-            "    test.Test$$ViewInjector.reset(target);",
+            "  @Override public void reset(T target) {",
+            "    super.reset(target);",
             "    target.thing = null;",
             "  }",
             "}"
