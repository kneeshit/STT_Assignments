diff --git a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
index c150724..d655f94 100644
--- a/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
+++ b/butterknife-lint/src/test/java/butterknife/lint/InvalidR2UsageDetectorTest.java
@@ -1,15 +1,13 @@
 package butterknife.lint;
 
-import com.android.tools.lint.checks.infrastructure.LintDetectorTest;
-import com.android.tools.lint.checks.infrastructure.TestFiles;
-import com.android.tools.lint.detector.api.Detector;
-import com.android.tools.lint.detector.api.Issue;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
+import com.android.tools.lint.checks.infrastructure.TestFile;
+import org.junit.Test;
 
-public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
-  private static final String NO_WARNINGS = "No warnings.";
-  private static final TestFile BIND_TEST = TestFiles.java(""
+import static com.android.tools.lint.checks.infrastructure.TestFiles.java;
+import static com.android.tools.lint.checks.infrastructure.TestLintTask.lint;
+
+public final class InvalidR2UsageDetectorTest {
+  private static final TestFile BIND_TEST = java(""
       + "package sample.r2;\n"
       + "\n"
       + "import java.lang.annotation.ElementType;\n"
@@ -21,7 +19,8 @@ public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
       + "public @interface BindTest {\n"
       + "  int value();\n"
       + "}\n");
-  private static final TestFile R2 = TestFiles.java(""
+
+  private static final TestFile R2 = java(""
       + "package sample.r2;\n"
       + "\n"
       + "public final class R2 {\n"
@@ -62,25 +61,21 @@ public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
       + "  }\n"
       + "}");
 
-  @Override protected Detector getDetector() {
-    return new InvalidR2UsageDetector();
-  }
-
-  @Override protected List<Issue> getIssues() {
-    return ImmutableList.of(InvalidR2UsageDetector.ISSUE);
+  @Test public void noR2Usage() {
+    lint() //
+        .files(R2, //
+            java("" //
+                + "package sample;\n" //
+                + "class NoR2Usage {}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testNoR2Usage() throws Exception {
-    TestFile file = TestFiles.java(""
-        + "package sample;\n"
-        + "\n"
-        + "class NoR2Usage {\n"
-        + "}\n");
-    assertSame(NO_WARNINGS, lintFiles(R2, file));
-  }
-
-  public void testR2UsageInAnnotations() throws Exception {
-    TestFile file = TestFiles.java(""
+  @Test public void usesR2InAnnotations() {
+    lint() //
+        .files(R2, BIND_TEST, //
+            java(""
                 + "package sample.r2;\n"
                 + "\n"
                 + "public class R2UsageInAnnotations {\n"
@@ -88,12 +83,17 @@ public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
                 + "  @BindTest(sample.r2.R2.string.res) String test;\n"
                 + "\n"
                 + "  @BindTest(R2.id.res) public void foo() {}\n"
-        + "}\n");
-    assertSame(NO_WARNINGS, lintFiles(file, BIND_TEST, R2));
+                + "}\n") //
+        ) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 
-  public void testR2UsageOutsideAnnotations() throws Exception {
-    TestFile file = TestFiles.java(""
+  @Test public void usesR2OutsideAnnotations() {
+    lint() //
+        .files(R2, //
+            java(""
                 + "package sample.r2;\n"
                 + "\n"
                 + "public class R2UsageOutsideAnnotations {\n"
@@ -105,14 +105,17 @@ public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
                 + "  public void bar() {\n"
                 + "    foo(R2.color.res);\n"
                 + "  }\n"
-        + "}\n");
-    String lintOutput = lintFiles(file, R2);
-    assertNotSame(NO_WARNINGS, lintOutput);
-    assertTrue(lintOutput.contains("2 errors, 0 warnings"));
+                + "}\n" //
+            )) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectErrorCount(2) //
+        .expectWarningCount(0);
   }
 
-  public void testR2UsageWithSuppression() throws Exception {
-    TestFile file = TestFiles.java(""
+  @Test public void usesR2WithSuppression() {
+    lint() //
+        .files(R2, java(""
             + "package sample.r2;\n"
             + "\n"
             + "public class R2UsageWithSuppression {\n"
@@ -126,8 +129,9 @@ public final class InvalidR2UsageDetectorTest extends LintDetectorTest {
             + "  public void bar() {\n"
             + "    foo(R2.attr.res);\n"
             + "  }\n"
-        + "}\n");
-    String lintOutput = lintFiles(file, R2);
-    assertSame(NO_WARNINGS, lintOutput);
+            + "}\n")) //
+        .issues(InvalidR2UsageDetector.ISSUE) //
+        .run() //
+        .expectClean();
   }
 }
