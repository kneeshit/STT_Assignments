diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index e3b2ae9..ad4a43b 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -1,25 +1,79 @@
 package butterknife;
 
 import android.app.Activity;
+import android.util.Property;
+import android.view.View;
+import java.util.Arrays;
+import java.util.List;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
+import static org.fest.assertions.api.ANDROID.assertThat;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.entry;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
 public class ButterKnifeTest {
+  private static final Property<View, Boolean> PROPERTY_ENABLED =
+      new Property<View, Boolean>(Boolean.class, "enabled") {
+        @Override public Boolean get(View view) {
+          return view.isEnabled();
+        }
+
+        @Override public void set(View view, Boolean enabled) {
+          view.setEnabled(enabled);
+        }
+      };
+  private static final ButterKnife.Action<View> ACTION_DISABLE = new ButterKnife.Action<View>() {
+    @Override public void apply(View view, int index) {
+      view.setEnabled(false);
+    }
+  };
+
   @Before @After // Clear out cache of injectors and resetters before and after each test.
   public void resetViewsCache() {
     ButterKnife.INJECTORS.clear();
     ButterKnife.RESETTERS.clear();
   }
 
+  @Test public void propertyAppliedToEveryView() {
+    View view1 = new View(Robolectric.application);
+    View view2 = new View(Robolectric.application);
+    View view3 = new View(Robolectric.application);
+    assertThat(view1).isEnabled();
+    assertThat(view2).isEnabled();
+    assertThat(view3).isEnabled();
+
+    List<View> views = Arrays.asList(view1, view2, view3);
+    ButterKnife.apply(views, PROPERTY_ENABLED, false);
+
+    assertThat(view1).isDisabled();
+    assertThat(view2).isDisabled();
+    assertThat(view3).isDisabled();
+  }
+
+  @Test public void actionAppliedToEveryView() {
+    View view1 = new View(Robolectric.application);
+    View view2 = new View(Robolectric.application);
+    View view3 = new View(Robolectric.application);
+    assertThat(view1).isEnabled();
+    assertThat(view2).isEnabled();
+    assertThat(view3).isEnabled();
+
+    List<View> views = Arrays.asList(view1, view2, view3);
+    ButterKnife.apply(views, ACTION_DISABLE);
+
+    assertThat(view1).isDisabled();
+    assertThat(view2).isDisabled();
+    assertThat(view3).isDisabled();
+  }
+
   @Test public void zeroInjectionsInjectDoesNotThrowException() {
     class Example {
     }
