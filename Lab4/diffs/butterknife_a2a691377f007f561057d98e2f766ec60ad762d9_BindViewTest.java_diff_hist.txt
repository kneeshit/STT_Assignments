diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
index 391bbb1..6b7a924 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
@@ -1,7 +1,6 @@
 package butterknife;
 
 import butterknife.compiler.ButterKnifeProcessor;
-import com.google.common.base.Joiner;
 import com.google.testing.compile.JavaFileObjects;
 import java.util.Arrays;
 import javax.tools.JavaFileObject;
@@ -13,16 +12,15 @@ import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 
 public class BindViewTest {
   @Test public void bindingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.app.Activity;",
-            "import android.view.View;",
-            "import butterknife.BindView;",
-            "public class Test extends Activity {",
-            "    @BindView(1) View thing;",
-            "}"
-        ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -70,16 +68,15 @@ public class BindViewTest {
   }
 
   @Test public void bindingViewFinalClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.app.Activity;",
-            "import android.view.View;",
-            "import butterknife.BindView;",
-            "public final class Test extends Activity {",
-            "    @BindView(1) View thing;",
-            "}"
-        ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public final class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -127,25 +124,23 @@ public class BindViewTest {
   }
 
   @Test public void bindingViewFinalClassWithBaseClass() {
-    JavaFileObject baseSource = JavaFileObjects.forSourceString("test.Base",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.app.Activity;",
-            "import android.view.View;",
-            "import butterknife.BindView;",
-            "public class Base extends Activity {",
-            "    @BindView(1) View thing;",
-            "}"
-        ));
-    JavaFileObject testSource = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.view.View;",
-            "import butterknife.BindView;",
-            "public final class Test extends Base {",
-            "    @BindView(1) View thing;",
-            "}"
-        ));
+    JavaFileObject baseSource = JavaFileObjects.forSourceString("test.Base", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Base extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
+    JavaFileObject testSource = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public final class Test extends Base {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
 
     JavaFileObject binderBaseSource = JavaFileObjects.forSourceString("test/Base_ViewBinder", ""
         + "package test;\n"
@@ -227,18 +222,17 @@ public class BindViewTest {
   }
 
   @Test public void bindingViewInnerClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.app.Activity;",
-            "import android.view.View;",
-            "import butterknife.BindView;",
-            "public class Outer {",
-            "  public static class Test extends Activity {",
-            "    @BindView(1) View thing;",
-            "  }",
-            "}"
-        ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Outer {\n"
+        + "  public static class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "  }\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinder", ""
         + "package test;\n"
@@ -286,16 +280,15 @@ public class BindViewTest {
   }
 
   @Test public void bindingViewUppercasePackageName() {
-    JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test",
-        Joiner.on('\n').join(
-            "package com.Example;",
-            "import android.app.Activity;",
-            "import android.view.View;",
-            "import butterknife.BindView;",
-            "public class Test extends Activity {",
-            "    @BindView(1) View thing;",
-            "}"
-        ));
+    JavaFileObject source = JavaFileObjects.forSourceString("com.Example.Test", ""
+        + "package com.Example;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) View thing;\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package com.Example;\n"
@@ -343,16 +336,16 @@ public class BindViewTest {
   }
 
   @Test public void bindingInterface() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "    interface TestInterface {}",
-        "    @BindView(1) TestInterface thing;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    interface TestInterface {}\n"
+        + "    @BindView(1) TestInterface thing;\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -400,16 +393,16 @@ public class BindViewTest {
   }
 
   @Test public void genericType() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.widget.EditText;",
-        "import android.widget.TextView;",
-        "import butterknife.BindView;",
-        "class Test<T extends TextView> extends Activity {",
-        "    @BindView(1) T thing;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.widget.EditText;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.BindView;\n"
+        + "class Test<T extends TextView> extends Activity {\n"
+        + "    @BindView(1) T thing;\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -458,17 +451,17 @@ public class BindViewTest {
   }
 
   @Test public void oneFindPerId() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "import butterknife.OnClick;",
-        "public class Test extends Activity {",
-        "  @BindView(1) View thing1;",
-        "  @OnClick(1) void doStuff() {}",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "import butterknife.OnClick;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) View thing1;\n"
+        + "  @OnClick(1) void doStuff() {}\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -530,17 +523,17 @@ public class BindViewTest {
   }
 
   @Test public void fieldVisibility() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "  @BindView(1) public View thing1;",
-        "  @BindView(2) View thing2;",
-        "  @BindView(3) protected View thing3;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) public View thing1;\n"
+        + "  @BindView(2) View thing2;\n"
+        + "  @BindView(3) protected View thing3;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -548,16 +541,16 @@ public class BindViewTest {
   }
 
   @Test public void nullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "  @interface Nullable {}",
-        "  @Nullable @BindView(1) View view;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @interface Nullable {}\n"
+        + "  @Nullable @BindView(1) View view;\n"
+        + "}"
+    );
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -605,20 +598,20 @@ public class BindViewTest {
   }
 
   @Test public void superclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "  @BindView(1) View view;",
-        "}",
-        "class TestOne extends Test {",
-        "  @BindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test {",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) View view;\n"
+        + "}\n"
+        + "class TestOne extends Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}\n"
+        + "class TestTwo extends Test {\n"
+        + "}"
+    );
 
     JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -700,20 +693,20 @@ public class BindViewTest {
   }
 
   @Test public void genericSuperclass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test<T> extends Activity {",
-        "  @BindView(1) View view;",
-        "}",
-        "class TestOne extends Test<String> {",
-        "  @BindView(1) View thing;",
-        "}",
-        "class TestTwo extends Test<Object> {",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test<T> extends Activity {\n"
+        + "  @BindView(1) View view;\n"
+        + "}\n"
+        + "class TestOne extends Test<String> {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}\n"
+        + "class TestTwo extends Test<Object> {\n"
+        + "}"
+    );
 
     JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
@@ -795,14 +788,14 @@ public class BindViewTest {
   }
 
   @Test public void failsInJavaPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package java.test;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test {",
-        "  @BindView(1) View thing;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package java.test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -813,14 +806,14 @@ public class BindViewTest {
   }
 
   @Test public void failsInAndroidPackage() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package android.test;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test {",
-        "  @BindView(1) View thing;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package android.test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  @BindView(1) View thing;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -831,16 +824,16 @@ public class BindViewTest {
   }
 
   @Test public void failsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test {",
-        "  private static class Inner {",
-        "    @BindView(1) View thing;",
-        "  }",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test {\n"
+        + "  private static class Inner {\n"
+        + "    @BindView(1) View thing;\n"
+        + "  }\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -851,50 +844,50 @@ public class BindViewTest {
   }
 
   @Test public void failsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "  @BindView(1) String thing;",
-        "}"
-    ));
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .failsToCompile()
-        .withErrorContaining("@BindView fields must extend from View or be an interface. (test.Test.thing)")
-        .in(source).onLine(5);
-  }
-
-  @Test public void failsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public interface Test {",
-        "    @BindView(1) View thing = null;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindView(1) String thing;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
         .withErrorContaining(
-            "@BindView fields may only be contained in classes. (test.Test.thing)")
+            "@BindView fields must extend from View or be an interface. (test.Test.thing)")
+        .in(source).onLine(5);
+  }
+
+  @Test public void failsIfInInterface() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public interface Test {\n"
+        + "    @BindView(1) View thing = null;\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .processedWith(new ButterKnifeProcessor())
+        .failsToCompile()
+        .withErrorContaining("@BindView fields may only be contained in classes. (test.Test.thing)")
         .in(source).onLine(4);
   }
 
   @Test public void failsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "    @BindView(1) private View thing;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) private View thing;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -904,15 +897,15 @@ public class BindViewTest {
   }
 
   @Test public void failsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "    @BindView(1) static View thing;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) static View thing;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -922,16 +915,16 @@ public class BindViewTest {
   }
 
   @Test public void duplicateBindingFails() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import android.view.View;",
-        "import butterknife.BindView;",
-        "public class Test extends Activity {",
-        "    @BindView(1) View thing1;",
-        "    @BindView(1) View thing2;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.BindView;\n"
+        + "public class Test extends Activity {\n"
+        + "    @BindView(1) View thing1;\n"
+        + "    @BindView(1) View thing2;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -942,44 +935,44 @@ public class BindViewTest {
   }
 
   @Test public void failsRootViewBindingWithBadTarget() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnItemClick;",
-            "public class Test extends View {",
-            "  @OnItemClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnItemClick;\n"
+        + "public class Test extends View {\n"
+        + "  @OnItemClick void doStuff() {}\n"
+        + "  public Test(Context context) {\n"
+        + "    super(context);\n"
+        + "  }\n"
+        + "}"
+    );
 
     assertAbout(javaSource())
         .that(source)
         .processedWith(new ButterKnifeProcessor())
         .failsToCompile()
-        .withErrorContaining((
+        .withErrorContaining(
             "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)")
         .in(source)
         .onLine(6);
   }
 
   @Test public void failsOptionalRootViewBinding() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.Context;",
-            "import android.view.View;",
-            "import butterknife.OnClick;",
-            "import butterknife.Optional;",
-            "public class Test extends View {",
-            "  @Optional @OnClick void doStuff() {}",
-            "  public Test(Context context) {",
-            "    super(context);",
-            "  }",
-            "}"));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.OnClick;\n"
+        + "import butterknife.Optional;\n"
+        + "public class Test extends View {\n"
+        + "  @Optional @OnClick void doStuff() {}\n"
+        + "  public Test(Context context) {\n"
+        + "    super(context);\n"
+        + "  }\n"
+        + "}"
+    );
 
     assertAbout(javaSource())
         .that(source)
