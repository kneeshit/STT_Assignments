diff --git a/butterknife/src/main/java/butterknife/OnEditorAction.java b/butterknife/src/main/java/butterknife/OnEditorAction.java
index dddb82f..26e16bd 100644
--- a/butterknife/src/main/java/butterknife/OnEditorAction.java
+++ b/butterknife/src/main/java/butterknife/OnEditorAction.java
@@ -1,6 +1,7 @@
 package butterknife;
 
 import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -10,31 +11,44 @@ import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
  * Annotation for methods which indicate that they should be called when an edit action occurs.
- * Corresponds to adding a {@link OnEditorActionListener} to the views specified by
- * {@link #value()}.
+ * Corresponds to adding an {@link OnEditorActionListener OnEditorActionListener} to the views
+ * specified.
  * <pre><code>
  * {@literal @}OnEditorAction(R.id.example) boolean onEditorAction(KeyEvent key) {
  *   Toast.makeText(this, "Pressed: " + key, LENGTH_SHORT).show();
  *   return true;
  * }
  * </code></pre>
- * Any number of parameters from {@link OnEditorActionListener} may be used on the method.
+ * Any number of parameters from
+ * {@link OnEditorActionListener#onEditorAction(android.widget.TextView, int, android.view.KeyEvent)
+ * onEditorAction} may be used on the method.
  *
  * @see OnEditorActionListener
  * @see Optional
  */
-@Retention(CLASS) @Target(METHOD)
+@Target(METHOD)
+@Retention(CLASS)
 @ListenerClass(
     targetType = "android.widget.TextView",
     setter = "setOnEditorActionListener",
     type = "android.widget.TextView.OnEditorActionListener",
+    callbacks = OnEditorAction.Callback.class
+)
+public @interface OnEditorAction {
+  int[] value();
+  Callback callback() default Callback.EDITOR_ACTION;
+
+  enum Callback {
+    @ListenerMethod(
         name = "onEditorAction",
         parameters = {
             "android.widget.TextView",
             "int",
             "android.view.KeyEvent"
-    }
+        },
+        returnType = "boolean",
+        defaultReturn = "false"
     )
-public @interface OnEditorAction {
-  int[] value();
+    EDITOR_ACTION
+  }
 }
