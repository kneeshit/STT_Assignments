diff --git a/src/inter/mod.rs b/src/inter/mod.rs
index 92cb639..dcbb8c9 100644
--- a/src/inter/mod.rs
+++ b/src/inter/mod.rs
@@ -82,8 +82,6 @@ fn print_boot_message() {
 }
 
 pub async fn check_authorization() -> anyhow::Result<()> {
-    let pb = new_spinner("Initializing login...");
-
     Context::init_openai_context().await?;
     let store = Context::get_account_store().await;
     let client = Context::get_auth_client().await;
@@ -105,12 +103,24 @@ pub async fn check_authorization() -> anyhow::Result<()> {
         // Refresh if it is less than two weeks old
         for (k, token) in state.iter_mut() {
             if let AuthStrategy::Platform | AuthStrategy::Apple = k {
-                if token.expires() - current_time < token.expires_in() / 2 {
+                let time_left = token.expires() - current_time;
+                let difference = token.expires_in() / 2;
+                if time_left < difference {
                     if let Some(refresh_token) = token.refresh_token() {
-                        let refresh_token = client.do_refresh_token(refresh_token).await?;
+                        let pb = new_spinner("Initializing login...");
+                        match client.do_refresh_token(refresh_token).await {
+                            Ok(refresh_token) => {
                                 let new_token = AuthenticateToken::try_from(refresh_token)?;
                                 *token = new_token;
                                 change = true;
+                                pb.finish_and_clear();
+                                tokio::time::sleep(Duration::from_secs(3)).await;
+                            }
+                            Err(err) => {
+                                pb.finish_and_clear();
+                                println!("[{}-{k}] Error refreshing token: {}", token.email(), err)
+                            }
+                        };
                     }
                 }
             }
@@ -121,8 +131,6 @@ pub async fn check_authorization() -> anyhow::Result<()> {
         }
     }
 
-    pb.finish_and_clear();
-
     Ok(())
 }
 
