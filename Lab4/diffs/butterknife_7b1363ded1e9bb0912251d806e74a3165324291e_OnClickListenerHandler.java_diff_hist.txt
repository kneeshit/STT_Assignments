diff --git a/butterknife/src/main/java/butterknife/internal/OnClickListenerHandler.java b/butterknife/src/main/java/butterknife/internal/OnClickListenerHandler.java
index 987b0cd..c61bd2c 100644
--- a/butterknife/src/main/java/butterknife/internal/OnClickListenerHandler.java
+++ b/butterknife/src/main/java/butterknife/internal/OnClickListenerHandler.java
@@ -5,17 +5,18 @@ import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 
+import static butterknife.internal.InjectViewProcessor.isSubclassOfView;
 import static butterknife.internal.TargetClass.emitCastIfNeeded;
 
 public class OnClickListenerHandler implements InjectableListenerHandler {
   @Override
-  public String[] parseParamTypesAndValidateMethod(InjectViewProcessor ivp,
+  public Param[] parseParamTypesAndValidateMethod(InjectViewProcessor ivp,
       ExecutableElement element)
       throws InjectableListenerException {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
     List<? extends VariableElement> parameters = element.getParameters();
     if (parameters.isEmpty()) {
-      return new String[0];
+      return Param.NONE;
     }
 
     // Verify that there is only a single parameter.
@@ -26,13 +27,15 @@ public class OnClickListenerHandler implements InjectableListenerHandler {
     }
     // Verify that the parameter type extends from View.
     VariableElement variableElement = parameters.get(0);
-    if (!ivp.isSubtypeOfView(variableElement.asType())) {
+    if (!isSubclassOfView(variableElement.asType())) {
       throw new InjectableListenerException(element,
           "@OnClick method parameter type must be View or a subclass. (%s.%s)",
           enclosingElement.getQualifiedName(), element.getSimpleName());
     }
 
-    return new String[] {variableElement.asType().toString()};
+    return new Param[] {
+        new Param(0 /* unused */, variableElement.asType().toString())
+    };
   }
 
   @Override public void emit(StringBuilder builder, MethodBinding methodBinding) {
@@ -41,9 +44,8 @@ public class OnClickListenerHandler implements InjectableListenerHandler {
         .append("        target.")
         .append(methodBinding.getName())
         .append('(');
-    if (methodBinding.getParamTypes().length > 0) {
-      // Only emit a cast if the type is not View.
-      emitCastIfNeeded(builder, methodBinding.getParamTypes()[0]);
+    if (methodBinding.getParams().length > 0) {
+      emitCastIfNeeded(builder, methodBinding.getParams()[0].type);
       builder.append("view");
     }
     builder.append(");\n")
