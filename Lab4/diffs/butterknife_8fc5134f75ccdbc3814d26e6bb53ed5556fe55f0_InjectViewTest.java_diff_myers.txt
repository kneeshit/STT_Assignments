diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
index ec423b1..7d95dfc 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
@@ -28,7 +28,7 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
             "    target.thing = view;",
@@ -46,6 +46,43 @@ public class InjectViewTest {
         .generatesSources(expectedSource);
   }
 
+  @Test public void injectingInterface() throws Exception {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.InjectView;",
+        "public class Test extends Activity {",
+        "    interface TestInterface {}",
+        "    @InjectView(1) TestInterface thing;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.ButterKnife.Finder;",
+            "import butterknife.ButterKnife.Injector;",
+            "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
+            "    View view;",
+            "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
+            "  }",
+            "  @Override public void reset(T target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
   @Test public void genericType() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
@@ -65,10 +102,10 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
-            "    target.thing = (android.widget.TextView) view;",
+            "    target.thing = finder.castView(view, 1, \"field 'thing'\");",
             "  }",
             "  @Override public void reset(T target) {",
             "    target.thing = null;",
@@ -103,7 +140,7 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");",
             "    target.thing1 = view;",
@@ -166,9 +203,9 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
-            "    view = finder.findOptionalView(source, 1);",
+            "    view = finder.findOptionalView(source, 1, null);",
             "    target.view = view;",
             "  }",
             "  @Override public void reset(T target) {",
@@ -208,7 +245,7 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -226,7 +263,7 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "public class TestOne$$ViewInjector<T extends test.TestOne> ",
             "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    super.inject(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -270,7 +307,7 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "import butterknife.ButterKnife.Injector;",
             "public class Test$$ViewInjector<T extends test.Test> implements Injector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'view'\");",
             "    target.view = view;",
@@ -288,7 +325,7 @@ public class InjectViewTest {
             "import butterknife.ButterKnife.Finder;",
             "public class TestOne$$ViewInjector<T extends test.TestOne> ",
             "    extends test.Test$$ViewInjector<T> {",
-            "  @Override public void inject(Finder finder, final T target, Object source) {",
+            "  @Override public void inject(final Finder finder, final T target, Object source) {",
             "    super.inject(finder, target, source);",
             "    View view;",
             "    view = finder.findRequiredView(source, 1, \"field 'thing'\");",
@@ -377,7 +414,7 @@ public class InjectViewTest {
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .failsToCompile()
-        .withErrorContaining("@InjectView fields must extend from View. (test.Test.thing)")
+        .withErrorContaining("@InjectView fields must extend from View or be an interface. (test.Test.thing)")
         .in(source).onLine(5);
   }
 
@@ -495,7 +532,7 @@ public class InjectViewTest {
         .failsToCompile()
         .withErrorContaining((
             "@OnItemClick annotation without an ID may only be used with an object of type "
-                + "\"android.widget.AdapterView<?>\". (test.Test.doStuff)"))
+                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"))
         .in(source)
         .onLine(6);
   }
