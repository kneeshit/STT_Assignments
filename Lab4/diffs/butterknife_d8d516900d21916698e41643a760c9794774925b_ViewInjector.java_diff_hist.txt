diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
index 974d429..aca6d96 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
@@ -1,6 +1,8 @@
 package butterknife.internal;
 
 import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -182,8 +184,6 @@ final class ViewInjector {
     }
 
     for (ListenerClass listener : bindings.keySet()) {
-      Class<? extends Enum<?>> callbacks = listener.callbacks();
-      Enum<?>[] callbackMethods = callbacks.getEnumConstants();
       Map<ListenerMethod, ListenerBinding> methodBindings = bindings.get(listener);
 
       // Emit: ((OWNER_TYPE) view).SETTER_NAME(
@@ -218,18 +218,7 @@ final class ViewInjector {
           .append(listener.type())
           .append("() {\n");
 
-      for (Enum<?> callbackMethod : callbackMethods) {
-        try {
-          Field callbackField = callbacks.getField(callbackMethod.name());
-          ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
-          if (method == null) {
-            throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
-                callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
-                callbackMethod.name(), ListenerMethod.class.getSimpleName()));
-          }
-
-          ListenerBinding binding = methodBindings.get(method);
-
+      for (ListenerMethod method : getListenerMethods(listener)) {
         // Emit: @Override public RETURN_TYPE METHOD_NAME(
         builder.append(extraIndent)
             .append("        @Override public ")
@@ -262,7 +251,8 @@ final class ViewInjector {
           builder.append("return ");
         }
 
-          if (binding != null) {
+        if (methodBindings.containsKey(method)) {
+          ListenerBinding binding = methodBindings.get(method);
           builder.append("target.").append(binding.getName()).append('(');
           List<Parameter> parameters = binding.getParameters();
           String[] listenerParameters = method.parameters();
@@ -283,9 +273,6 @@ final class ViewInjector {
 
         // Emit end of listener method.
         builder.append(extraIndent).append("        }\n");
-        } catch (NoSuchFieldException e) {
-          throw new AssertionError(e);
-        }
       }
 
       // Emit end of listener class body and close the setter method call.
@@ -297,6 +284,30 @@ final class ViewInjector {
     }
   }
 
+  static List<ListenerMethod> getListenerMethods(ListenerClass listener) {
+    if (listener.method().length == 1) {
+      return Arrays.asList(listener.method());
+    }
+
+    try {
+      List<ListenerMethod> methods = new ArrayList<ListenerMethod>();
+      Class<? extends Enum<?>> callbacks = listener.callbacks();
+      for (Enum<?> callbackMethod : callbacks.getEnumConstants()) {
+        Field callbackField = callbacks.getField(callbackMethod.name());
+        ListenerMethod method = callbackField.getAnnotation(ListenerMethod.class);
+        if (method == null) {
+          throw new IllegalStateException(String.format("@%s's %s.%s missing @%s annotation.",
+              callbacks.getEnclosingClass().getSimpleName(), callbacks.getSimpleName(),
+              callbackMethod.name(), ListenerMethod.class.getSimpleName()));
+        }
+        methods.add(method);
+      }
+      return methods;
+    } catch (NoSuchFieldException e) {
+      throw new AssertionError(e);
+    }
+  }
+
   private void emitReset(StringBuilder builder) {
     builder.append("  public static void reset(").append(targetClass).append(" target) {\n");
     if (parentInjector != null) {
