diff --git a/website/index.html b/website/index.html
index 3aca559..962c179 100644
--- a/website/index.html
+++ b/website/index.html
@@ -5,7 +5,7 @@
     <meta charset="utf-8">
     <title>Butter Knife</title>
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <meta name="description" content="View &quot;injection&quot; library for Android.">
+    <meta name="description" content="Field and method binding for Android views.">
     <link href="http://fonts.googleapis.com/css?family=Roboto:regular,medium,thin,italic,mediumitalic,bold" rel="stylesheet" title="roboto">
     <link href="static/bootstrap.min.css" rel="stylesheet">
     <link href="static/bootstrap-responsive.min.css" rel="stylesheet">
@@ -18,43 +18,43 @@
         <div class="span4 side">
           <img src="static/logo.png">
           <h1>Butter Knife</h1>
-          <h2>View &quot;injection&quot; library for Android</h2>
+          <h2>Field and method binding for Android views</h2>
           <p><a href="javadoc/">Javadoc</a> &middot; <a href="http://stackoverflow.com/questions/ask?tags=butterknife">StackOverflow</a></p>
         </div>
         <div class="offset4 span8 main">
           <div class="main-inner">
             <h3 id="introduction">Introduction</h3>
-            <p>Annotate fields with <code>@InjectView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
+            <p>Annotate fields with <code>@FindView</code> and a view ID for Butter Knife to find and automatically cast the corresponding view in your layout.</p>
             <pre class="prettyprint">class ExampleActivity extends Activity {
-  @InjectView(R.id.title) TextView title;
-  @InjectView(R.id.subtitle) TextView subtitle;
-  @InjectView(R.id.footer) TextView footer;
+  @FindView(R.id.title) TextView title;
+  @FindView(R.id.subtitle) TextView subtitle;
+  @FindView(R.id.footer) TextView footer;
 
   @Override public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_activity);
-    ButterKnife.inject(this);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this);
+    // TODO Use fields...
   }
 }</pre>
-            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>inject</code> delegates to this generated code that you can see and debug.</p>
+            <p>Instead of slow reflection, code is generated to perform the view look-ups. Calling <code>bind</code> delegates to this generated code that you can see and debug.</p>
             <p>The generated code for the above example is roughly equivalent to the following:</p>
-            <pre class="prettyprint">public void inject(ExampleActivity activity) {
+            <pre class="prettyprint">public void bind(ExampleActivity activity) {
   activity.subtitle = (android.widget.TextView) activity.findViewById(2130968578);
   activity.footer = (android.widget.TextView) activity.findViewById(2130968579);
   activity.title = (android.widget.TextView) activity.findViewById(2130968577);
 }</pre>
 
-            <h4 id="non-activity">Non-Activity Injection</h4>
-            <p>You can also perform injection on arbitrary objects by supplying your own view root.</p>
+            <h4 id="non-activity">Non-Activity Binding</h4>
+            <p>You can also perform binding on arbitrary objects by supplying your own view root.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @FindView(R.id.button1) Button button1;
+  @FindView(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 }</pre>
@@ -77,27 +77,27 @@
   }
 
   static class ViewHolder {
-    @InjectView(R.id.title) TextView name;
-    @InjectView(R.id.job_title) TextView jobTitle;
+    @FindView(R.id.title) TextView name;
+    @FindView(R.id.job_title) TextView jobTitle;
 
     public ViewHolder(View view) {
-      ButterKnife.inject(this, view);
+      ButterKnife.bind(this, view);
     }
   }
 }</pre>
             <p>You can see this implementation in action in the provided sample.</p>
-            <p>Calls to <code>ButterKnife.inject</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
-            <p>Other provided injection APIs:</p>
+            <p>Calls to <code>ButterKnife.bind</code> can be made anywhere you would otherwise put <code>findViewById</code> calls.</p>
+            <p>Other provided binding APIs:</p>
             <ul>
-              <li>Inject arbitrary objects using an activity as the view root. If you use a pattern like MVC you can inject the controller using its activity with <code>ButterKnife.inject(this, activity)</code>.</li>
-              <li>Inject a view's children into fields using <code>ButterKnife.inject(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
+              <li>Bind arbitrary objects using an activity as the view root. If you use a pattern like MVC you can bind the controller using its activity with <code>ButterKnife.bind(this, activity)</code>.</li>
+              <li>Bind a view's children into fields using <code>ButterKnife.bind(this)</code>. If you use <code>&lt;merge></code> tags in a layout and inflate in a custom view constructor you can
    call this immediately after. Alternatively, custom view types inflated from
    XML can use it in the <code>onFinishInflate()</code> callback.</li>
             </ul>
 
             <h4 id="view-lists">View Lists</h4>
             <p>You can group multiple views into a <code>List</code> or array.</p>
-            <pre class="prettyprint">@InjectViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
+            <pre class="prettyprint">@FindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })
 List&lt;EditText> nameViews;</pre>
             <p>The <code>apply</code> method allows you to act on all the views in a list at once.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, DISABLE);
@@ -116,7 +116,7 @@ static final Setter&lt;View, Boolean> ENABLED = new Setter&lt;>() {
             <p>An Android <a href="https://developer.android.com/reference/android/util/Property.html"><code>Property</code></a> can also be used with the <code>apply</code> method.</p>
             <pre class="prettyprint">ButterKnife.apply(nameViews, View.ALPHA, 0);</pre>
 
-            <h4 id="click-injection">Listener Injection</h4>
+            <h4 id="listener-binding">Listener Binding</h4>
             <p>Listeners can also automatically be configured onto methods.</p>
             <pre class="prettyprint">@OnClick(R.id.submit)
 public void submit(View view) {
@@ -150,30 +150,30 @@ public void pickDoor(DoorView door) {
 }
 </pre>
 
-            <h4 id="reset">Injection Reset</h4>
-            <p>Fragments have a different view lifecycle than activities. When injecting a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has a <code>reset</code> method to do this automatically.</p>
+            <h4 id="reset">Binding Reset</h4>
+            <p>Fragments have a different view lifecycle than activities. When binding a fragment in <code>onCreateView</code>, set the views to <code>null</code> in <code>onDestroyView</code>. Butter Knife has an <code>unbind</code> method to do this automatically.</p>
             <pre class="prettyprint">public class FancyFragment extends Fragment {
-  @InjectView(R.id.button1) Button button1;
-  @InjectView(R.id.button2) Button button2;
+  @FindView(R.id.button1) Button button1;
+  @FindView(R.id.button2) Button button2;
 
   @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
     View view = inflater.inflate(R.layout.fancy_fragment, container, false);
-    ButterKnife.inject(this, view);
-    // TODO Use "injected" views...
+    ButterKnife.bind(this, view);
+    // TODO Use fields...
     return view;
   }
 
   @Override public void onDestroyView() {
     super.onDestroyView();
-    ButterKnife.reset(this);
+    ButterKnife.unbind(this);
   }
 }</pre>
 
-            <h4 id="optional">Optional Injections</h4>
-            <p>By default, both <code>@InjectView</code> and listener injections are required. An exception will be thrown if the target view cannot be found.</p>
-            <p>To suppress this behavior and create an optional injection, add a <code>@Nullable</code> annotation to the field or method.</p>
-            <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose, either from Butter Knife or from a different package. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
-            <pre class="prettyprint">@Nullable @InjectView(R.id.might_not_be_there) TextView mightNotBeThere;
+            <h4 id="optional">Optional Bindings</h4>
+            <p>By default, both <code>@FindView</code> and listener bindings are required. An exception will be thrown if the target view cannot be found.</p>
+            <p>To suppress this behavior and create an optional binding, add a <code>@Nullable</code> annotation to the field or method.</p>
+            <p>Note: Any annotation named <code>@Nullable</code> can be used for this purpose. It is encouraged to use the <code>@Nullable</code> annotation from Android's "support-annotations" library, see <a href="http://tools.android.com/tech-docs/support-annotations">Android Tools Project</a>.</p>
+            <pre class="prettyprint">@Nullable @FindView(R.id.might_not_be_there) TextView mightNotBeThere;
 
 @Nullable @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
   // TODO ...
@@ -233,10 +233,10 @@ ImageView photo = ButterKnife.findById(view, R.id.photo);</pre>
 
             <h4 id="proguard">ProGuard</h4>
             <p>Butter Knife generates and uses classes dynamically which means that static analysis tools like ProGuard may think they are unused. In order to prevent them from being removed, explicitly mark them to be kept.
-                To prevent ProGuard renaming classes that use @InjectView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
+                To prevent ProGuard renaming classes that use @FindView on a member field the <code>keepclasseswithmembernames</code> option is used.</p>
             <pre>-keep class butterknife.** { *; }
 -dontwarn butterknife.internal.**
--keep class **$$ViewInjector { *; }
+-keep class **$$ViewBinder { *; }
 
 -keepclasseswithmembernames class * {
     @butterknife.* &lt;fields&gt;;
