diff --git a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
index 41f0e34..5f75554 100644
--- a/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
+++ b/butterknife/src/test/java/butterknife/internal/InjectViewTest.java
@@ -13,25 +13,281 @@ import static org.truth0.Truth.ASSERT;
 
 public class InjectViewTest {
   @Test public void injectingView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterknife.InjectView;",
         "public class Test extends Activity {",
         "    @InjectView(1) View thing;",
-            "}"));
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.Views.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findById(source, 1);",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'thing' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.thing = view;",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void oneFindPerId() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.InjectView;",
+        "public class Test extends Activity {",
+        "  @InjectView(1) View thing1;",
+        "  @InjectView(1) View thing2;",
+        "  @InjectView(1) View thing3;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.Views.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findById(source, 1);",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'thing1' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.thing1 = view;",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'thing2' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.thing2 = view;",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'thing3' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.thing3 = view;",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "    target.thing1 = null;",
+            "    target.thing2 = null;",
+            "    target.thing3 = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void fieldVisibility() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.InjectView;",
+        "public class Test extends Activity {",
+        "  @InjectView(1) public View thing1;",
+        "  @InjectView(1) View thing2;",
+        "  @InjectView(1) protected View thing3;",
+        "}"
+    ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
         .compilesWithoutError();
-    // TODO: confirm generated source (should expect test.Test$$ViewInjector.java)
   }
 
-  @Test public void injectingViewFailsIfInPrivateClass() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
+  @Test public void optional() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.InjectView;",
+        "import butterknife.Optional;",
+        "public class Test extends Activity {",
+        "  @Optional @InjectView(1) View view;",
+        "}"
+    ));
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
         Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.Views.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findById(source, 1);",
+            "    target.view = view;",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource);
+  }
+
+  @Test public void superclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.InjectView;",
+        "import butterknife.Optional;",
+        "public class Test extends Activity {",
+        "  @InjectView(1) View view;",
+        "}",
+        "class TestOne extends Test {",
+        "  @InjectView(1) View thing;",
+        "}",
+        "class TestTwo extends Test {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.Views.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findById(source, 1);",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'view' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.view = view;",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.Views.Finder;",
+            "public class TestOne$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.TestOne target, Object source) {",
+            "    test.Test$$ViewInjector.inject(finder, target, source);",
+            "    View view;",
+            "    view = finder.findById(source, 1);",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'thing' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.thing = view;",
+            "  }",
+            "  public static void reset(test.TestOne target) {",
+            "    test.Test$$ViewInjector.reset(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void genericSuperclass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
+        "package test;",
+        "import android.app.Activity;",
+        "import android.view.View;",
+        "import butterknife.InjectView;",
+        "import butterknife.Optional;",
+        "public class Test<T> extends Activity {",
+        "  @InjectView(1) View view;",
+        "}",
+        "class TestOne extends Test<String> {",
+        "  @InjectView(1) View thing;",
+        "}",
+        "class TestTwo extends Test<Object> {",
+        "}"
+    ));
+
+    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.Views.Finder;",
+            "public class Test$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.Test target, Object source) {",
+            "    View view;",
+            "    view = finder.findById(source, 1);",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'view' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.view = view;",
+            "  }",
+            "  public static void reset(test.Test target) {",
+            "    target.view = null;",
+            "  }",
+            "}"
+        ));
+
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewInjector",
+        Joiner.on('\n').join(
+            "package test;",
+            "import android.view.View;",
+            "import butterknife.Views.Finder;",
+            "public class TestOne$$ViewInjector {",
+            "  public static void inject(Finder finder, final test.TestOne target, Object source) {",
+            "    test.Test$$ViewInjector.inject(finder, target, source);",
+            "    View view;",
+            "    view = finder.findById(source, 1);",
+            "    if (view == null) {",
+            "      throw new IllegalStateException(\"Required view with id '1' for field 'thing' was not found. If this field binding is optional add '@Optional'.\");",
+            "    }",
+            "    target.thing = view;",
+            "  }",
+            "  public static void reset(test.TestOne target) {",
+            "    test.Test$$ViewInjector.reset(target);",
+            "    target.thing = null;",
+            "  }",
+            "}"
+        ));
+
+    ASSERT.about(javaSource()).that(source)
+        .processedWith(butterknifeProcessors())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(expectedSource1, expectedSource2);
+  }
+
+  @Test public void injectingViewFailsIfInPrivateClass() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
         "import butterknife.InjectView;",
@@ -39,7 +295,8 @@ public class InjectViewTest {
         "  private static class Inner {",
         "    @InjectView(1) View thing;",
         "  }",
-            "}"));
+        "}"
+    ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
@@ -51,14 +308,14 @@ public class InjectViewTest {
   }
 
   @Test public void injectViewFailsIfNotView() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import butterknife.InjectView;",
         "public class Test extends Activity {",
         "  @InjectView(1) String thing;",
-            "}"));
+        "}"
+    ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
@@ -70,14 +327,14 @@ public class InjectViewTest {
   }
 
   @Test public void injectViewFailsIfInInterface() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.view.View;",
         "import butterknife.InjectView;",
         "public interface Test {",
         "    @InjectView(1) View thing = null;",
-            "}"));
+        "}"
+    ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
@@ -90,15 +347,15 @@ public class InjectViewTest {
   }
 
   @Test public void injectingViewFailsIfPrivate() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterknife.InjectView;",
         "public class Test extends Activity {",
         "    @InjectView(1) private View thing;",
-            "}"));
+        "}"
+    ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
@@ -110,15 +367,15 @@ public class InjectViewTest {
   }
 
   @Test public void injectingViewFailsIfStatic() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test",
-        Joiner.on('\n').join(
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
         "package test;",
         "import android.app.Activity;",
         "import android.view.View;",
         "import butterknife.InjectView;",
         "public class Test extends Activity {",
         "    @InjectView(1) static View thing;",
-            "}"));
+        "}"
+    ));
 
     ASSERT.about(javaSource()).that(source)
         .processedWith(butterknifeProcessors())
