diff --git a/examples/funcaptcha.rs b/examples/funcaptcha.rs
index 182524e..06c0085 100644
--- a/examples/funcaptcha.rs
+++ b/examples/funcaptcha.rs
@@ -1,7 +1,8 @@
 use openai::arkose;
+use openai::arkose::funcaptcha::solver::SubmitSolver;
 use openai::arkose::funcaptcha::Solver;
 use openai::arkose::{
-    funcaptcha::{self, solver::SubmitSolverBuilder, start_challenge},
+    funcaptcha::{self, start_challenge},
     ArkoseToken,
 };
 use std::str::FromStr;
@@ -64,12 +65,12 @@ async fn parse(
                             let (tx, rx) = tokio::sync::mpsc::channel(funs.len());
                             for (i, fun) in funs.iter().enumerate() {
                                 let sender = tx.clone();
-                                let submit_task = SubmitSolverBuilder::default()
+                                let submit_task = SubmitSolver::builder()
                                     .solved(solver)
                                     .client_key(key)
                                     .question(fun.instructions.clone())
                                     .image(fun.image.clone())
-                                    .build()?;
+                                    .build();
                                 tokio::spawn(async move {
                                     let res = funcaptcha::solver::submit_task(submit_task).await;
                                     if let Some(err) = sender.send((i, res)).await.err() {
@@ -98,12 +99,12 @@ async fn parse(
                                     .into_iter()
                                     .map(|item| item.image.clone())
                                     .collect::<Vec<String>>();
-                                let submit_task = SubmitSolverBuilder::default()
+                                let submit_task = SubmitSolver::builder()
                                     .solved(solver)
                                     .client_key(key)
                                     .question(data.0)
                                     .images(images)
-                                    .build()?;
+                                    .build();
                                 let sender = tx.clone();
                                 tokio::spawn(async move {
                                     let res = funcaptcha::solver::submit_task(submit_task).await;
