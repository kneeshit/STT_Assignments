diff --git a/src/main.rs b/src/main.rs
index c146ae5..efe84c6 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -5,13 +5,14 @@ use clap::Parser;
 
 pub mod account;
 pub mod args;
+#[cfg(target_family = "unix")]
+pub mod env;
 pub mod handle;
 pub mod prompt;
 pub mod ui;
 pub mod util;
 
-#[tokio::main]
-async fn main() -> anyhow::Result<()> {
+fn main() -> anyhow::Result<()> {
     let opt = args::Opt::parse();
     std::env::set_var("RUST_LOG", opt.level);
     match opt.command {
@@ -25,17 +26,29 @@ async fn main() -> anyhow::Result<()> {
                 unofficial_proxy: _,
             } => {}
             SubCommands::Serve(commands) => match commands {
-                args::ServeSubcommand::Run(args) => handle::run_serve(args).await?,
-                args::ServeSubcommand::Stop => todo!(),
-                args::ServeSubcommand::Restart => todo!(),
-                args::ServeSubcommand::Status => todo!(),
-                args::ServeSubcommand::Start => todo!(),
+                args::ServeSubcommand::Run(args) => handle::serve(args)?,
+                #[cfg(target_family = "unix")]
+                args::ServeSubcommand::Stop => handle::serve_stop()?,
+                #[cfg(target_family = "unix")]
+                args::ServeSubcommand::Start(args) => handle::serve_start(args)?,
+                #[cfg(target_family = "unix")]
+                args::ServeSubcommand::Restart(args) => handle::serve_restart(args)?,
+                #[cfg(target_family = "unix")]
+                args::ServeSubcommand::Status => handle::serve_status()?,
+                #[cfg(target_family = "unix")]
+                args::ServeSubcommand::Log => handle::serve_log()?,
                 args::ServeSubcommand::GT { cover, out } => {
-                    handle::generate_template(cover, out).await?;
+                    handle::generate_template(cover, out)?;
                 }
             },
         },
-        None => {
+        None => main_ui()?,
+    }
+    Ok(())
+}
+
+#[tokio::main]
+async fn main_ui() -> anyhow::Result<()> {
     let (sync_io_tx, mut sync_io_rx) = tokio::sync::mpsc::channel::<ui::io::IoEvent>(100);
 
     // We need to share the App between thread
@@ -56,8 +69,5 @@ async fn main() -> anyhow::Result<()> {
         }
     });
 
-            ui::start_ui(&app_ui).await?
-        }
-    }
-    Ok(())
+    ui::start_ui(&app_ui).await
 }
