diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
index 738fe7b..7952871 100644
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
@@ -758,45 +758,69 @@ public class UnbinderTest {
         + "}\n");
 
     JavaFileObject binderASource = JavaFileObjects.forSourceString("test/A_ViewBinder", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.Override;\n"
         + "public final class A_ViewBinder implements ViewBinder<A> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(A target, View source) {\n"
-        + "    bindToTarget(target, source.getContext());\n"
-        + "    return Unbinder.EMPTY;\n"
+        + "    return new A_ViewBinding<>(target, source.getContext());\n"
         + "  }\n"
-        + "  public static void bindToTarget(A target, Context context) {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingASource = JavaFileObjects.forSourceString("test/A_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class A_ViewBinding<T extends A> implements Unbinder {\n"
+        + "  protected T target;\n"
+        + "  public A_ViewBinding(T target, Context context) {\n"
+        + "    this.target = target;\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
         + "    target.blackColor = Utils.getColor(res, theme, android.R.color.black);\n"
         + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
+        + "  }\n"
         + "}"
     );
 
     JavaFileObject binderBSource = JavaFileObjects.forSourceString("test/B_ViewBinder", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
-        + "import android.content.Context;\n"
-        + "import android.content.res.Resources;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.Override;\n"
         + "public final class B_ViewBinder implements ViewBinder<B> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(B target, View source) {\n"
-        + "    bindToTarget(target, source.getContext());\n"
-        + "    return Unbinder.EMPTY;\n"
+        + "    return new B_ViewBinding<>(target, source.getContext());\n"
         + "  }\n"
-        + "  public static void bindToTarget(B target, Context context) {\n"
-        + "    A_ViewBinder.bindToTarget(target, context);\n"
+        + "}"
+    );
+
+    JavaFileObject bindingBSource = JavaFileObjects.forSourceString("test/B_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
+        + "package test;\n"
+        + "import android.content.Context;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "public class B_ViewBinding<T extends B> extends A_ViewBinding<T> {\n"
+        + "  public B_ViewBinding(T target, Context context) {\n"
+        + "    super(target, context);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
         + "    target.whiteColor = Utils.getColor(res, theme, android.R.color.white);\n"
@@ -819,19 +843,16 @@ public class UnbinderTest {
     );
 
     JavaFileObject bindingCSource = JavaFileObjects.forSourceString("test/C_ViewBinding", ""
+        + "// Generated code from Butter Knife. Do not modify!\n"
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class C_ViewBinding<T extends C> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class C_ViewBinding<T extends C> extends B_ViewBinding<T> {\n"
         + "  public C_ViewBinding(T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    B_ViewBinder.bindToTarget(target, source.getContext());\n"
+        + "    super(target, source.getContext());\n"
         + "    target.button1 = Utils.findRequiredView(source, android.R.id.button1, \"field 'button1'\");\n"
         + "    Context context = source.getContext();\n"
         + "    Resources res = context.getResources();\n"
@@ -841,9 +862,8 @@ public class UnbinderTest {
         + "  @Override\n"
         + "  public void unbind() {\n"
         + "    T target = this.target;\n"
-        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    super.unbind();\n"
         + "    target.button1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -1046,7 +1066,9 @@ public class UnbinderTest {
         .compilesWithoutWarnings()
         .and()
         .generatesSources(binderASource,
+            bindingASource,
             binderBSource,
+            bindingBSource,
             binderCSource,
             bindingCSource,
             binderDSource,
