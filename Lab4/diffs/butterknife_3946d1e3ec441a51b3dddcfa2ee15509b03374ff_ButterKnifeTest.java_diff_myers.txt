diff --git a/butterknife/src/test/java/butterknife/ButterKnifeTest.java b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
index b8f6444..1ff793c 100644
--- a/butterknife/src/test/java/butterknife/ButterKnifeTest.java
+++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java
@@ -3,7 +3,8 @@ package butterknife;
 import android.app.Activity;
 import android.util.Property;
 import android.view.View;
-
+import java.util.Arrays;
+import java.util.List;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -12,17 +13,9 @@ import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
-import java.util.Arrays;
-import java.util.List;
-
-import butterknife.shadow.EditModeShadowView;
-
-import static butterknife.ButterKnife.Finder.arrayOf;
-import static butterknife.ButterKnife.Finder.listOf;
 import static org.fest.assertions.api.ANDROID.assertThat;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.entry;
-import static org.fest.assertions.api.Assertions.fail;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
@@ -59,26 +52,6 @@ public class ButterKnifeTest {
     ButterKnife.BINDERS.clear();
   }
 
-  @Test public void listOfFiltersNull() {
-    assertThat(listOf(null, null, null)).isEmpty();
-    assertThat(listOf("One", null, null)).containsExactly("One");
-    assertThat(listOf(null, "One", null)).containsExactly("One");
-    assertThat(listOf(null, null, "One")).containsExactly("One");
-    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
-
-  @Test public void arrayOfFiltersNull() {
-    assertThat(arrayOf(null, null, null)).isEmpty();
-    assertThat(arrayOf("One", null, null)).containsExactly("One");
-    assertThat(arrayOf(null, "One", null)).containsExactly("One");
-    assertThat(arrayOf(null, null, "One")).containsExactly("One");
-    assertThat(arrayOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(arrayOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");
-  }
-
   @Test public void propertyAppliedToView() {
     View view = new View(Robolectric.application);
     assertThat(view).isEnabled();
@@ -220,29 +193,4 @@ public class ButterKnifeTest {
     ButterKnife.bind(new Object(), new Activity());
     assertThat(ButterKnife.BINDERS).isEmpty();
   }
-
-  @Test public void finderThrowsNiceError() {
-    View view = new View(Robolectric.application);
-    try {
-      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
-      fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view 'button1' with ID "
-          + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
-    }
-  }
-
-  @Config(shadows = EditModeShadowView.class)
-  @Test public void finderThrowsLessNiceErrorInEditMode() {
-    View view = new View(Robolectric.application);
-    try {
-      ButterKnife.Finder.VIEW.findRequiredView(view, android.R.id.button1, "yo mama");
-      fail("View 'button1' with ID " + android.R.id.button1 + " should not have been found.");
-    } catch (IllegalStateException e) {
-      assertThat(e).hasMessage("Required view '<unavailable while editing>' "
-          + "with ID " + android.R.id.button1
-          + " for yo mama was not found. If this view is optional add '@Nullable' annotation.");
-    }
-  }
 }
