diff --git a/dist/alpine.js b/dist/alpine.js
index 4ff23b9e..b8412300 100644
--- a/dist/alpine.js
+++ b/dist/alpine.js
@@ -90,17 +90,19 @@
       node = node.nextElementSibling;
     }
   }
-  function debounce(func, wait, context) {
+  function debounce(func, wait) {
+    var timeout;
     return function () {
-      var args = arguments;
+      var context = this,
+          args = arguments;
 
       var later = function later() {
-        context.debounceTimeout = null;
+        timeout = null;
         func.apply(context, args);
       };
 
-      clearTimeout(context.debounceTimeout);
-      context.debounceTimeout = setTimeout(later, wait);
+      clearTimeout(timeout);
+      timeout = setTimeout(later, wait);
     };
   }
   function saferEval(expression, dataContext, additionalHelperVariables = {}) {
@@ -688,7 +690,7 @@
 
   function registerListener(component, el, event, modifiers, expression, extraVars = {}) {
     if (modifiers.includes('away')) {
-      const handler = e => {
+      let handler = e => {
         // Don't do anything if the click came form the element or within it.
         if (el.contains(e.target)) return; // Don't do anything if this element isn't currently visible.
 
@@ -707,7 +709,7 @@
     } else {
       let listenerTarget = modifiers.includes('window') ? window : modifiers.includes('document') ? document : el;
 
-      const handler = e => {
+      let handler = e => {
         // Remove this global event handler if the element that declared it
         // has been removed. It's now stale.
         if (listenerTarget === window || listenerTarget === document) {
@@ -1300,6 +1302,13 @@
 
     wrapDataInObservable(data) {
       var self = this;
+      let updateDom = debounce(function () {
+        self.updateElements(self.$el); // Walk through the $nextTick stack and clear it as we go.
+
+        while (self.nextTickStack.length > 0) {
+          self.nextTickStack.shift()();
+        }
+      }, 0);
       let membrane = new ReactiveMembrane({
         valueMutated(target, key) {
           if (self.watchers[key]) {
@@ -1328,13 +1337,7 @@
 
 
           if (self.pauseReactivity) return;
-          debounce(() => {
-            self.updateElements(self.$el); // Walk through the $nextTick stack and clear it as we go.
-
-            while (self.nextTickStack.length > 0) {
-              self.nextTickStack.shift()();
-            }
-          }, 0, self)();
+          updateDom();
         }
 
       });
