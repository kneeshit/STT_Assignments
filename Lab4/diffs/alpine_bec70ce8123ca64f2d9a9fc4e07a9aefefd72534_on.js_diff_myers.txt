diff --git a/src/directives/on.js b/src/directives/on.js
index bc068612..f0e36c11 100644
--- a/src/directives/on.js
+++ b/src/directives/on.js
@@ -1,4 +1,4 @@
-import { keyToModifier } from '../utils'
+import { kebabCase } from '../utils'
 
 export function registerListener(component, el, event, modifiers, expression, extraVars = {}) {
     if (modifiers.includes('away')) {
@@ -25,26 +25,9 @@ export function registerListener(component, el, event, modifiers, expression, ex
             ? window : (modifiers.includes('document') ? document : el)
 
         const handler = e => {
-            const keyModifiers = modifiers.filter(i => i !== 'window').filter(i => i !== 'document')
-
-            // The user is scoping the keydown listener to a specific key using modifiers.
-            if (event === 'keydown' && keyModifiers.length > 0) {
-                // The user is listening for a specific key.
-                if (keyModifiers.length === 1 && ! keyModifiers.includes(keyToModifier(e.key))) return
-
-                // The user is listening for key combinations.
-                const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super']
-                const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier))
-
-                if (selectedSystemKeyModifiers.length > 0) {
-                    const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {
-                        // Alias "cmd" and "super" to "meta"
-                        if (modifier === 'cmd' || modifier === 'super') modifier = 'meta'
-
-                        return e[`${modifier}Key`]
-                    })
-
-                    if (activelyPressedKeyModifiers.length === 0) return
+            if (isKeyEvent(event)) {
+                if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {
+                    return
                 }
             }
 
@@ -67,3 +50,55 @@ function runListenerHandler(component, expression, e, extraVars) {
         return {...extraVars(), '$event': e}
     })
 }
+
+function isKeyEvent(event) {
+    return ['keydown', 'keyup'].includes(event)
+}
+
+function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {
+    let keyModifiers = modifiers.filter(i => {
+        return ! ['window', 'document', 'prevent', 'stop'].includes(i)
+    })
+
+    // If no modifier is specified, we'll call it a press.
+    if (keyModifiers.length === 0) return false
+
+    // If one is passed, AND it matches the key pressed, we'll call it a press.
+    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false
+
+    // The user is listening for key combinations.
+    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super']
+    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier))
+
+    keyModifiers = keyModifiers.filter(i => ! selectedSystemKeyModifiers.includes(i))
+
+    if (selectedSystemKeyModifiers.length > 0) {
+        const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {
+            // Alias "cmd" and "super" to "meta"
+            if (modifier === 'cmd' || modifier === 'super') modifier = 'meta'
+
+            return e[`${modifier}Key`]
+        })
+
+        // If all the modifiers selected are pressed, ...
+        if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
+            // AND the remaining key is pressed as well. It's a press.
+            if (keyModifiers[0] === keyToModifier(e.key)) return false
+        }
+    }
+
+    // We'll call it NOT a valid keypress.
+    return true
+}
+
+function keyToModifier(key) {
+    switch (key) {
+        case '/':
+            return 'slash'
+        case ' ':
+        case 'Spacebar':
+            return 'space'
+        default:
+            return kebabCase(key)
+    }
+}
