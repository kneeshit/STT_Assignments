diff --git a/butterknife/src/main/java/butterknife/internal/Finder.java b/butterknife/src/main/java/butterknife/internal/Finder.java
index 36977ca..b8fcc0a 100644
--- a/butterknife/src/main/java/butterknife/internal/Finder.java
+++ b/butterknife/src/main/java/butterknife/internal/Finder.java
@@ -46,6 +46,22 @@ public enum Finder {
 
   public abstract View findOptionalView(Object source, int id);
 
+  public final <T> T findOptionalViewAsType(Object source, int id, String who, Class<T> cls) {
+    View view = findOptionalView(source, id);
+    try {
+      return cls.cast(view);
+    } catch (ClassCastException e) {
+      String name = getResourceEntryName(view, id);
+      throw new IllegalStateException("View '"
+          + name
+          + "' with ID "
+          + id
+          + " for "
+          + who
+          + " was of the wrong type. See cause for more info.", e);
+    }
+  }
+
   public final View findRequiredView(Object source, int id, String who) {
     View view = findOptionalView(source, id);
     if (view != null) {
@@ -62,6 +78,22 @@ public enum Finder {
         + " (methods) annotation.");
   }
 
+  public final <T> T findRequiredViewAsType(Object source, int id, String who, Class<T> cls) {
+    View view = findRequiredView(source, id, who);
+    try {
+      return cls.cast(view);
+    } catch (ClassCastException e) {
+      String name = getResourceEntryName(view, id);
+      throw new IllegalStateException("View '"
+          + name
+          + "' with ID "
+          + id
+          + " for "
+          + who
+          + " was of the wrong type. See cause for more info.", e);
+    }
+  }
+
   @SuppressWarnings("unchecked") // That's the point.
   public final <T> T castView(View view, int id, String who) {
     try {
