diff --git a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
index 3a8a282..5f1fa47 100644
--- a/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
+++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java
@@ -5,13 +5,19 @@ import android.app.Dialog;
 import android.content.Context;
 import android.content.res.ColorStateList;
 import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.UiThread;
 import android.support.v4.content.ContextCompat;
+import android.support.v4.content.res.ResourcesCompat;
 import android.util.Log;
 import android.view.View;
+import android.view.animation.Animation;
 import butterknife.internal.Constants;
 import butterknife.internal.Utils;
 import java.lang.annotation.Annotation;
@@ -137,6 +143,18 @@ public final class ButterKnife {
         unbinder = parseBindViews(target, field, source);
         if (unbinder != null) unbinders.add(unbinder);
 
+        unbinder = parseBindAnim(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindArray(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindBitmap(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindBool(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
         unbinder = parseBindColor(target, field, source);
         if (unbinder != null) unbinders.add(unbinder);
 
@@ -146,6 +164,15 @@ public final class ButterKnife {
         unbinder = parseBindDrawable(target, field, source);
         if (unbinder != null) unbinders.add(unbinder);
 
+        unbinder = parseBindFloat(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindFont(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
+        unbinder = parseBindInt(target, field, source);
+        if (unbinder != null) unbinders.add(unbinder);
+
         unbinder = parseBindString(target, field, source);
         if (unbinder != null) unbinders.add(unbinder);
 
@@ -252,6 +279,105 @@ public final class ButterKnife {
     return new FieldUnbinder(target, field);
   }
 
+  private static @Nullable Unbinder parseBindAnim(Object target, Field field, View source) {
+    BindAnim bindAnim = field.getAnnotation(BindAnim.class);
+    if (bindAnim == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindAnim.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == Animation.class) {
+      value = resources.getAnimation(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    uncheckedSet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindArray(Object target, Field field, View source) {
+    BindArray bindArray = field.getAnnotation(BindArray.class);
+    if (bindArray == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindArray.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == TypedArray.class) {
+      value = resources.obtainTypedArray(id);
+    } else if (fieldType.isArray()) {
+      Class<?> componentType = fieldType.getComponentType();
+      if (componentType == String.class) {
+        value = resources.getStringArray(id);
+      } else if (componentType == int.class) {
+        value = resources.getIntArray(id);
+      } else if (componentType == CharSequence.class) {
+        value = resources.getTextArray(id);
+      } else {
+        throw new IllegalStateException(); // TODO
+      }
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    uncheckedSet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindBitmap(Object target, Field field, View source) {
+    BindBitmap bindBitmap = field.getAnnotation(BindBitmap.class);
+    if (bindBitmap == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindBitmap.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == Bitmap.class) {
+      value = BitmapFactory.decodeResource(resources, id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    uncheckedSet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindBool(Object target, Field field, View source) {
+    BindBool bindBool = field.getAnnotation(BindBool.class);
+    if (bindBool == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindBool.value();
+    Resources resources = source.getContext().getResources();
+
+    Object value;
+    Class<?> fieldType = field.getType();
+    if (fieldType == boolean.class) {
+      value = resources.getBoolean(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    uncheckedSet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
   private static @Nullable Unbinder parseBindColor(Object target, Field field, View source) {
     BindColor bindColor = field.getAnnotation(BindColor.class);
     if (bindColor == null) {
@@ -325,6 +451,76 @@ public final class ButterKnife {
     return Unbinder.EMPTY;
   }
 
+  private static @Nullable Unbinder parseBindFloat(Object target, Field field, View source) {
+    BindFloat bindInt = field.getAnnotation(BindFloat.class);
+    if (bindInt == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindInt.value();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == float.class) {
+      value = Utils.getFloat(context, id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    uncheckedSet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindFont(Object target, Field field, View source) {
+    BindFont bindFont = field.getAnnotation(BindFont.class);
+    if (bindFont == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindFont.value();
+    int style = bindFont.style();
+    Context context = source.getContext();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == Typeface.class) {
+      Typeface font = ResourcesCompat.getFont(context, id);
+      value = style != Typeface.NORMAL
+          ? Typeface.create(font, style)
+          : font;
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    uncheckedSet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
+  private static @Nullable Unbinder parseBindInt(Object target, Field field, View source) {
+    BindInt bindInt = field.getAnnotation(BindInt.class);
+    if (bindInt == null) {
+      return null;
+    }
+    validateMember(field);
+
+    int id = bindInt.value();
+    Resources resources = source.getContext().getResources();
+
+    Class<?> fieldType = field.getType();
+    Object value;
+    if (fieldType == int.class) {
+      value = resources.getInteger(id);
+    } else {
+      throw new IllegalStateException(); // TODO
+    }
+    uncheckedSet(field, target, value);
+
+    return Unbinder.EMPTY;
+  }
+
   private static @Nullable Unbinder parseBindString(Object target, Field field, View source) {
     BindString bindString = field.getAnnotation(BindString.class);
     if (bindString == null) {
@@ -332,10 +528,13 @@ public final class ButterKnife {
     }
     validateMember(field);
 
+    int id = bindString.value();
+    Context context = source.getContext();
+
     Class<?> fieldType = field.getType();
     Object value;
     if (fieldType == String.class) {
-      value = source.getContext().getString(bindString.value());
+      value = context.getString(id);
     } else {
       throw new IllegalStateException(); // TODO
     }
