diff --git a/examples/funcaptcha.rs b/examples/funcaptcha.rs
index 2467675..32e89e7 100644
--- a/examples/funcaptcha.rs
+++ b/examples/funcaptcha.rs
@@ -49,10 +49,9 @@ async fn parse(
         match start_challenge(token).await {
             Ok(session) => {
                 if let Some(funs) = session.funcaptcha() {
-                    let max_cap = funs.len();
-                    let (tx, mut rx) = tokio::sync::mpsc::channel(max_cap);
-                    match solver {
+                    let mut rx = match solver {
                         Solver::Yescaptcha => {
+                            let (tx, rx) = tokio::sync::mpsc::channel(funs.len());
                             for (i, fun) in funs.iter().enumerate() {
                                 let sender = tx.clone();
                                 let submit_task = SubmitSolverBuilder::default()
@@ -68,6 +67,7 @@ async fn parse(
                                     }
                                 });
                             }
+                            rx
                         }
                         Solver::Capsolver => {
                             let mut classified_data = std::collections::HashMap::new();
@@ -81,9 +80,9 @@ async fn parse(
                                     .push(item);
                             }
 
-                            for (i, data) in classified_data.into_iter().enumerate() {
-                                let sender = tx.clone();
+                            let (tx, rx) = tokio::sync::mpsc::channel(classified_data.len());
 
+                            for (i, data) in classified_data.into_iter().enumerate() {
                                 let images = data
                                     .1
                                     .into_iter()
@@ -96,7 +94,7 @@ async fn parse(
                                     .question(data.0)
                                     .images(images)
                                     .build()?;
-
+                                let sender = tx.clone();
                                 tokio::spawn(async move {
                                     let res = funcaptcha::solver::submit_task(submit_task).await;
                                     if let Some(err) = sender.send((i, res)).await.err() {
@@ -104,14 +102,15 @@ async fn parse(
                                     }
                                 });
                             }
+                            rx
                         }
-                    }
+                    };
 
                     // Wait for all tasks to complete
-                    let mut r = Vec::with_capacity(max_cap);
+                    let mut r = Vec::new();
                     let mut need_soty = false;
-                    for _ in 0..max_cap {
-                        if let Some((i, res)) = rx.recv().await {
+
+                    while let Some((i, res)) = rx.recv().await {
                         let answers = res?;
                         println!("index: {i}, answers: {:?}", answers);
                         if answers.len() == 1 {
@@ -126,7 +125,6 @@ async fn parse(
                             );
                         }
                     }
-                    }
 
                     if need_soty {
                         r.sort_by_key(|&(i, _)| i);
