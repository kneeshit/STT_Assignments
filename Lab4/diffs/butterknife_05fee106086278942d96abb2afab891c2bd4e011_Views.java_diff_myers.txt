diff --git a/butterknife/src/main/java/butterknife/Views.java b/butterknife/src/main/java/butterknife/Views.java
index 8453b45..341e713 100644
--- a/butterknife/src/main/java/butterknife/Views.java
+++ b/butterknife/src/main/java/butterknife/Views.java
@@ -10,6 +10,7 @@ import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Filer;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedAnnotationTypes;
 import javax.lang.model.SourceVersion;
@@ -19,6 +20,8 @@ import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
 import javax.tools.JavaFileObject;
 
 import static javax.lang.model.element.ElementKind.CLASS;
@@ -27,45 +30,87 @@ import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.STATIC;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
+/** View injection utilities. */
 public class Views {
   private Views() {
     // No instances.
   }
 
+  public enum Finder {
+    VIEW() {
+      @SuppressWarnings("unchecked") @Override
+      public <T extends View> T findById(Object source, int id) {
+        return (T) ((View) source).findViewById(id);
+      }
+    },
+    ACTIVITY() {
+      @SuppressWarnings("unchecked") @Override
+      public <T extends View> T findById(Object source, int id) {
+        return (T) ((Activity) source).findViewById(id);
+      }
+    };
+
+    public abstract <T extends View> T findById(Object source, int id);
+  }
+
   private static final Map<Class<?>, Method> INJECTORS = new LinkedHashMap<Class<?>, Method>();
 
   /**
-   * Inject fields annotated with {@link InjectView} in the specified {@link Activity}.
+   * Inject fields annotated with {@link InjectView} in the specified {@link Activity}. The current
+   * content view is used as the view root.
    *
    * @param target Target activity for field injection.
    * @throws UnableToInjectException if injection could not be performed.
    */
   public static void inject(Activity target) {
-    inject(target, Activity.class, target);
+    inject(target, target, Finder.ACTIVITY);
   }
 
   /**
-   * Inject fields annotated with {@link InjectView} in the specified {@code source} using {@code
-   * target} as the view root.
+   * Inject fields annotated with {@link InjectView} in the specified {@link View}. The view and
+   * its children are used as the view root.
+   *
+   * @param target Target view for field injection.
+   * @throws UnableToInjectException if injection could not be performed.
+   */
+  public static void inject(View target) {
+    inject(target, target, Finder.VIEW);
+  }
+
+  /**
+   * Inject fields annotated with {@link InjectView} in the specified {@code source} using the
+   * {@code target} {@link View} as the view root.
    *
    * @param target Target class for field injection.
-   * @param source View tree root on which IDs will be looked up.
+   * @param source View root on which IDs will be looked up.
    * @throws UnableToInjectException if injection could not be performed.
    */
   public static void inject(Object target, View source) {
-    inject(target, View.class, source);
+    inject(target, source, Finder.VIEW);
   }
 
-  private static void inject(Object target, Class<?> sourceType, Object source) {
+  /**
+   * Inject fields annotated with {@link InjectView} in the specified {@code source} using the
+   * {@code target} {@link Activity} as the view root.
+   *
+   * @param target Target class for field injection.
+   * @param source Activity on which IDs will be looked up.
+   * @throws UnableToInjectException if injection could not be performed.
+   */
+  public static void inject(Object target, Activity source) {
+    inject(target, source, Finder.ACTIVITY);
+  }
+
+  private static void inject(Object target, Object source, Finder finder) {
     try {
       Class<?> targetClass = target.getClass();
       Method inject = INJECTORS.get(targetClass);
       if (inject == null) {
-        Class<?> injector = Class.forName(targetClass.getName() + AnnotationProcessor.SUFFIX);
-        inject = injector.getMethod("inject", targetClass, sourceType);
+        Class<?> injector = Class.forName(targetClass.getName() + InjectViewProcessor.SUFFIX);
+        inject = injector.getMethod("inject", Finder.class, targetClass, Object.class);
         INJECTORS.put(targetClass, inject);
       }
-      inject.invoke(null, target, source);
+      inject.invoke(null, finder, target, source);
     } catch (RuntimeException e) {
       throw e;
     } catch (Exception e) {
@@ -104,7 +149,11 @@ public class Views {
     }
 
     @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {
-      TypeMirror viewType = processingEnv.getElementUtils().getTypeElement(TYPE_VIEW).asType();
+      Elements elementUtils = processingEnv.getElementUtils();
+      Types typeUtils = processingEnv.getTypeUtils();
+      Filer filer = processingEnv.getFiler();
+
+      TypeMirror viewType = elementUtils.getTypeElement("android.view.View").asType();
 
       Map<TypeElement, Set<InjectionPoint>> injectionsByClass =
           new LinkedHashMap<TypeElement, Set<InjectionPoint>>();
@@ -114,7 +163,7 @@ public class Views {
         TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
 
         // Verify that the target type extends from View.
-        if (!processingEnv.getTypeUtils().isSubtype(element.asType(), viewType)) {
+        if (!typeUtils.isSubtype(element.asType(), viewType)) {
           error("@InjectView fields must extend from View (%s.%s).",
               enclosingElement.getQualifiedName(), element);
           continue;
@@ -144,9 +193,8 @@ public class Views {
 
         // Assemble information on the injection point.
         String variableName = element.getSimpleName().toString();
-        String type = element.asType().toString();
         int value = element.getAnnotation(InjectView.class).value();
-        injections.add(new InjectionPoint(variableName, type, value));
+        injections.add(new InjectionPoint(variableName, value));
 
         // Add to the valid injection targets set.
         injectionTargets.add(enclosingElement.asType());
@@ -157,9 +205,7 @@ public class Views {
         Set<InjectionPoint> injectionPoints = injection.getValue();
 
         String targetType = type.getQualifiedName().toString();
-        String sourceType = resolveSourceType(type);
-        String packageName =
-            processingEnv.getElementUtils().getPackageOf(type).getQualifiedName().toString();
+        String packageName = elementUtils.getPackageOf(type).getQualifiedName().toString();
         String className =
             type.getQualifiedName().toString().substring(packageName.length() + 1).replace('.', '$')
                 + SUFFIX;
@@ -177,11 +223,10 @@ public class Views {
 
         // Write the view injector class.
         try {
-          JavaFileObject jfo =
-              processingEnv.getFiler().createSourceFile(packageName + "." + className, type);
+          JavaFileObject jfo = filer.createSourceFile(packageName + "." + className, type);
           Writer writer = jfo.openWriter();
-          writer.write(String.format(INJECTOR, packageName, className, targetType, sourceType,
-              injections.toString()));
+          writer.write(
+              String.format(INJECTOR, packageName, className, targetType, injections.toString()));
           writer.flush();
           writer.close();
         } catch (IOException e) {
@@ -192,21 +237,6 @@ public class Views {
       return true;
     }
 
-    /** Returns {@link #TYPE_ACTIVITY} or {@link #TYPE_VIEW} as the injection target type. */
-    private String resolveSourceType(TypeElement typeElement) {
-      TypeMirror type;
-      while (true) {
-        type = typeElement.getSuperclass();
-        if (type.getKind() == TypeKind.NONE) {
-          return TYPE_VIEW;
-        }
-        if (type.toString().equals(TYPE_ACTIVITY)) {
-          return TYPE_ACTIVITY;
-        }
-        typeElement = (TypeElement) ((DeclaredType) type).asElement();
-      }
-    }
-
     /** Finds the parent injector type in the supplied set, if any. */
     private String resolveParentType(TypeElement typeElement, Set<TypeMirror> parents) {
       TypeMirror type;
@@ -224,28 +254,25 @@ public class Views {
 
     private static class InjectionPoint {
       private final String variableName;
-      private final String type;
       private final int value;
 
-      InjectionPoint(String variableName, String type, int value) {
+      InjectionPoint(String variableName, int value) {
         this.variableName = variableName;
-        this.type = type;
         this.value = value;
       }
 
       @Override public String toString() {
-        return String.format(INJECTION, variableName, type, value);
+        return String.format(INJECTION, variableName, value);
       }
     }
 
-    private static final String TYPE_ACTIVITY = "android.app.Activity";
-    private static final String TYPE_VIEW = "android.view.View";
-    private static final String INJECTION = "    target.%s = (%s) source.findViewById(%s);";
+    private static final String INJECTION = "    target.%s = finder.findById(source, %s);";
     private static final String INJECTOR = ""
         + "// Generated code from Butter Knife. Do not modify!\n"
         + "package %s;\n\n"
+        + "import butterknife.Views.Finder;\n\n"
         + "public class %s {\n"
-        + "  public static void inject(%s target, %s source) {\n"
+        + "  public static void inject(Finder finder, %s target, Object source) {\n"
         + "%s"
         + "  }\n"
         + "}\n";
