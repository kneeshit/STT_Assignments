diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
index 4afc19f..ebdf61d 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
@@ -24,22 +24,31 @@ public class BindViewTest {
             "}"
         ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -50,7 +59,6 @@ public class BindViewTest {
         + "    target.thing = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -58,7 +66,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void bindingViewFinalClass() {
@@ -73,22 +81,31 @@ public class BindViewTest {
             "}"
         ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public final class Test$$ViewBinder implements ViewBinder<Test> {\n"
+        + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new InnerUnbinder(target, finder, source);\n"
+        + "    return new Test_ViewBinding(target, finder, source);\n"
         + "  }\n"
-        + "  private static final class InnerUnbinder implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding implements Unbinder {\n"
         + "  private Test target;\n"
-        + "    InnerUnbinder(Test target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(Test target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -99,7 +116,6 @@ public class BindViewTest {
         + "    target.thing = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -107,7 +123,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void bindingViewFinalClassWithBaseClass() {
@@ -131,22 +147,31 @@ public class BindViewTest {
             "}"
         ));
 
-    JavaFileObject expectedBaseSource = JavaFileObjects.forSourceString("test/Base$$ViewBinder", ""
+    JavaFileObject binderBaseSource = JavaFileObjects.forSourceString("test/Base_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Base$$ViewBinder<T extends Base> implements ViewBinder<T> {\n"
+        + "public class Base_ViewBinder<T extends Base> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Base_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Base> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingBaseSource = JavaFileObjects.forSourceString("test/Base_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Base_ViewBinding<T extends Base> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Base_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -157,23 +182,30 @@ public class BindViewTest {
         + "    target.thing = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedTestSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderTestSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public final class Test$$ViewBinder extends Base$$ViewBinder<Test> {\n"
+        + "public final class Test_ViewBinder extends Base_ViewBinder<Test> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new InnerUnbinder(target, finder, source);\n"
+        + "    return new Test_ViewBinding(target, finder, source);\n"
         + "  }\n"
-        + "  private static final class InnerUnbinder extends Base$$ViewBinder.InnerUnbinder<Test> {\n"
-        + "    InnerUnbinder(Test target, Finder finder, Object source) {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingTestSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding extends Base_ViewBinding<Test> {\n"
+        + "  public Test_ViewBinding(Test target, Finder finder, Object source) {\n"
         + "    super(target, finder, source);\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -183,7 +215,6 @@ public class BindViewTest {
         + "    super.unbind();\n"
         + "    target.thing = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -191,7 +222,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedBaseSource, expectedTestSource);
+        .generatesSources(binderBaseSource, bindingBaseSource, binderTestSource, bindingTestSource);
   }
 
   @Test public void bindingViewInnerClass() {
@@ -208,22 +239,31 @@ public class BindViewTest {
             "}"
         ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Outer$Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Outer$Test$$ViewBinder<T extends Outer.Test> implements ViewBinder<T> {\n"
+        + "public class Outer$Test_ViewBinder<T extends Outer.Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Outer$Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Outer.Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Outer$Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Outer$Test_ViewBinding<T extends Outer.Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Outer$Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -234,7 +274,6 @@ public class BindViewTest {
         + "    target.thing = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -242,7 +281,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void bindingViewUppercasePackageName() {
@@ -257,22 +296,31 @@ public class BindViewTest {
             "}"
         ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package com.Example;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package com.Example;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -283,7 +331,6 @@ public class BindViewTest {
         + "    target.thing = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -291,7 +338,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void bindingInterface() throws Exception {
@@ -306,22 +353,31 @@ public class BindViewTest {
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = finder.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class);\n"
         + "  }\n"
@@ -332,7 +388,6 @@ public class BindViewTest {
         + "    target.thing = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -340,7 +395,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void genericType() {
@@ -355,23 +410,32 @@ public class BindViewTest {
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.widget.TextView;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.widget.TextView;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = finder.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class);\n"
         + "  }\n"
@@ -382,7 +446,6 @@ public class BindViewTest {
         + "    target.thing = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -390,7 +453,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void oneFindPerId() {
@@ -406,25 +469,34 @@ public class BindViewTest {
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
@@ -446,7 +518,6 @@ public class BindViewTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -454,7 +525,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void fieldVisibility() {
@@ -487,22 +558,31 @@ public class BindViewTest {
         "}"
     ));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.view = finder.findOptionalView(source, 1);\n"
         + "  }\n"
@@ -513,7 +593,6 @@ public class BindViewTest {
         + "    target.view = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -521,7 +600,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void superclass() {
@@ -540,22 +619,31 @@ public class BindViewTest {
         "}"
     ));
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
         + "  }\n"
@@ -566,23 +654,30 @@ public class BindViewTest {
         + "    target.view = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder", ""
+    JavaFileObject binder2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
+        + "public class TestOne_ViewBinder<T extends TestOne> extends Test_ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new TestOne_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "  public TestOne_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    super(target, finder, source);\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -592,7 +687,6 @@ public class BindViewTest {
         + "    super.unbind();\n"
         + "    target.thing = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -600,7 +694,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource1, expectedSource2);
+        .generatesSources(binder1Source, binding1Source, binder2Source, binding2Source);
   }
 
   @Test public void genericSuperclass() {
@@ -619,22 +713,31 @@ public class BindViewTest {
         "}"
     ));
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    target.view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
         + "  }\n"
@@ -645,23 +748,30 @@ public class BindViewTest {
         + "    target.view = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder", ""
+    JavaFileObject binder2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinder", ""
         + "package test;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
+        + "public class TestOne_ViewBinder<T extends TestOne> extends Test_ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new TestOne_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "  public TestOne_ViewBinding(T target, Finder finder, Object source) {\n"
         + "    super(target, finder, source);\n"
         + "    target.thing = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
@@ -671,7 +781,6 @@ public class BindViewTest {
         + "    super.unbind();\n"
         + "    target.thing = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -679,7 +788,7 @@ public class BindViewTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource1, expectedSource2);
+        .generatesSources(binder1Source, binding1Source, binder2Source, binding2Source);
   }
 
   @Test public void failsInJavaPackage() {
