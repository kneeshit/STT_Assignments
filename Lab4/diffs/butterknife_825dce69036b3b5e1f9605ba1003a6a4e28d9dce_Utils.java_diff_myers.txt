diff --git a/butterknife/src/main/java/butterknife/internal/Utils.java b/butterknife/src/main/java/butterknife/internal/Utils.java
index 68927f8..de25596 100644
--- a/butterknife/src/main/java/butterknife/internal/Utils.java
+++ b/butterknife/src/main/java/butterknife/internal/Utils.java
@@ -4,6 +4,9 @@ import android.content.res.ColorStateList;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.support.annotation.AttrRes;
+import android.support.annotation.ColorRes;
+import android.support.annotation.DrawableRes;
 import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.TypedValue;
 import java.util.Arrays;
@@ -22,32 +25,32 @@ public final class Utils {
     }
   }
 
-  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme, int id,
-      int tintAttrId) {
+  public static Drawable getTintedDrawable(Resources res, Resources.Theme theme,
+      @DrawableRes int id, @AttrRes int tintAttrId) {
     if (HAS_SUPPORT_V4) {
-      return SupportV4.getTintedDrawable(res, id, tintAttrId, theme);
+      return SupportV4.getTintedDrawable(res, theme, id, tintAttrId);
     }
     throw new RuntimeException(
         "Android support-v4 library is required for @BindDrawable with tint.");
   }
 
-  public static int getColor(Resources res, Resources.Theme theme, int id) {
+  public static int getColor(Resources res, Resources.Theme theme, @ColorRes int id) {
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
       return res.getColor(id);
     }
     return res.getColor(id, theme);
   }
 
-  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme, int id) {
+  public static ColorStateList getColorStateList(Resources res, Resources.Theme theme,
+      @ColorRes int id) {
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
       return res.getColorStateList(id);
     }
     return res.getColorStateList(id, theme);
   }
 
-  public static Drawable getDrawable(Resources res, Resources.Theme theme, int id) {
+  public static Drawable getDrawable(Resources res, Resources.Theme theme, @DrawableRes int id) {
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
-      //noinspection deprecation
       return res.getDrawable(id);
     }
     return res.getDrawable(id, theme);
@@ -77,8 +80,8 @@ public final class Utils {
   static class SupportV4 {
     private static final TypedValue OUT_VALUE = new TypedValue();
 
-    static Drawable getTintedDrawable(Resources res, int drawableId, int tintAttributeId,
-        Resources.Theme theme) {
+    static Drawable getTintedDrawable(Resources res, Resources.Theme theme, @DrawableRes int id,
+        @AttrRes int tintAttributeId) {
       boolean attributeFound = theme.resolveAttribute(tintAttributeId, OUT_VALUE, true);
       if (!attributeFound) {
         throw new Resources.NotFoundException("Required tint color attribute with name "
@@ -88,9 +91,9 @@ public final class Utils {
             + " was not found.");
       }
 
-      Drawable drawable = Utils.getDrawable(res, theme, drawableId);
+      Drawable drawable = getDrawable(res, theme, id);
       drawable = DrawableCompat.wrap(drawable.mutate());
-      int color = Utils.getColor(res, theme, OUT_VALUE.resourceId);
+      int color = getColor(res, theme, OUT_VALUE.resourceId);
       DrawableCompat.setTint(drawable, color);
       return drawable;
     }
