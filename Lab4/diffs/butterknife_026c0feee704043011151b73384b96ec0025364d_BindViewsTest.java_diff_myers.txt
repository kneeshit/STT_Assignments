diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
index 627fde0..08992a1 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
@@ -53,21 +53,18 @@ public class BindViewsTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      target.thing = Utils.arrayOf(\n"
         + "          finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -110,21 +107,18 @@ public class BindViewsTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      target.thing = Utils.arrayOf(\n"
         + "          finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -168,21 +162,18 @@ public class BindViewsTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      target.thing = Utils.arrayOf(\n"
         + "          finder.<TextView>findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "          finder.<TextView>findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "          finder.<TextView>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -226,21 +217,18 @@ public class BindViewsTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      target.thing = Utils.listOf(\n"
         + "          finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -284,21 +272,18 @@ public class BindViewsTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      target.thing = Utils.listOf(\n"
         + "          finder.<Test.TestInterface>findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "          finder.<Test.TestInterface>findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "          finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -342,21 +327,18 @@ public class BindViewsTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      target.thing = Utils.listOf(\n"
         + "          finder.<View>findRequiredView(source, 1, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 2, \"field 'thing'\"), \n"
         + "          finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -401,21 +383,18 @@ public class BindViewsTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      target.thing = Utils.listOf(\n"
         + "          finder.<View>findOptionalView(source, 1, \"field 'thing'\"), \n"
         + "          finder.<View>findOptionalView(source, 2, \"field 'thing'\"), \n"
         + "          finder.<View>findOptionalView(source, 3, \"field 'thing'\"));\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
