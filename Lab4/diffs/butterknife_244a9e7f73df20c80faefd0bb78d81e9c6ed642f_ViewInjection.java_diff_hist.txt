diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjection.java b/butterknife/src/main/java/butterknife/internal/ViewInjection.java
index eddc864..b83c4c3 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjection.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewInjection.java
@@ -2,7 +2,6 @@ package butterknife.internal;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -11,9 +10,9 @@ import java.util.Set;
 
 final class ViewInjection {
   private final int id;
-  private final Set<FieldBinding> fieldBindings = new LinkedHashSet<FieldBinding>();
-  private final Map<ListenerClass, MethodBinding> methodBindings =
-      new LinkedHashMap<ListenerClass, MethodBinding>();
+  private final Set<ViewBinding> viewBindings = new LinkedHashSet<ViewBinding>();
+  private final Map<ListenerClass, Map<ListenerMethod, ListenerBinding>> listenerBindings =
+      new LinkedHashMap<ListenerClass, Map<ListenerMethod, ListenerBinding>>();
 
   ViewInjection(int id) {
     this.id = id;
@@ -23,48 +22,58 @@ final class ViewInjection {
     return id;
   }
 
-  public Collection<FieldBinding> getFieldBindings() {
-    return fieldBindings;
+  public Collection<ViewBinding> getViewBindings() {
+    return viewBindings;
   }
 
-  public Map<ListenerClass, MethodBinding> getMethodBindings() {
-    return Collections.unmodifiableMap(
-        new LinkedHashMap<ListenerClass, MethodBinding>(methodBindings));
+  public Map<ListenerClass, Map<ListenerMethod, ListenerBinding>> getListenerBindings() {
+    return listenerBindings;
   }
 
-  public boolean hasMethodBinding(ListenerClass listenerClass) {
-    return methodBindings.containsKey(listenerClass);
+  public boolean hasListenerBinding(ListenerClass listener, ListenerMethod method) {
+    Map<ListenerMethod, ListenerBinding> methods = listenerBindings.get(listener);
+    return methods != null && methods.containsKey(method);
+  }
+
+  public void addListenerBinding(ListenerClass listener, ListenerMethod method,
+      ListenerBinding binding) {
+    Map<ListenerMethod, ListenerBinding> methods = listenerBindings.get(listener);
+    if (methods == null) {
+      methods = new LinkedHashMap<ListenerMethod, ListenerBinding>();
+      listenerBindings.put(listener, methods);
+    }
+    ListenerBinding existing = methods.get(method);
+    if (existing != null) {
+      throw new IllegalStateException("View "
+          + id
+          + " already has listener binding for "
+          + listener.type()
+          + "."
+          + method.name()
+          + " on "
+          + existing.getDescription());
+    }
+    methods.put(method, binding);
+  }
+
+  public void addViewBinding(ViewBinding viewBinding) {
+    viewBindings.add(viewBinding);
   }
 
   public List<Binding> getRequiredBindings() {
     List<Binding> requiredBindings = new ArrayList<Binding>();
-    for (FieldBinding fieldBinding : fieldBindings) {
-      if (fieldBinding.isRequired()) {
-        requiredBindings.add(fieldBinding);
+    for (ViewBinding viewBinding : viewBindings) {
+      if (viewBinding.isRequired()) {
+        requiredBindings.add(viewBinding);
       }
     }
-    for (MethodBinding methodBinding : methodBindings.values()) {
-      if (methodBinding.isRequired()) {
-        requiredBindings.add(methodBinding);
+    for (Map<ListenerMethod, ListenerBinding> methodBinding : listenerBindings.values()) {
+      for (ListenerBinding binding : methodBinding.values()) {
+        if (binding.isRequired()) {
+          requiredBindings.add(binding);
+        }
       }
     }
     return requiredBindings;
   }
-
-  public void addMethodBinding(ListenerClass listener, MethodBinding methodBinding) {
-    MethodBinding existingBinding = methodBindings.get(listener);
-    if (existingBinding != null) {
-      throw new IllegalStateException("View "
-          + id
-          + " already has method binding for "
-          + listener.type()
-          + " on "
-          + existingBinding.getName());
-    }
-    methodBindings.put(listener, methodBinding);
-  }
-
-  public void addFieldBinding(FieldBinding fieldBinding) {
-    fieldBindings.add(fieldBinding);
-  }
 }
