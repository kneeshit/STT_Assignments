diff --git a/openai/src/serve/ui.rs b/openai/src/serve/ui.rs
index 0997b50..10af517 100644
--- a/openai/src/serve/ui.rs
+++ b/openai/src/serve/ui.rs
@@ -1,4 +1,5 @@
 use std::collections::HashMap;
+use std::sync::Once;
 
 use actix_web::cookie;
 use actix_web::{
@@ -23,7 +24,7 @@ include!(concat!(env!("OUT_DIR"), "/generated.rs"));
 
 const DEFAULT_INDEX: &str = "/";
 const SESSION_ID: &str = "opengpt_session";
-const BUILD_ID: &str = "WLHd8p-1ysAW_5sZZPJIy";
+const BUILD_ID: &str = "XmKrBoPpskgF_4RiIX1jm";
 const TEMP_404: &str = "404.htm";
 const TEMP_AUTH: &str = "auth.htm";
 const TEMP_CHAT: &str = "chat.htm";
@@ -31,7 +32,11 @@ const TEMP_DETAIL: &str = "detail.htm";
 const TEMP_LOGIN: &str = "login.htm";
 const TEMP_SHARE: &str = "share.htm";
 
-static mut STATIC_FILES: Option<HashMap<&'static str, static_files::Resource>> = None;
+static INIT: Once = Once::new();
+
+pub(super) static mut STATIC_FILES: Option<HashMap<&'static str, static_files::Resource>> = None;
+pub(super) static mut TEMPLATE: Option<tera::Tera> = None;
+pub(super) static mut TEMPLATE_DATA: Option<TemplateData> = None;
 
 #[derive(Serialize, Deserialize)]
 struct Session {
@@ -116,11 +121,12 @@ pub fn config(cfg: &mut web::ServiceConfig) {
     ])
     .expect("The static template failed to load");
 
-    unsafe { STATIC_FILES = Some(generate()) }
+    INIT.call_once(|| unsafe {
+        STATIC_FILES = Some(generate());
+        TEMPLATE = Some(tera);
+    });
 
-    cfg.app_data(web::Data::new(tera))
-        .app_data(web::Data::new(generate()))
-        .route("/auth", web::get().to(get_auth))
+    cfg.route("/auth", web::get().to(get_auth))
         .route("/auth/login", web::get().to(get_login))
         .route("/auth/login", web::post().to(post_login))
         .route("/auth/login/token", web::post().to(post_login_token))
@@ -170,41 +176,30 @@ pub fn config(cfg: &mut web::ServiceConfig) {
         .default_service(web::route().to(get_error_404));
 }
 
-async fn get_auth(
-    tmpl: web::Data<tera::Tera>,
-    data: web::Data<TemplateData>,
-) -> Result<HttpResponse> {
+async fn get_auth() -> Result<HttpResponse> {
     let mut ctx = tera::Context::new();
-    settings_template_data(&mut ctx, &data);
-    render_template(tmpl, TEMP_AUTH, &ctx)
+    settings_template_data(&mut ctx);
+    render_template(TEMP_AUTH, &ctx)
 }
 
-async fn get_login(
-    tmpl: web::Data<tera::Tera>,
-    data: web::Data<TemplateData>,
-) -> Result<HttpResponse> {
+async fn get_login() -> Result<HttpResponse> {
     let mut ctx = tera::Context::new();
     ctx.insert("error", "");
     ctx.insert("username", "");
-    settings_template_data(&mut ctx, &data);
-    render_template(tmpl, TEMP_LOGIN, &ctx)
+    settings_template_data(&mut ctx);
+    render_template(TEMP_LOGIN, &ctx)
 }
 
-async fn post_login(
-    tmpl: web::Data<tera::Tera>,
-    data: web::Data<TemplateData>,
-    req: HttpRequest,
-    account: web::Form<AuthAccount>,
-) -> Result<HttpResponse> {
+async fn post_login(req: HttpRequest, account: web::Form<AuthAccount>) -> Result<HttpResponse> {
     let account = account.into_inner();
-    if let Some(err) = cf_captcha_check(&req, &data, account.cf_turnstile_response.as_deref())
+    if let Some(err) = cf_captcha_check(&req, account.cf_turnstile_response.as_deref())
         .await
         .err()
     {
         let mut ctx = tera::Context::new();
         ctx.insert("username", &account.username);
         ctx.insert("error", &err.to_string());
-        return render_template(tmpl, TEMP_LOGIN, &ctx);
+        return render_template(TEMP_LOGIN, &ctx);
     }
     match super::auth_client().do_access_token(&account).await {
         Ok(access_token) => {
@@ -228,7 +223,7 @@ async fn post_login(
             let mut ctx = tera::Context::new();
             ctx.insert("username", &account.username);
             ctx.insert("error", &e.to_string());
-            render_template(tmpl, TEMP_LOGIN, &ctx)
+            render_template(TEMP_LOGIN, &ctx)
         }
     }
 }
@@ -330,8 +325,6 @@ async fn get_session(req: HttpRequest) -> Result<HttpResponse> {
 }
 
 async fn get_chat(
-    tmpl: web::Data<tera::Tera>,
-    data: web::Data<TemplateData>,
     req: HttpRequest,
     conversation_id: Option<web::Path<String>>,
     mut query: web::Query<HashMap<String, String>>,
@@ -381,8 +374,8 @@ async fn get_chat(
                     &serde_json::to_string(&props)
                         .map_err(|e| error::ErrorInternalServerError(e.to_string()))?,
                 );
-                settings_template_data(&mut ctx, &data);
-                return render_template(tmpl, template_name, &ctx);
+                settings_template_data(&mut ctx);
+                return render_template(template_name, &ctx);
             }
             Err(_) => redirect_login(),
         };
@@ -429,19 +422,15 @@ async fn get_chat_info(req: HttpRequest) -> Result<HttpResponse> {
     redirect_login()
 }
 
-async fn get_share_chat(
-    tmpl: web::Data<tera::Tera>,
-    data: web::Data<TemplateData>,
-    req: HttpRequest,
-    share_id: web::Path<String>,
-) -> Result<HttpResponse> {
+async fn get_share_chat(req: HttpRequest, share_id: web::Path<String>) -> Result<HttpResponse> {
     let share_id = share_id.into_inner();
     if let Some(cookie) = req.cookie(SESSION_ID) {
         return match extract_session(cookie.value()) {
-            Ok(_) => {
+            Ok(session) => {
+                let url = get_url();
                 let resp = super::api_client()
-                    .get(format!("{URL_CHATGPT_API}/backend-api/share/{share_id}"))
-                    .bearer_auth(cookie.value())
+                    .get(format!("{url}/backend-api/share/{share_id}"))
+                    .bearer_auth(session.access_token)
                     .send()
                     .await
                     .map_err(|e| error::ErrorInternalServerError(e.to_string()))?;
@@ -487,8 +476,8 @@ async fn get_share_chat(
                         );
                         let mut ctx = tera::Context::new();
                         ctx.insert("props", &props.to_string());
-                        settings_template_data(&mut ctx, &data);
-                        render_template(tmpl, TEMP_SHARE, &ctx)
+                        settings_template_data(&mut ctx);
+                        render_template(TEMP_SHARE, &ctx)
                     }
                     Err(_) => {
                         let props = serde_json::json!({
@@ -506,8 +495,8 @@ async fn get_share_chat(
 
                         let mut ctx = tera::Context::new();
                         ctx.insert("props", &props.to_string());
-                        settings_template_data(&mut ctx, &data);
-                        render_template(tmpl, TEMP_404, &ctx)
+                        settings_template_data(&mut ctx);
+                        render_template(TEMP_404, &ctx)
                     }
                 }
             }
@@ -529,10 +518,11 @@ async fn get_share_chat_info(
 ) -> Result<HttpResponse> {
     let share_id = share_id.into_inner();
     if let Some(cookie) = req.cookie(SESSION_ID) {
-        if extract_session(cookie.value()).is_ok() {
+        if let Ok(session) = extract_session(cookie.value()) {
+            let url = get_url();
             let resp = super::api_client()
-                .get(format!("{URL_CHATGPT_API}/backend-api/share/{share_id}"))
-                .bearer_auth(cookie.value())
+                .get(format!("{url}/backend-api/share/{share_id}"))
+                .bearer_auth(session.access_token)
                 .send()
                 .await
                 .map_err(|e| error::ErrorInternalServerError(e.to_string()))?;
@@ -595,9 +585,10 @@ async fn get_share_chat_continue_info(
     if let Some(cookie) = req.cookie(SESSION_ID) {
         return match extract_session(cookie.value()) {
             Ok(session) => {
+                let url = get_url();
                 let resp = super::api_client()
-                .get(format!("{URL_CHATGPT_API}/backend-api/share/{share_id}"))
-                .bearer_auth(cookie.value())
+                .get(format!("{url}/backend-api/share/{share_id}"))
+                .bearer_auth(session.access_token)
                 .send()
                 .await
                 .map_err(|e| error::ErrorInternalServerError(e.to_string()))?;
@@ -686,7 +677,7 @@ async fn get_image(params: Option<web::Query<ImageQuery>>) -> Result<HttpRespons
     Ok(super::response_convert(resp))
 }
 
-async fn get_error_404(tmpl: web::Data<tera::Tera>) -> Result<HttpResponse> {
+async fn get_error_404() -> Result<HttpResponse> {
     let mut ctx = tera::Context::new();
     let props = json!(
         {
@@ -707,7 +698,7 @@ async fn get_error_404(tmpl: web::Data<tera::Tera>) -> Result<HttpResponse> {
         &serde_json::to_string(&props)
             .map_err(|e| error::ErrorInternalServerError(e.to_string()))?,
     );
-    render_template(tmpl, TEMP_404, &ctx)
+    render_template(TEMP_404, &ctx)
 }
 
 fn extract_session(cookie_value: &str) -> Result<Session> {
@@ -725,20 +716,21 @@ fn redirect_login() -> Result<HttpResponse> {
         .finish())
 }
 
-fn render_template(
-    tmpl: web::Data<tera::Tera>,
-    name: &str,
-    context: &tera::Context,
-) -> Result<HttpResponse> {
-    let tm = tmpl
+fn render_template(name: &str, context: &tera::Context) -> Result<HttpResponse> {
+    let tm = unsafe {
+        TEMPLATE
+            .as_ref()
+            .unwrap()
             .render(name, context)
-        .map_err(|e| error::ErrorInternalServerError(e.to_string()))?;
+            .map_err(|e| error::ErrorInternalServerError(e.to_string()))
+    }?;
     Ok(HttpResponse::Ok()
         .content_type(header::ContentType::html())
         .body(tm))
 }
 
-fn settings_template_data(ctx: &mut tera::Context, data: &web::Data<TemplateData>) {
+fn settings_template_data(ctx: &mut tera::Context) {
+    let data = unsafe { TEMPLATE_DATA.as_ref().unwrap() };
     if let Some(site_key) = &data.cf_site_key {
         ctx.insert("site_key", site_key);
     }
@@ -752,11 +744,8 @@ fn check_token(token: &str) -> Result<()> {
     Ok(())
 }
 
-async fn cf_captcha_check(
-    req: &HttpRequest,
-    data: &web::Data<TemplateData>,
-    cf_response: Option<&str>,
-) -> Result<()> {
+async fn cf_captcha_check(req: &HttpRequest, cf_response: Option<&str>) -> Result<()> {
+    let data = unsafe { TEMPLATE_DATA.as_ref().unwrap() };
     if data.cf_site_key.is_some() && data.cf_secret_key.is_some() {
         return match cf_response {
             Some(cf_response) => {
@@ -798,6 +787,13 @@ async fn get_static_resource(path: web::Path<String>) -> impl Responder {
     }
 }
 
+fn get_url() -> &'static str {
+    let data = unsafe { TEMPLATE_DATA.as_ref().unwrap() };
+    match data.api_prefix.as_ref() {
+        Some(ref api_prefix) => api_prefix,
+        None => URL_CHATGPT_API,
+    }
+}
 #[allow(dead_code)]
 #[derive(serde::Deserialize)]
 struct ImageQuery {
