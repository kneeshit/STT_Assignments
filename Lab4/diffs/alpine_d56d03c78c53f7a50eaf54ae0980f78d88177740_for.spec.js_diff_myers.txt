diff --git a/test/for.spec.js b/test/for.spec.js
index 96ac9752..eb2f9579 100644
--- a/test/for.spec.js
+++ b/test/for.spec.js
@@ -326,9 +326,7 @@ test('nested x-for access outer loop variable', async () => {
             <template x-for="foo in foos">
                 <h1>
                     <template x-for="bar in foo.bars">
-                        <div>
                         <h2 x-text="foo.name+': '+bar"></h2>
-                        </div>
                     </template>
                 </h1>
             </template>
@@ -345,3 +343,76 @@ test('nested x-for access outer loop variable', async () => {
     expect(document.querySelectorAll('h2')[2].innerText).toEqual('baz: bab')
     expect(document.querySelectorAll('h2')[3].innerText).toEqual('baz: lab')
 })
+
+test('nested x-for event listeners', async () => {
+    document._alerts = []
+
+    document.body.innerHTML = `
+        <div x-data="{ foos: [
+            {name: 'foo', bars: [{name: 'bob', count: 0}, {name: 'lob', count: 0}]},
+            {name: 'baz', bars: [{name: 'bab', count: 0}, {name: 'lab', count: 0}]}
+        ], fnText: function(foo, bar) { return foo.name+': '+bar.name+' = '+bar.count; } }">
+
+            <template x-for="foo in foos">
+                <h1>
+                    <template x-for="bar in foo.bars">
+                        <h2 x-text="fnText(foo, bar)"
+                            x-on:click="bar.count += 1; document._alerts.push(fnText(foo, bar))"
+                        ></h2>
+                    </template>
+                </h1>
+            </template>
+        </div>
+    `
+
+    Alpine.start()
+
+    await wait(() => { expect(document.querySelectorAll('h1').length).toEqual(2) })
+    await wait(() => { expect(document.querySelectorAll('h2').length).toEqual(4) })
+
+    expect(document.querySelectorAll('h2')[0].innerText).toEqual('foo: bob = 0')
+    expect(document.querySelectorAll('h2')[1].innerText).toEqual('foo: lob = 0')
+    expect(document.querySelectorAll('h2')[2].innerText).toEqual('baz: bab = 0')
+    expect(document.querySelectorAll('h2')[3].innerText).toEqual('baz: lab = 0')
+
+    expect(document._alerts.length).toEqual(0)
+
+    document.querySelectorAll('h2')[0].click()
+
+    await wait(() => {
+        expect(document.querySelectorAll('h2')[0].innerText).toEqual('foo: bob = 1')
+        expect(document.querySelectorAll('h2')[1].innerText).toEqual('foo: lob = 0')
+        expect(document.querySelectorAll('h2')[2].innerText).toEqual('baz: bab = 0')
+        expect(document.querySelectorAll('h2')[3].innerText).toEqual('baz: lab = 0')
+
+        expect(document._alerts.length).toEqual(1)
+        expect(document._alerts[0]).toEqual('foo: bob = 1')
+    })
+
+    document.querySelectorAll('h2')[2].click()
+
+    await wait(() => {
+        expect(document.querySelectorAll('h2')[0].innerText).toEqual('foo: bob = 1')
+        expect(document.querySelectorAll('h2')[1].innerText).toEqual('foo: lob = 0')
+        expect(document.querySelectorAll('h2')[2].innerText).toEqual('baz: bab = 1')
+        expect(document.querySelectorAll('h2')[3].innerText).toEqual('baz: lab = 0')
+
+        expect(document._alerts.length).toEqual(2)
+        expect(document._alerts[0]).toEqual('foo: bob = 1')
+        expect(document._alerts[1]).toEqual('baz: bab = 1')
+    })
+
+    document.querySelectorAll('h2')[0].click()
+
+    await wait(() => {
+        expect(document.querySelectorAll('h2')[0].innerText).toEqual('foo: bob = 2')
+        expect(document.querySelectorAll('h2')[1].innerText).toEqual('foo: lob = 0')
+        expect(document.querySelectorAll('h2')[2].innerText).toEqual('baz: bab = 1')
+        expect(document.querySelectorAll('h2')[3].innerText).toEqual('baz: lab = 0')
+
+        expect(document._alerts.length).toEqual(3)
+        expect(document._alerts[0]).toEqual('foo: bob = 1')
+        expect(document._alerts[1]).toEqual('baz: bab = 1')
+        expect(document._alerts[2]).toEqual('foo: bob = 2')
+    })
+})
