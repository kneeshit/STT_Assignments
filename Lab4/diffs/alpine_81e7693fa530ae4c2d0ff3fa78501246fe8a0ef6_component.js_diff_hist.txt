diff --git a/src/component.js b/src/component.js
index 57bc9cb5..1a5af022 100644
--- a/src/component.js
+++ b/src/component.js
@@ -73,15 +73,11 @@ export default class Component {
 
         const proxyHandler = {
             set(obj, property, value) {
-                let setWasSuccessful = false
-
                 // If value is an Alpine proxy (i.e. an element returned when sorting a list of objects),
-                // we want to set the original element to avoid a matryoshka effect (nested proxies). :)
-                if (value['$isProxy']) {
-                    setWasSuccessful = Reflect.set(obj, property, value['$originalTarget'])
-                } else {
-                    setWasSuccessful = Reflect.set(obj, property, value)
-                }
+                // we want to set the original element to avoid a matryoshka effect (nested proxies).
+                const setWasSuccessful = value['$isAlpineProxy']
+                    ? Reflect.set(obj, property, value['$originalTarget'])
+                    : Reflect.set(obj, property, value)
 
                 // Don't react to data changes for cases like the `x-created` hook.
                 if (self.pauseReactivity) return setWasSuccessful
@@ -98,17 +94,15 @@ export default class Component {
                 return setWasSuccessful
             },
             get(target, key) {
-                if (key === "$isProxy") {
-                    return true;
-                }
+                // Provide a way to determine if this object is an Alpine proxy or not.
+                if (key === "$isAlpineProxy") return true
 
-                if (key === "$originalTarget") {
-                    return target;
-                }
+                // Provide a hook to access the underlying "proxied" data directly.
+                if (key === "$originalTarget") return target
 
                 // If the property we are trying to get is a proxy, just return it.
                 // Like in the case of $refs
-                if (target[key] && target[key].isRefsProxy) return target[key]
+                if (target[key] && target[key].$isRefsProxy) return target[key]
 
                 // If property is a DOM node, just return it. (like in the case of this.$el)
                 if (target[key] && target[key] instanceof Node) return target[key]
@@ -333,7 +327,7 @@ export default class Component {
         // For this reason, I'm using an "on-demand" proxy to fake a "$refs" object.
         return new Proxy({}, {
             get(object, property) {
-                if (property === 'isRefsProxy') return true
+                if (property === '$isRefsProxy') return true
 
                 var ref
 
