diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index d7be2d2..76b5e91 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -26,6 +26,7 @@ import butterknife.internal.ListenerClass;
 import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
+import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import java.io.IOException;
@@ -1112,13 +1113,14 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
       if (targetType instanceof ParameterizedTypeName) {
         targetType = ((ParameterizedTypeName) targetType).rawType;
       }
-      String targetPackage = getPackageName(enclosingElement);
-      boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
 
-      String className = getClassName(enclosingElement, targetPackage) + BINDING_CLASS_SUFFIX;
-      String classFqcn = getFqcn(enclosingElement) + BINDING_CLASS_SUFFIX;
+      String packageName = getPackageName(enclosingElement);
+      ClassName classFqcn = ClassName.get(packageName,
+          getClassName(enclosingElement, packageName) + BINDING_CLASS_SUFFIX);
+
+      boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
 
-      bindingClass = new BindingClass(targetPackage, className, isFinal, targetType, classFqcn);
+      bindingClass = new BindingClass(targetType, classFqcn, isFinal);
       targetClassMap.put(enclosingElement, bindingClass);
     }
     return bindingClass;
@@ -1144,12 +1146,6 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     }
   }
 
-  /** Get full-qualified class name of a {@linkplain TypeElement typeElement} */
-  private String getFqcn(TypeElement typeElement) {
-    String packageName = getPackageName(typeElement);
-    return packageName + "." + getClassName(typeElement, packageName);
-  }
-
   @Override public SourceVersion getSupportedSourceVersion() {
     return SourceVersion.latestSupported();
   }
