diff --git a/openai/src/model.rs b/openai/src/model.rs
index 47080d2..2985f34 100644
--- a/openai/src/model.rs
+++ b/openai/src/model.rs
@@ -1,5 +1,4 @@
 use serde::{Deserialize, Serialize};
-use serde_json::Value;
 
 use base64::{engine::general_purpose, Engine};
 
@@ -79,9 +78,8 @@ impl TryFrom<crate::auth::AccessToken> for AuthenticateToken {
 
     fn try_from(value: crate::auth::AccessToken) -> Result<Self, Self::Error> {
         let profile = Profile::try_from(value.id_token)?;
-        let expires = (chrono::Utc::now() + chrono::Duration::seconds(value.expires_in)
-            - chrono::Duration::minutes(5))
-        .timestamp();
+        let expires =
+            (chrono::Utc::now() + chrono::Duration::seconds(value.expires_in)).timestamp();
         Ok(Self {
             access_token: value.access_token,
             refresh_token: value.refresh_token,
@@ -96,9 +94,8 @@ impl TryFrom<crate::auth::RefreshToken> for AuthenticateToken {
 
     fn try_from(value: crate::auth::RefreshToken) -> Result<Self, Self::Error> {
         let profile = Profile::try_from(value.id_token)?;
-        let expires = (chrono::Utc::now() + chrono::Duration::seconds(value.expires_in)
-            - chrono::Duration::minutes(5))
-        .timestamp();
+        let expires =
+            (chrono::Utc::now() + chrono::Duration::seconds(value.expires_in)).timestamp();
         Ok(Self {
             access_token: value.access_token,
             refresh_token: value.refresh_token,
@@ -107,97 +104,3 @@ impl TryFrom<crate::auth::RefreshToken> for AuthenticateToken {
         })
     }
 }
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct AuthenticateSession {
-    pub object: String,
-    pub user: User,
-    pub invites: Vec<Value>,
-}
-
-impl AuthenticateSession {
-    pub fn sensitive_id(&self) -> &str {
-        &self.user.session.sensitive_id
-    }
-}
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct User {
-    pub object: String,
-    pub id: String,
-    pub email: String,
-    pub name: String,
-    pub picture: String,
-    pub created: i64,
-    pub groups: Vec<Value>,
-    pub session: Session,
-    pub orgs: Orgs,
-    #[serde(rename = "intercom_hash")]
-    pub intercom_hash: String,
-    pub amr: Vec<Value>,
-}
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct Session {
-    #[serde(rename = "sensitive_id")]
-    pub sensitive_id: String,
-    pub object: String,
-    pub name: Value,
-    pub created: i64,
-    #[serde(rename = "last_use")]
-    pub last_use: i64,
-    pub publishable: bool,
-}
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct Orgs {
-    pub object: String,
-    pub data: Vec<Daum>,
-}
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct Daum {
-    pub object: String,
-    pub id: String,
-    pub created: i64,
-    pub title: String,
-    pub name: String,
-    pub description: String,
-    pub personal: bool,
-    #[serde(rename = "is_default")]
-    pub is_default: bool,
-    pub role: String,
-    pub groups: Vec<Value>,
-}
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct AuthenticateApiKey {
-    pub result: String,
-    pub key: Option<Key>,
-}
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct AuthenticateApiKeyList {
-    pub object: String,
-    pub data: Vec<Key>,
-}
-
-#[derive(Debug, Deserialize)]
-#[serde(rename_all = "camelCase")]
-pub struct Key {
-    #[serde(rename = "sensitive_id")]
-    pub sensitive_id: String,
-    pub object: String,
-    pub name: String,
-    pub created: i64,
-    #[serde(rename = "last_use")]
-    pub last_use: Value,
-    pub publishable: bool,
-}
