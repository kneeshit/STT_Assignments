diff --git a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
index e785760..3b23f75 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
@@ -23,25 +23,34 @@ public class OnClickTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -60,7 +69,6 @@ public class OnClickTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -68,7 +76,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void onClickBindingFinalType() {
@@ -81,25 +89,34 @@ public class OnClickTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public final class Test$$ViewBinder implements ViewBinder<Test> {\n"
+        + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, final Test target, Object source) {\n"
-        + "    return new InnerUnbinder(target, finder, source);\n"
+        + "    return new Test_ViewBinding(target, finder, source);\n"
         + "  }\n"
-        + "  private static final class InnerUnbinder implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public final class Test_ViewBinding implements Unbinder {\n"
         + "  private Test target;\n"
         + "  private View view1;\n"
-        + "    InnerUnbinder(final Test target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final Test target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
@@ -118,7 +135,6 @@ public class OnClickTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -126,7 +142,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void onClickMultipleBindings() {
@@ -142,26 +158,35 @@ public class OnClickTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
         + "  private View view2;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");\n"
@@ -192,7 +217,6 @@ public class OnClickTest {
         + "    view2 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -200,7 +224,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void findOnlyCalledOnce() {
@@ -216,25 +240,34 @@ public class OnClickTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
@@ -256,7 +289,6 @@ public class OnClickTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -264,7 +296,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void methodVisibility() {
@@ -303,7 +335,22 @@ public class OnClickTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
         + "import android.widget.Button;\n"
@@ -311,23 +358,17 @@ public class OnClickTest {
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view0;\n"
         + "  private View view1;\n"
         + "  private View view2;\n"
         + "  private View view3;\n"
         + "  private View view4;\n"
-        + "    protected InnerUnbinder(final T target, final Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, final Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 0, \"method 'click0'\");\n"
@@ -386,7 +427,6 @@ public class OnClickTest {
         + "    view4 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -394,7 +434,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void methodWithMultipleIds() {
@@ -408,27 +448,36 @@ public class OnClickTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
         + "  private View view2;\n"
         + "  private View view3;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'click'\");\n"
@@ -467,7 +516,6 @@ public class OnClickTest {
         + "    view3 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -475,7 +523,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void nullable() {
@@ -488,25 +536,34 @@ public class OnClickTest {
         "  @Optional @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findOptionalView(source, 1);\n"
@@ -529,7 +586,6 @@ public class OnClickTest {
         + "    }\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -537,7 +593,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void optionalAndRequiredSkipsNullCheck() {
@@ -553,25 +609,34 @@ public class OnClickTest {
         "  @Optional @OnClick(1) void doStuff() {}",
         "}"));
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
@@ -593,7 +658,6 @@ public class OnClickTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -601,7 +665,7 @@ public class OnClickTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void failsInJavaPackage() {
