diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
index 322b79e..50b4330 100644
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
@@ -15,69 +15,6 @@ import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static java.util.Arrays.asList;
 
 public class UnbinderTest {
-  @Test public void bindingUnbinder() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.support.v4.app.Fragment;\n"
-        + "import butterknife.ButterKnife;\n"
-        + "import butterknife.OnClick;\n"
-        + "import butterknife.Unbinder;\n"
-        + "public class Test extends Fragment {\n"
-        + "  @OnClick(1) void doStuff() {}\n"
-        + "}");
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
-        + "package test;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    unbinder.view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public void unbind() {\n"
-        + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1 = null;\n"
-        + "      this.target = null;\n"
-        + "    }\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedSource);
-  }
-
   @Test public void multipleBindings() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -109,15 +46,17 @@ public class UnbinderTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");\n"
         + "      target.view = view;\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -133,12 +72,6 @@ public class UnbinderTest {
         + "      view = finder.findRequiredView(source, 2, \"field 'view2'\");\n"
         + "      target.view2 = view;\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -187,15 +120,17 @@ public class UnbinderTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findOptionalView(source, 1, null);\n"
         + "      if (view != null) {\n"
-        + "      unbinder.view1 = view;\n"
+        + "        view1 = view;\n"
         + "        view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "          @Override\n"
         + "          public void doClick(View p0) {\n"
@@ -204,12 +139,6 @@ public class UnbinderTest {
         + "        });\n"
         + "      }\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -257,15 +186,15 @@ public class UnbinderTest {
         + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final TestOne target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
-        + "    Test$$ViewBinder.bindToTarget(target, finder, source, unbinder);\n"
+        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      super(target, finder, source);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -273,11 +202,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      super.unbind();\n"
@@ -301,14 +225,16 @@ public class UnbinderTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -316,12 +242,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -368,15 +288,15 @@ public class UnbinderTest {
         + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final TestOne target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
-        + "    Test$$ViewBinder.bindToTarget(target, finder, source, unbinder);\n"
+        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      super(target, finder, source);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -384,11 +304,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      super.unbind();\n"
@@ -412,14 +327,16 @@ public class UnbinderTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -427,12 +344,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -489,14 +400,16 @@ public class UnbinderTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -504,12 +417,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -533,15 +440,15 @@ public class UnbinderTest {
         + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final TestOne target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
-        + "    Test$$ViewBinder.bindToTarget(target, finder, source, unbinder);\n"
+        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "    private View view2;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      super(target, finder, source);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 2, \"method 'doStuff2'\");\n"
-        + "    unbinder.view2 = view;\n"
+        + "      view2 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -549,11 +456,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    View view2;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      super.unbind();\n"
@@ -603,14 +505,16 @@ public class UnbinderTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -618,12 +522,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -646,15 +544,15 @@ public class UnbinderTest {
         + "public class TestTwo$$ViewBinder<T extends TestTwo> extends Test$$ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final TestTwo target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
-        + "    Test$$ViewBinder.bindToTarget(target, finder, source, unbinder);\n"
+        + "  protected static class InnerUnbinder<T extends TestTwo> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      super(target, finder, source);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -662,11 +560,6 @@ public class UnbinderTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends TestTwo> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      super.unbind();\n"
@@ -877,22 +770,19 @@ public class UnbinderTest {
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    bindToTarget(target, finder, source, res, theme);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source, res, theme);\n"
         + "  }\n"
+        + "  protected static class InnerUnbinder<T extends C> implements Unbinder {\n"
+        + "    protected T target;\n"
         + "    @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(C target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "      this.target = target;\n"
         + "      B$$ViewBinder.bindToTarget(target, res, theme);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 16908313, \"field 'button1'\");\n"
         + "      target.button1 = view;\n"
         + "      target.transparentColor = Utils.getColor(res, theme, 17170445);\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends C> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -920,14 +810,15 @@ public class UnbinderTest {
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    bindToTarget(target, finder, source, res, theme);\n"
-        + "    return new C$$ViewBinder.InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source, res, theme);\n"
         + "  }\n"
+        + "  protected static class InnerUnbinder<T extends D> extends C$$ViewBinder.InnerUnbinder<T> {\n"
         + "    @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(D target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
-        + "    C$$ViewBinder.bindToTarget(target, finder, source, res, theme);\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "      super(target, finder, source, res, theme);\n"
         + "      target.grayColor = Utils.getColor(res, theme, 17170432);\n"
         + "    }\n"
+        + "  }\n"
         + "}"
     );
 
@@ -947,14 +838,15 @@ public class UnbinderTest {
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    bindToTarget(target, finder, source, res, theme);\n"
-        + "    return new C$$ViewBinder.InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source, res, theme);\n"
         + "  }\n"
+        + "  protected static class InnerUnbinder<T extends E> extends C$$ViewBinder.InnerUnbinder<T> {\n"
         + "    @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(E target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
-        + "    C$$ViewBinder.bindToTarget(target, finder, source, res, theme);\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "      super(target, finder, source, res, theme);\n"
         + "      target.backgroundDarkColor = Utils.getColor(res, theme, 17170446);\n"
         + "    }\n"
+        + "  }\n"
         + "}"
     );
 
@@ -974,14 +866,15 @@ public class UnbinderTest {
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    bindToTarget(target, finder, source, res, theme);\n"
-        + "    return new C$$ViewBinder.InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source, res, theme);\n"
         + "  }\n"
+        + "  protected static class InnerUnbinder<T extends F> extends D$$ViewBinder.InnerUnbinder<T> {\n"
         + "    @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(F target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
-        + "    D$$ViewBinder.bindToTarget(target, finder, source, res, theme);\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "      super(target, finder, source, res, theme);\n"
         + "      target.backgroundLightColor = Utils.getColor(res, theme, 17170447);\n"
         + "    }\n"
+        + "  }\n"
         + "}"
     );
 
@@ -1003,18 +896,18 @@ public class UnbinderTest {
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, res, theme, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source, res, theme);\n"
         + "  }\n"
+        + "  protected static class InnerUnbinder<T extends G> extends E$$ViewBinder.InnerUnbinder<T> {\n"
+        + "    private View view16908290;\n"
         + "    @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(final G target, Finder finder, Object source, Resources res, Resources.Theme theme, InnerUnbinder unbinder) {\n"
-        + "    E$$ViewBinder.bindToTarget(target, finder, source, res, theme);\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "      super(target, finder, source, res, theme);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 16908314, \"field 'button2'\");\n"
         + "      target.button2 = view;\n"
         + "      view = finder.findRequiredView(source, 16908290, \"method 'onClick'\");\n"
-        + "    unbinder.view16908290 = view;\n"
+        + "      view16908290 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -1023,11 +916,6 @@ public class UnbinderTest {
         + "      });\n"
         + "      target.grayColor = Utils.getColor(res, theme, 17170432);\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends G> extends C$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    View view16908290;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -1057,22 +945,17 @@ public class UnbinderTest {
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, res, theme, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source, res, theme);\n"
         + "  }\n"
+        + "  protected static class InnerUnbinder<T extends H> extends G$$ViewBinder.InnerUnbinder<T> {\n"
         + "    @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(H target, Finder finder, Object source, Resources res, Resources.Theme theme, InnerUnbinder unbinder) {\n"
-        + "    G$$ViewBinder.bindToTarget(target, finder, source, res, theme, unbinder);\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "      super(target, finder, source, res, theme);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 16908315, \"field 'button3'\");\n"
         + "      target.button3 = view;\n"
         + "      target.grayColor = Utils.getColor(res, theme, 17170433);\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends H> extends G$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
