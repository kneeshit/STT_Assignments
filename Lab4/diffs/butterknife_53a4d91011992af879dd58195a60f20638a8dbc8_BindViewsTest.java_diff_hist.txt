diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
index e2d3256..26025f1 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
@@ -45,35 +45,33 @@ public class BindViewsTest {
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  public Unbinder bind(Test target, View source) {\n"
+        + "    return new Test_ViewBinding<>(target, source);\n"
         + "  }\n"
         + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.arrayOf(\n"
-        + "        finder.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
@@ -105,35 +103,33 @@ public class BindViewsTest {
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  public Unbinder bind(Test target, View source) {\n"
+        + "    return new Test_ViewBinding<>(target, source);\n"
         + "  }\n"
         + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.arrayOf(\n"
-        + "        finder.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
@@ -167,36 +163,34 @@ public class BindViewsTest {
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  public Unbinder bind(Test target, View source) {\n"
+        + "    return new Test_ViewBinding<>(target, source);\n"
         + "  }\n"
         + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import android.widget.TextView;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.arrayOf(\n"
-        + "        finder.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n"
-        + "        finder.findRequiredViewAsType(source, 2, \"field 'thing'\", TextView.class), \n"
-        + "        finder.findRequiredViewAsType(source, 3, \"field 'thing'\", TextView.class));\n"
+        + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", TextView.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", TextView.class));\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
@@ -229,35 +223,33 @@ public class BindViewsTest {
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  public Unbinder bind(Test target, View source) {\n"
+        + "    return new Test_ViewBinding<>(target, source);\n"
         + "  }\n"
         + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
-        + "        finder.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
@@ -328,35 +320,33 @@ public class BindViewsTest {
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  public Unbinder bind(Test target, View source) {\n"
+        + "    return new Test_ViewBinding<>(target, source);\n"
         + "  }\n"
         + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
-        + "        finder.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n"
-        + "        finder.findRequiredViewAsType(source, 2, \"field 'thing'\", Test.TestInterface.class), \n"
-        + "        finder.findRequiredViewAsType(source, 3, \"field 'thing'\", Test.TestInterface.class));\n"
+        + "        Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 2, \"field 'thing'\", Test.TestInterface.class), \n"
+        + "        Utils.findRequiredViewAsType(source, 3, \"field 'thing'\", Test.TestInterface.class));\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
@@ -389,35 +379,33 @@ public class BindViewsTest {
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  public Unbinder bind(Test target, View source) {\n"
+        + "    return new Test_ViewBinding<>(target, source);\n"
         + "  }\n"
         + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
-        + "        finder.findRequiredView(source, 1, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 2, \"field 'thing'\"), \n"
-        + "        finder.findRequiredView(source, 3, \"field 'thing'\"));\n"
+        + "        Utils.findRequiredView(source, 1, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 2, \"field 'thing'\"), \n"
+        + "        Utils.findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
@@ -453,35 +441,33 @@ public class BindViewsTest {
 
     JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.ViewBinder;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public final class Test_ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  public Unbinder bind(Test target, View source) {\n"
+        + "    return new Test_ViewBinding<>(target, source);\n"
         + "  }\n"
         + "}"
     );
 
     JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
+        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
-        + "  public Test_ViewBinding(T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(T target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.listOf(\n"
-        + "        finder.findOptionalView(source, 1), \n"
-        + "        finder.findOptionalView(source, 2), \n"
-        + "        finder.findOptionalView(source, 3));\n"
+        + "        source.findViewById(1), \n"
+        + "        source.findViewById(2), \n"
+        + "        source.findViewById(3));\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
