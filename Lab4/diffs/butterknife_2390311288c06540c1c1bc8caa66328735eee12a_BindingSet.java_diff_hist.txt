diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index d1cfe37..02d69fb 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -24,8 +24,12 @@ import java.util.Map;
 import java.util.Set;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeMirror;
 
+import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;
 import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;
+import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;
 import static com.google.auto.common.MoreElements.getPackage;
 import static java.util.Collections.singletonList;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -52,18 +56,24 @@ final class BindingSet {
   private final TypeName targetTypeName;
   private final ClassName bindingClassName;
   private final boolean isFinal;
+  private final boolean isView;
+  private final boolean isActivity;
+  private final boolean isDialog;
   private final ImmutableList<ViewBinding> viewBindings;
   private final ImmutableList<FieldCollectionViewBinding> collectionBindings;
   private final ImmutableList<ResourceBinding> resourceBindings;
   private final BindingSet parentBinding;
 
   private BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
-      ImmutableList<ViewBinding> viewBindings,
+      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,
       ImmutableList<FieldCollectionViewBinding> collectionBindings,
       ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {
     this.isFinal = isFinal;
     this.targetTypeName = targetTypeName;
     this.bindingClassName = bindingClassName;
+    this.isView = isView;
+    this.isActivity = isActivity;
+    this.isDialog = isDialog;
     this.viewBindings = viewBindings;
     this.collectionBindings = collectionBindings;
     this.resourceBindings = resourceBindings;
@@ -93,6 +103,13 @@ final class BindingSet {
       result.addField(targetTypeName, "target", PRIVATE);
     }
 
+    if (isView) {
+      result.addMethod(createBindingConstructorForView());
+    } else if (isActivity) {
+      result.addMethod(createBindingConstructorForActivity());
+    } else if (isDialog) {
+      result.addMethod(createBindingConstructorForDialog());
+    }
     if (!constructorNeedsView()) {
       // Add a delegating constructor with a target type + view signature for reflective use.
       result.addMethod(createBindingViewDelegateConstructor());
@@ -120,6 +137,45 @@ final class BindingSet {
         .build();
   }
 
+  private MethodSpec createBindingConstructorForView() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target)");
+    } else {
+      builder.addStatement("this(target, target.getContext())");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructorForActivity() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target.getWindow().getDecorView())");
+    } else {
+      builder.addStatement("this(target, target)");
+    }
+    return builder.build();
+  }
+
+  private MethodSpec createBindingConstructorForDialog() {
+    MethodSpec.Builder builder = MethodSpec.constructorBuilder()
+        .addAnnotation(UI_THREAD)
+        .addModifiers(PUBLIC)
+        .addParameter(targetTypeName, "target");
+    if (constructorNeedsView()) {
+      builder.addStatement("this(target, target.getWindow().getDecorView())");
+    } else {
+      builder.addStatement("this(target, target.getContext())");
+    }
+    return builder.build();
+  }
+
   private MethodSpec createBindingConstructor(int sdk) {
     MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
         .addAnnotation(UI_THREAD)
@@ -597,7 +653,13 @@ final class BindingSet {
   }
 
   static Builder newBuilder(TypeElement enclosingElement) {
-    TypeName targetType = TypeName.get(enclosingElement.asType());
+    TypeMirror typeMirror = enclosingElement.asType();
+
+    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);
+    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);
+    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);
+
+    TypeName targetType = TypeName.get(typeMirror);
     if (targetType instanceof ParameterizedTypeName) {
       targetType = ((ParameterizedTypeName) targetType).rawType;
     }
@@ -608,13 +670,16 @@ final class BindingSet {
     ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");
 
     boolean isFinal = enclosingElement.getModifiers().contains(Modifier.FINAL);
-    return new Builder(targetType, bindingClassName, isFinal);
+    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);
   }
 
   static final class Builder {
     private final TypeName targetTypeName;
     private final ClassName bindingClassName;
     private final boolean isFinal;
+    private final boolean isView;
+    private final boolean isActivity;
+    private final boolean isDialog;
 
     private BindingSet parentBinding;
 
@@ -623,10 +688,14 @@ final class BindingSet {
         ImmutableList.builder();
     private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();
 
-    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {
+    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,
+        boolean isView, boolean isActivity, boolean isDialog) {
       this.targetTypeName = targetTypeName;
       this.bindingClassName = bindingClassName;
       this.isFinal = isFinal;
+      this.isView = isView;
+      this.isActivity = isActivity;
+      this.isDialog = isDialog;
     }
 
     void addField(Id id, FieldViewBinding binding) {
@@ -684,8 +753,9 @@ final class BindingSet {
       for (ViewBinding.Builder builder : viewIdMap.values()) {
         viewBindings.add(builder.build());
       }
-      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewBindings.build(),
-          collectionBindings.build(), resourceBindings.build(), parentBinding);
+      return new BindingSet(targetTypeName, bindingClassName, isFinal, isView, isActivity, isDialog,
+          viewBindings.build(), collectionBindings.build(), resourceBindings.build(),
+          parentBinding);
     }
   }
 }
