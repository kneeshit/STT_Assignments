diff --git a/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
index a46b74a..4a402fb 100644
--- a/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
+++ b/butterknife-runtime/src/androidTest/java/butterknife/internal/UtilsTest.java
@@ -5,30 +5,30 @@ import android.support.test.InstrumentationRegistry;
 import android.view.View;
 import org.junit.Test;
 
-import static butterknife.internal.Utils.arrayOf;
-import static butterknife.internal.Utils.listOf;
+import static butterknife.internal.Utils.arrayFilteringNull;
+import static butterknife.internal.Utils.listFilteringNull;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
 public final class UtilsTest {
   @Test public void listOfFiltersNull() {
-    assertThat(listOf(null, null, null)).isEmpty();
-    assertThat(listOf("One", null, null)).containsExactly("One");
-    assertThat(listOf(null, "One", null)).containsExactly("One");
-    assertThat(listOf(null, null, "One")).containsExactly("One");
-    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");
-    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");
-    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");
+    assertThat(listFilteringNull(null, null, null)).isEmpty();
+    assertThat(listFilteringNull("One", null, null)).containsExactly("One");
+    assertThat(listFilteringNull(null, "One", null)).containsExactly("One");
+    assertThat(listFilteringNull(null, null, "One")).containsExactly("One");
+    assertThat(listFilteringNull("One", "Two", null)).containsExactly("One", "Two");
+    assertThat(listFilteringNull("One", null, "Two")).containsExactly("One", "Two");
+    assertThat(listFilteringNull(null, "One", "Two")).containsExactly("One", "Two");
   }
 
   @Test public void arrayOfFiltersNull() {
-    assertThat(arrayOf(null, null, null)).isEmpty();
-    assertThat(arrayOf("One", null, null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, "One", null)).asList().containsExactly("One");
-    assertThat(arrayOf(null, null, "One")).asList().containsExactly("One");
-    assertThat(arrayOf("One", "Two", null)).asList().containsExactly("One", "Two");
-    assertThat(arrayOf("One", null, "Two")).asList().containsExactly("One", "Two");
-    assertThat(arrayOf(null, "One", "Two")).asList().containsExactly("One", "Two");
+    assertThat(arrayFilteringNull(null, null, null)).isEmpty();
+    assertThat(arrayFilteringNull("One", null, null)).asList().containsExactly("One");
+    assertThat(arrayFilteringNull(null, "One", null)).asList().containsExactly("One");
+    assertThat(arrayFilteringNull(null, null, "One")).asList().containsExactly("One");
+    assertThat(arrayFilteringNull("One", "Two", null)).asList().containsExactly("One", "Two");
+    assertThat(arrayFilteringNull("One", null, "Two")).asList().containsExactly("One", "Two");
+    assertThat(arrayFilteringNull(null, "One", "Two")).asList().containsExactly("One", "Two");
   }
 
   @Test public void finderThrowsNiceError() {
