diff --git a/src/inter/context.rs b/src/inter/context.rs
index 57049e3..3a7ce4d 100644
--- a/src/inter/context.rs
+++ b/src/inter/context.rs
@@ -1,34 +1,33 @@
-use crate::inter::render_config;
 use crate::store::conf::Conf;
-use anyhow::Context;
-use inquire::{min_length, required, Password, PasswordDisplayMode, Select, Text};
-use once_cell::sync::Lazy;
+use crate::store::{account::AccountStore, conf::ConfFileStore, Store};
 use openai::auth::{AuthClient, AuthClientBuilder};
-use openai::{
-    auth::{
-        model::{AccessToken, AuthAccount, AuthStrategy},
-        AuthHandle,
-    },
-    model::AuthenticateToken,
-};
-
 use std::time;
+use tokio::sync::OnceCell;
+
+static CONF_STORE: OnceCell<ConfFileStore> = OnceCell::const_new();
+static ACCOUNT_STORE: OnceCell<AccountStore> = OnceCell::const_new();
+static AUTH_CLIENT: OnceCell<AuthClient> = OnceCell::const_new();
 
-use crate::{
-    store::{
-        account::{Account, AccountFileStore},
-        conf::ConfFileStore,
-        Store,
-    },
-    util,
-};
+pub struct Context;
 
-pub static ACCOUNT_STORE: Lazy<AccountFileStore> = Lazy::new(|| AccountFileStore::new());
+impl Context {
+    pub async fn get_conf_store() -> &'static ConfFileStore {
+        CONF_STORE
+            .get_or_init(|| async { ConfFileStore::new() })
+            .await
+    }
 
-pub static CONF_STORE: Lazy<ConfFileStore> = Lazy::new(|| ConfFileStore::new());
+    pub async fn get_account_store() -> &'static AccountStore {
+        ACCOUNT_STORE
+            .get_or_init(|| async { AccountStore::new() })
+            .await
+    }
 
-pub static AUTH_CLIENT: Lazy<AuthClient> = Lazy::new(|| {
-    let auth_client = match CONF_STORE
+    pub async fn get_auth_client() -> &'static AuthClient {
+        AUTH_CLIENT
+            .get_or_init(|| async {
+                match Self::get_conf_store()
+                    .await
                     .get(Conf::default())
                     .expect("Failed to read configuration")
                 {
@@ -44,84 +43,8 @@ pub static AUTH_CLIENT: Lazy<AuthClient> = Lazy::new(|| {
                         .connect_timeout(time::Duration::from_secs(60))
                         .cookie_store(true)
                         .build(),
-    };
-    auth_client
-});
-
-pub async fn login_prompt(auth_strategy: Option<AuthStrategy>) -> anyhow::Result<AccessToken> {
-    let auth_strategy = if let Some(auth_strategy) = auth_strategy {
-        auth_strategy
-    } else {
-        Select::new(
-            "Please choose the authentication strategy ›",
-            vec![
-                AuthStrategy::Web,
-                AuthStrategy::Apple,
-                AuthStrategy::Platform,
-            ],
-        )
-        .prompt()?
-    };
-    let username = Text::new("Email ›")
-        .with_render_config(render_config())
-        .with_validator(required!("email is required"))
-        .with_validator(min_length!(5))
-        .with_help_message("OpenAI account email, Format: example@gmail.com")
-        .prompt()?;
-
-    let password = Password::new("Password ›")
-        .with_render_config(render_config())
-        .with_display_mode(PasswordDisplayMode::Masked)
-        .with_validator(required!("password is required"))
-        .with_validator(min_length!(5))
-        .with_help_message("OpenAI account password")
-        .without_confirmation()
-        .prompt()
-        .context("An error happened when asking for your account, try again later.")?;
-
-    let mfa_res = Text::new("MFA Code [Option] ›")
-        .with_render_config(render_config())
-        .with_help_message("OpenAI account MFA Code, If it is empty, please enter directly.")
-        .prompt_skippable();
-
-    let mfa_code = match mfa_res {
-        Ok(mfa_code) => mfa_code,
-        Err(_) => {
-            println!("An error happened when asking for your mfa code, try again later.");
-            None
-        }
-    };
-
-    let auth_account = AuthAccount {
-        username,
-        password,
-        mfa: mfa_code,
-        option: auth_strategy.into(),
-        cf_turnstile_response: None,
-    };
-
-    let mut pb = util::long_spinner_progress_bar("Logging...");
-    pb.start();
-    let result = AUTH_CLIENT.do_access_token(&auth_account).await;
-    pb.finish_and_clear().await;
-    result
-}
-
-pub async fn login_store_prompt(auth_strategy: AuthStrategy) {
-    match login_prompt(Some(auth_strategy.clone())).await {
-        Ok(token) => {
-            if let Ok(authenticate_token) = AuthenticateToken::try_from(token) {
-                let mut account = Account::new(authenticate_token.email());
-                account.push_state(auth_strategy, authenticate_token);
-                if let Some(err) = ACCOUNT_STORE.add(account).err() {
-                    eprintln!("Error: {err}")
-                } else {
-                    println!("Login success!")
-                }
-            }
-        }
-        Err(err) => {
-            eprintln!("Login error: {err}")
                 }
+            })
+            .await
     }
 }
