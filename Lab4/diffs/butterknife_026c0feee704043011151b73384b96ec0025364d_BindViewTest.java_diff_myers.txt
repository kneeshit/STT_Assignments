diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
index 570d7f6..3e03406 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
@@ -36,18 +36,15 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "    target.thing = view;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "      target.thing = view;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -91,15 +88,15 @@ public class BindViewTest {
         + "public final class Test$$ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
+        + "  }\n"
+        + "  private static final class InnerUnbinder implements Unbinder {\n"
+        + "    private Test target;\n"
+        + "    InnerUnbinder(Test target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "      target.thing = view;\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static final class InnerUnbinder implements Unbinder {\n"
-        + "    protected Test target;\n"
-        + "    protected InnerUnbinder(Test target) {\n"
-        + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -152,18 +149,15 @@ public class BindViewTest {
         + "public class Base$$ViewBinder<T extends Base> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Base target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "    target.thing = view;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Base> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "      target.thing = view;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -186,15 +180,14 @@ public class BindViewTest {
         + "public final class Test$$ViewBinder extends Base$$ViewBinder<Test> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, Test target, Object source) {\n"
-        + "    Base$$ViewBinder.bindToTarget(target, finder, source);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
+        + "  }\n"
+        + "  private static final class InnerUnbinder extends Base$$ViewBinder.InnerUnbinder<Test> {\n"
+        + "    InnerUnbinder(Test target, Finder finder, Object source) {\n"
+        + "      super(target, finder, source);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "      target.thing = view;\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static final class InnerUnbinder extends Base$$ViewBinder.InnerUnbinder<Test> {\n"
-        + "    protected InnerUnbinder(Test target) {\n"
-        + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -239,18 +232,15 @@ public class BindViewTest {
         + "public class Outer$Test$$ViewBinder<T extends Outer.Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Outer.Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "    target.thing = view;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Outer.Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "      target.thing = view;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -294,18 +284,15 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "    target.thing = view;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "      target.thing = view;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -349,18 +336,15 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "    target.thing = finder.castView(view, 1, \"field 'thing'\");\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "      target.thing = finder.castView(view, 1, \"field 'thing'\");\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -404,18 +388,15 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
-        + "    target.thing = finder.castView(view, 1, \"field 'thing'\");\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
+        + "      target.thing = finder.castView(view, 1, \"field 'thing'\");\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -461,15 +442,17 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
         + "      target.thing1 = view;\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -477,12 +460,6 @@ public class BindViewTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -545,18 +522,15 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findOptionalView(source, 1, null);\n"
-        + "    target.view = view;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findOptionalView(source, 1, null);\n"
+        + "      target.view = view;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -604,18 +578,15 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
-        + "    target.view = view;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "      target.view = view;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -638,19 +609,15 @@ public class BindViewTest {
         + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(TestOne target, Finder finder, Object source) {\n"
-        + "    Test$$ViewBinder.bindToTarget(target, finder, source);\n"
+        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      super(target, finder, source);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "      target.thing = view;\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -696,18 +663,15 @@ public class BindViewTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
-        + "  }\n"
-        + "  protected static void bindToTarget(Test target, Finder finder, Object source) {\n"
-        + "    View view;\n"
-        + "    view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
-        + "    target.view = view;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
         + "    protected T target;\n"
-        + "    protected InnerUnbinder(T target) {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
         + "      this.target = target;\n"
+        + "      View view;\n"
+        + "      view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
+        + "      target.view = view;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -730,19 +694,15 @@ public class BindViewTest {
         + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    bindToTarget(target, finder, source);\n"
-        + "    return new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(TestOne target, Finder finder, Object source) {\n"
-        + "    Test$$ViewBinder.bindToTarget(target, finder, source);\n"
+        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "    protected InnerUnbinder(T target, Finder finder, Object source) {\n"
+        + "      super(target, finder, source);\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "      target.thing = view;\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      super(target);\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
