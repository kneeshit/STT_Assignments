diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
index 36ad9d2..e2e4ef9 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java
@@ -33,20 +33,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -125,8 +125,8 @@ public class BindViewTest {
         + "  public void unbind() {\n"
         + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -167,20 +167,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Base_ViewBinding<T extends Base> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Base_ViewBinding implements Unbinder {\n"
+        + "  private Base target;\n"
         + "  @UiThread\n"
-        + "  public Base_ViewBinding(T target, View source) {\n"
+        + "  public Base_ViewBinding(Base target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Base target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -190,18 +190,23 @@ public class BindViewTest {
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public final class Test_ViewBinding extends Base_ViewBinding<Test> {\n"
+        + "public final class Test_ViewBinding extends Base_ViewBinding {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
         + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
         + "    Test target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
         + "    target.thing = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -236,20 +241,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Outer$Test_ViewBinding<T extends Outer.Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Outer$Test_ViewBinding implements Unbinder {\n"
+        + "  private Outer.Test target;\n"
         + "  @UiThread\n"
-        + "  public Outer$Test_ViewBinding(T target, View source) {\n"
+        + "  public Outer$Test_ViewBinding(Outer.Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Outer.Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -282,20 +287,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -329,20 +334,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", Test.TestInterface.class);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -377,20 +382,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredViewAsType(source, 1, \"field 'thing'\", TextView.class);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.thing = null;\n"
         + "    this.target = null;\n"
+        + "    target.thing = null;\n"
         + "  }\n"
         + "}"
     );
@@ -428,11 +433,11 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
@@ -448,12 +453,12 @@ public class BindViewTest {
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.thing1 = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -490,11 +495,11 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'thing1' and method 'doStuff'\");\n"
@@ -510,12 +515,12 @@ public class BindViewTest {
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.thing1 = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -567,20 +572,20 @@ public class BindViewTest {
         + "import butterknife.Unbinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.view = source.findViewById(1);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.view = null;\n"
         + "    this.target = null;\n"
+        + "    target.view = null;\n"
         + "  }\n"
         + "}"
     );
@@ -628,20 +633,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.view = null;\n"
         + "    this.target = null;\n"
+        + "    target.view = null;\n"
         + "  }\n"
         + "}"
     );
@@ -651,18 +656,23 @@ public class BindViewTest {
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
         + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(T target, View source) {\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.thing = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -710,20 +720,20 @@ public class BindViewTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    target.view = Utils.findRequiredView(source, 1, \"field 'view'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    target.view = null;\n"
         + "    this.target = null;\n"
+        + "    target.view = null;\n"
         + "  }\n"
         + "}"
     );
@@ -733,18 +743,23 @@ public class BindViewTest {
         + "import android.support.annotation.UiThread;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "public class TestOne_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestOne target;\n"
         + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(T target, View source) {\n"
+        + "  public TestOne_ViewBinding(TestOne target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.thing = Utils.findRequiredView(source, 1, \"field 'thing'\");\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    TestOne target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
         + "    target.thing = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
