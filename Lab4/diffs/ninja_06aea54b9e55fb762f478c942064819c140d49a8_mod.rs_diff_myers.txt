diff --git a/openai/src/serve/mod.rs b/openai/src/serve/mod.rs
index c94cf38..bbb495a 100644
--- a/openai/src/serve/mod.rs
+++ b/openai/src/serve/mod.rs
@@ -1,10 +1,5 @@
-pub mod middleware;
-#[cfg(feature = "sign")]
-pub mod sign;
-#[cfg(feature = "limit")]
-pub mod tokenbucket;
-
 pub mod err;
+pub mod middleware;
 pub mod turnstile;
 
 #[cfg(feature = "template")]
@@ -48,13 +43,15 @@ use crate::auth::model::{
 };
 use crate::auth::provide::AuthProvider;
 use crate::context::{self, ContextArgsBuilder};
+use crate::serve::middleware::tokenbucket::TokenBucketLimitContext;
 use crate::serve::router::toapi::chat_to_api;
-use crate::serve::tokenbucket::TokenBucketLimitContext;
 use crate::{arkose, debug, info, warn, HOST_CHATGPT, ORIGIN_CHATGPT};
 
 use crate::serve::err::ResponseError;
 use crate::{HEADER_UA, URL_CHATGPT_API, URL_PLATFORM_API};
 
+use self::middleware::tokenbucket;
+
 const EMPTY: &str = "";
 
 #[derive(Builder, Clone)]
@@ -105,9 +102,6 @@ pub struct Launcher {
     arkose_solver: Solver,
     /// arkoselabs solver client key
     arkose_solver_key: Option<String>,
-    /// Enable url signature (signature secret key)
-    #[cfg(feature = "sign")]
-    sign_secret_key: Option<String>,
     /// Enable Tokenbucket
     #[cfg(feature = "limit")]
     tb_enable: bool,
@@ -206,7 +200,6 @@ impl Launcher {
                 self.timeout as u64,
             )));
 
-        #[cfg(all(feature = "sign", feature = "limit"))]
         let app_layer = {
             let limit_context = TokenBucketLimitContext::from((
                 self.tb_store_strategy.clone(),
@@ -221,35 +214,12 @@ impl Launcher {
                 .layer(axum::middleware::from_fn(
                     middleware::token_authorization_middleware,
                 ))
-                .layer(axum::middleware::from_fn_with_state(
-                    Arc::new(self.sign_secret_key.clone()),
-                    middleware::sign_middleware,
-                ))
                 .layer(axum::middleware::from_fn_with_state(
                     Arc::new(limit_context),
                     middleware::token_bucket_limit_middleware,
                 ))
         };
 
-        #[cfg(all(not(feature = "limit"), feature = "sign"))]
-        let app_layer = {
-            tower::ServiceBuilder::new()
-                .layer(axum::middleware::from_fn(
-                    middleware::token_authorization_middleware,
-                ))
-                .layer(axum::middleware::from_fn_with_state(
-                    Arc::new(self.sign_secret_key),
-                    middleware::sign_middleware,
-                ))
-        };
-
-        #[cfg(all(not(feature = "limit"), not(feature = "sign")))]
-        let app_layer = {
-            tower::ServiceBuilder::new().layer(axum::middleware::from_fn(
-                middleware::token_authorization_middleware,
-            ))
-        };
-
         let http_config = HttpConfig::new()
             .http1_keep_alive(true)
             .http1_header_read_timeout(Duration::from_secs(self.tcp_keepalive as u64))
