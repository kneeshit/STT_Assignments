diff --git a/src/main.rs b/src/main.rs
index e56c0c9..ff30717 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,5 +1,6 @@
 use anyhow::Context;
 use clap::{Parser, Subcommand};
+// use openai::api::Api;
 use std::{io::Write, path::PathBuf, sync::Once};
 
 #[derive(Parser, Debug)]
@@ -11,7 +12,7 @@ struct Opt {
 
     /// HTTP Proxy. Format: protocol://user:pass@ip:port
     #[clap(short, long, env = "OPENGPT_PROXY", value_parser = parse_proxy_url)]
-    proxy: Option<reqwest::Proxy>,
+    proxy: Option<url::Url>,
 
     /// OpenAI gpt-3.5-turbo chat api, Note: OpenAI will bill you
     #[clap(short, long, env = "OPENGPT_TURBO")]
@@ -49,72 +50,37 @@ enum SubCommands {
 }
 use std::collections::HashMap;
 
-use fficall::model::Identifier;
-use serde_json::json;
-
 #[tokio::main]
 async fn main() -> anyhow::Result<()> {
     let _opt = Opt::parse();
-    let email = std::env::var("EMAIL")?;
-    let password = std::env::var("PASSWORD")?;
-    let store = openai::token::FileStore::default();
-    let mut auth = openai::oauth::OAuthBuilder::builder()
-        .email(email)
-        .password(password)
-        .cache(true)
-        .cookie_store(true)
-        .token_store(store)
-        .client_timeout(std::time::Duration::from_secs(20))
-        .build();
-    let token = auth.do_get_access_token().await?;
-    let mut headers = HashMap::new();
-    headers.insert(reqwest::header::USER_AGENT.to_string(),
-     "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36".to_string());
-    headers.insert(
-        reqwest::header::AUTHORIZATION.to_string(),
-        token.get_bearer_access_token().to_owned(),
-    );
-
-    let payload = json!(
-        {
-            "action": "next",
-            "messages": [
-              {
-                "id": "ec526640-1cac-4a8d-a4c4-5102ccbcacbc",
-                "author": {
-                  "role": "user"
-                },
-                "content": {
-                  "content_type": "text",
-                  "parts": [
-                    "Rust Examples"
-                  ]
-                }
-              }
-            ],
-            "parent_message_id": "e8a1841c-2694-4434-ad4d-ed0b79813879",
-            "model": "text-davinci-002-render-sha",
-            "timezone_offset_min": -480,
-            "history_and_training_disabled": false
-          }
-    );
-    let payload = fficall::model::RequestPayloadBuilder::default()
-        .request_url("https://chat.openai.com/backend-api/conversation".to_string())
-        .request_method(fficall::model::RequestMethod::POST)
-        .tls_client_identifier(Identifier::Chrome105)
-        .headers(headers)
-        .request_body(payload.to_string())
-        .timeout_seconds(200 as u32)
-        .without_cookie_jar(false)
-        .build()
-        .unwrap();
-    fficall::call_request_stream(payload)?;
-    // let body = gohttp::call_request(payload)?;
-    // if body.is_success() {
-    //     println!("{:#?}", body);
-    // } else {
-    //     println!("{:?}", body)
-    // }
+    // let email = std::env::var("EMAIL")?;
+    // let password = std::env::var("PASSWORD")?;
+    // let store = openai::token::FileStore::default();
+    // let mut auth = openai::oauth::OAuthBuilder::builder()
+    //     .email(email)
+    //     .password(password)
+    //     .cache(true)
+    //     .cookie_store(true)
+    //     .token_store(store)
+    //     .client_timeout(std::time::Duration::from_secs(20))
+    //     .build();
+    // let token = auth.do_get_access_token().await?;
+    // let mut headers = HashMap::new();
+    // headers.insert("User-Agent".to_string(),
+    //  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36".to_string());
+    // headers.insert(
+    //     "Authenorization".to_string(),
+    //     token.get_bearer_access_token().to_owned(),
+    // );
+
+    // let api = openai::api::opengpt::OpenGPTBuilder::builder()
+    //     .access_token(token.access_token().to_owned())
+    //     .cookie_store(false)
+    //     .build();
+    
+    // let resp = api.account_check().await?;
+    // println!("{:#?}", resp);
+    // tokio::time::sleep(tokio::time::Duration::from_secs(3)).await;
 
     Ok(())
 }
@@ -168,7 +134,8 @@ fn parse_host(s: &str) -> anyhow::Result<std::net::IpAddr> {
     Ok(addr)
 }
 
-fn parse_proxy_url(proxy_url: &str) -> anyhow::Result<reqwest::Proxy> {
+// proxy proto
+fn parse_proxy_url(proxy_url: &str) -> anyhow::Result<url::Url> {
     let url = url::Url::parse(proxy_url)
         .context("The Proxy Url format must be `protocol://user:pass@ip:port`")?;
     let protocol = url.scheme().to_string();
@@ -178,5 +145,5 @@ fn parse_proxy_url(proxy_url: &str) -> anyhow::Result<reqwest::Proxy> {
         _ => anyhow::bail!("Unsupported protocol: {}", protocol),
     };
 
-    Ok(reqwest::Proxy::all(url.to_string())?)
+    Ok(url)
 }
