diff --git a/butterknife/src/main/java/butterknife/internal/TargetClass.java b/butterknife/src/main/java/butterknife/internal/TargetClass.java
index dec8ee1..1e4831d 100644
--- a/butterknife/src/main/java/butterknife/internal/TargetClass.java
+++ b/butterknife/src/main/java/butterknife/internal/TargetClass.java
@@ -18,16 +18,16 @@ class TargetClass {
     this.targetClass = targetClass;
   }
 
-  void addField(int id, String name, String type) {
-    getTargetView(id).fields.add(new FieldInjection(name, type));
+  void addField(int id, String name, String type, boolean required) {
+    getTargetView(id).fields.add(new FieldInjection(name, type, required));
   }
 
-  boolean addMethod(int id, String name, String parameterType) {
+  boolean addMethod(int id, String name, String parameterType, boolean required) {
     ViewId targetView = getTargetView(id);
     if (targetView.method != null) {
       return false;
     }
-    targetView.method = new MethodInjection(name, parameterType);
+    targetView.method = new MethodInjection(name, parameterType, required);
     return true;
   }
 
@@ -65,9 +65,19 @@ class TargetClass {
     }
     builder.append("    View view;\n");
     for (Map.Entry<Integer, ViewId> entry : viewIdMap.entrySet()) {
-      builder.append("    view = finder.findById(source, ").append(entry.getKey()).append(");\n");
+      int id = entry.getKey();
+      builder.append("    view = finder.findById(source, ").append(id).append(");\n");
       ViewId viewId = entry.getValue();
       for (FieldInjection fieldInjection : viewId.fields) {
+        if (fieldInjection.required) {
+          builder.append("    if (view == null) {\n")
+              .append("      throw new IllegalStateException(\"Required view with id '")
+              .append(id)
+              .append("' for field '")
+              .append(fieldInjection.name)
+              .append("' was not found. If this field binding is optional add '@Optional'.\");\n")
+              .append("    }\n");
+        }
         builder.append("    target.")
             .append(fieldInjection.name)
             .append(" = (")
@@ -76,6 +86,17 @@ class TargetClass {
       }
       MethodInjection method = viewId.method;
       if (method != null) {
+        if (method.required) {
+          builder.append("    if (view == null) {\n")
+              .append("      throw new IllegalStateException(\"Required view with id '")
+              .append(id)
+              .append("' for method '")
+              .append(method.name)
+              .append("' was not found. If this method binding is optional add '@Optional'.\");\n")
+              .append("    }\n");
+        } else {
+          builder.append("    if (view != null) {\n  ");
+        }
         builder.append("    view.setOnClickListener(new View.OnClickListener() {\n")
             .append("      @Override public void onClick(View view) {\n")
             .append("        target.").append(method.name).append("(");
@@ -85,6 +106,9 @@ class TargetClass {
         builder.append(");\n")
             .append("      }\n")
             .append("    });\n");
+        if (!method.required) {
+          builder.append("    }\n");
+        }
       }
     }
     builder.append("  }\n\n");
@@ -117,20 +141,24 @@ class TargetClass {
   static class FieldInjection {
     final String name;
     final String type;
+    final boolean required;
 
-    FieldInjection(String name, String type) {
+    FieldInjection(String name, String type, boolean required) {
       this.name = name;
       this.type = type;
+      this.required = required;
     }
   }
 
   static class MethodInjection {
     final String name;
     final String type;
+    final boolean required;
 
-    MethodInjection(String name, String type) {
+    MethodInjection(String name, String type, boolean required) {
       this.name = name;
       this.type = type;
+      this.required = required;
     }
   }
 }
