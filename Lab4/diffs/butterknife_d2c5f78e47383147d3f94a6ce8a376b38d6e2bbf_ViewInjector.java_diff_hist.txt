diff --git a/butterknife/src/main/java/butterknife/internal/ViewInjector.java b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
index ff4f9c9..fb7239b 100644
--- a/butterknife/src/main/java/butterknife/internal/ViewInjector.java
+++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java
@@ -4,9 +4,11 @@ import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static butterknife.internal.ButterKnifeProcessor.VIEW_TYPE;
 
@@ -29,14 +31,12 @@ final class ViewInjector {
     getOrCreateViewInjection(id).addViewBinding(binding);
   }
 
-  boolean addListener(int id, ListenerClass listener, ListenerMethod method,
+  void addListeners(int[] ids, ListenerClass listener, ListenerMethod method,
       ListenerBinding binding) {
+    for (int id : ids) {
       ViewInjection viewInjection = getOrCreateViewInjection(id);
-    if (viewInjection.hasListenerBinding(listener, method)) {
-      return false;
-    }
       viewInjection.addListenerBinding(listener, method, binding);
-    return true;
+    }
   }
 
   void addCollection(int[] ids, CollectionBinding binding) {
@@ -174,7 +174,7 @@ final class ViewInjector {
   }
 
   private void emitListenerBindings(StringBuilder builder, ViewInjection injection) {
-    Map<ListenerClass, Map<ListenerMethod, ListenerBinding>> bindings =
+    Map<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> bindings =
         injection.getListenerBindings();
     if (bindings.isEmpty()) {
       return;
@@ -189,9 +189,10 @@ final class ViewInjector {
       extraIndent = "  ";
     }
 
-    for (Map.Entry<ListenerClass, Map<ListenerMethod, ListenerBinding>> e : bindings.entrySet()) {
+    for (Map.Entry<ListenerClass, Map<ListenerMethod, Set<ListenerBinding>>> e
+        : bindings.entrySet()) {
       ListenerClass listener = e.getKey();
-      Map<ListenerMethod, ListenerBinding> methodBindings = e.getValue();
+      Map<ListenerMethod, Set<ListenerBinding>> methodBindings = e.getValue();
 
       // Emit: ((OWNER_TYPE) view).SETTER_NAME(
       boolean needsCast = !VIEW_TYPE.equals(listener.targetType());
@@ -259,7 +260,11 @@ final class ViewInjector {
         }
 
         if (methodBindings.containsKey(method)) {
-          ListenerBinding binding = methodBindings.get(method);
+          Set<ListenerBinding> set = methodBindings.get(method);
+          Iterator<ListenerBinding> iterator = set.iterator();
+
+          while (iterator.hasNext()) {
+            ListenerBinding binding = iterator.next();
             builder.append("target.").append(binding.getName()).append('(');
             List<Parameter> parameters = binding.getParameters();
             String[] listenerParameters = method.parameters();
@@ -273,6 +278,10 @@ final class ViewInjector {
               }
             }
             builder.append(");");
+            if (iterator.hasNext()) {
+              builder.append("\n").append("          ");
+            }
+          }
         } else if (hasReturnType) {
           builder.append(method.defaultReturn()).append(';');
         }
