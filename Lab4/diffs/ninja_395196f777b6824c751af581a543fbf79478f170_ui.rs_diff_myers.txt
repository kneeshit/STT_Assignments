diff --git a/openai/src/serve/router/ui.rs b/openai/src/serve/router/ui.rs
index 8f03d50..8ef7052 100644
--- a/openai/src/serve/router/ui.rs
+++ b/openai/src/serve/router/ui.rs
@@ -27,8 +27,7 @@ use serde::{Deserialize, Serialize};
 use serde_json::{json, Value};
 
 use crate::info;
-use crate::serve::api_client;
-use crate::serve::auth_client;
+use crate::serve::env;
 use crate::serve::err;
 use crate::serve::err::ResponseError;
 use crate::serve::header_convert;
@@ -247,7 +246,9 @@ async fn post_login(
         ctx.insert("error", &err.msg());
         return render_template(TEMP_LOGIN, &ctx);
     }
-    match auth_client().do_access_token(&account).await {
+
+    let env = env::ENV_HOLDER.get_instance();
+    match env.load_auth_client().do_access_token(&account).await {
         Ok(access_token) => {
             let authentication_token = AuthenticateToken::try_from(access_token)
                 .map_err(|err| err::ResponseError::InternalServerError(err))?;
@@ -286,7 +287,12 @@ async fn post_login_token(headers: HeaderMap) -> Result<Response<Body>, Response
                 "Get Profile Erorr"
             )))?;
 
-        let session = match auth_client().do_get_user_picture(access_token).await {
+        let env = env::ENV_HOLDER.get_instance();
+        let session = match env
+            .load_auth_client()
+            .do_get_user_picture(access_token)
+            .await
+        {
             Ok(picture) => Session {
                 refresh_token: None,
                 access_token: access_token.to_owned(),
@@ -330,7 +336,8 @@ async fn get_logout(jar: CookieJar) -> Result<Response<Body>, ResponseError> {
         match extract_session(c.value()) {
             Ok(session) => {
                 if let Some(refresh_token) = session.refresh_token {
-                    let _a = auth_client().do_revoke_token(&refresh_token).await;
+                    let env = env::ENV_HOLDER.get_instance();
+                    let _a = env.load_auth_client().do_revoke_token(&refresh_token).await;
                 }
             }
             Err(_) => {}
@@ -500,8 +507,10 @@ async fn get_share_chat(
     if let Some(cookie) = jar.get(SESSION_ID) {
         return match extract_session(cookie.value()) {
             Ok(session) => {
+                let env = env::ENV_HOLDER.get_instance();
                 let url = get_url();
-                let resp = api_client()
+                let resp = env
+                    .load_api_client()
                     .get(format!("{url}/backend-api/share/{share_id}"))
                     .headers(header_convert(headers, jar).await)
                     .bearer_auth(session.access_token)
@@ -596,8 +605,10 @@ async fn get_share_chat_info(
     let share_id = share_id.0.replace(".json", "");
     if let Some(cookie) = jar.get(SESSION_ID) {
         if let Ok(session) = extract_session(cookie.value()) {
+            let env = env::ENV_HOLDER.get_instance();
             let url = get_url();
-            let resp = api_client()
+            let resp = env
+                .load_api_client()
                 .get(format!("{url}/backend-api/share/{share_id}"))
                 .headers(header_convert(headers, jar).await)
                 .bearer_auth(session.access_token)
@@ -675,8 +686,9 @@ async fn get_share_chat_continue_info(
     if let Some(cookie) = jar.get(SESSION_ID) {
         return match extract_session(cookie.value()) {
             Ok(session) => {
+                let env = env::ENV_HOLDER.get_instance();
                 let url = get_url();
-                let resp = api_client()
+                let resp = env.load_api_client()
                 .get(format!("{url}/backend-api/share/{}", share_id.0))
                 .headers(header_convert(headers, jar).await)
                 .bearer_auth(session.access_token)
@@ -779,7 +791,9 @@ async fn get_image(
     let query = params.ok_or(err::ResponseError::BadRequest(anyhow::anyhow!(
         "Missing URL parameter"
     )))?;
-    let resp = api_client().get(&query.url).send().await;
+    let env = env::ENV_HOLDER.get_instance();
+
+    let resp = env.load_api_client().get(&query.url).send().await;
     response_convert(resp)
 }
 
@@ -875,8 +889,9 @@ async fn cf_captcha_check(addr: IpAddr, cf_response: Option<&str>) -> Result<(),
                     remoteip: &addr.to_string(),
                     idempotency_key: crate::uuid::uuid(),
                 };
-
-                let resp = api_client()
+                let env = env::ENV_HOLDER.get_instance();
+                let resp = env
+                    .load_api_client()
                     .post("https://challenges.cloudflare.com/turnstile/v0/siteverify")
                     .form(&form)
                     .send()
