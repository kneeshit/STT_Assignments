diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
index 93e3af5..e5c09b2 100644
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
@@ -37,11 +37,11 @@ public class UnbinderTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");\n"
@@ -64,73 +64,14 @@ public class UnbinderTest {
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
+        + "    Test target = this.target;\n"
         + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.view = null;\n"
         + "    target.view2 = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1.setOnLongClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSource()).that(source)
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(bindingSource);
-  }
-
-  @Test public void unbinderRespectsNullable() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "import butterknife.Optional;\n"
-        + "public class Test extends Activity {\n"
-        + "  @Optional @OnClick(1) void doStuff() {}\n"
-        + "}"
-    );
-
-    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = source.findViewById(1);\n"
-        + "    if (view != null) {\n"
-        + "      view1 = view;\n"
-        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "        @Override\n"
-        + "        public void doClick(View p0) {\n"
-        + "          target.doStuff();\n"
-        + "        }\n"
-        + "      });\n"
-        + "    }\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    if (view1 != null) {\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1 = null;\n"
-        + "    }\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -143,296 +84,6 @@ public class UnbinderTest {
         .generatesSources(bindingSource);
   }
 
-  @Test public void childBindsSecondUnbinder() {
-    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
-        + "  @OnClick(1) void doStuff1() {}\n"
-        + "}"
-    );
-
-    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class TestOne extends Test {\n"
-        + "  @OnClick(1) void doStuff2() {}\n"
-        + "}"
-    );
-
-    JavaFileObject source3 = JavaFileObjects.forSourceString("test.TestTwo", ""
-        + "package test;\n"
-        + "class TestTwo extends Test {}"
-    );
-
-    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(final T target, View source) {\n"
-        + "    super(target, source);\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff2();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  public void unbind() {\n"
-        + "    super.unbind();\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSources()).that(asList(source1, source2, source3))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(binding1Source, binding2Source);
-  }
-
-  @Test public void childUsesOwnUnbinder() {
-    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
-        + "  @OnClick(1) void doStuff1() { }\n"
-        + "}"
-    );
-
-    JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
-        + "package test;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class TestOne extends Test {\n"
-        + "  @OnClick(1) void doStuff2() { }\n"
-        + "}"
-    );
-
-    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.Override;\n"
-        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public TestOne_ViewBinding(final T target, View source) {\n"
-        + "    super(target, source);\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff2();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  public void unbind() {\n"
-        + "    super.unbind();\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    assertAbout(javaSources()).that(asList(source1, source2))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(binding1Source, binding2Source);
-  }
-
-  @Test public void childInDifferentPackage() {
-    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
-        + "package test;\n"
-        + "import android.app.Activity;\n"
-        + "import butterknife.OnClick;\n"
-        + "public class Test extends Activity {\n"
-        + "  @OnClick(1) void doStuff1() { }\n"
-        + "}"
-    );
-
-    JavaFileObject source2 = JavaFileObjects.forSourceString("test.one.TestOne", ""
-        + "package test.one;\n"
-        + "import test.Test;\n"
-        + "import butterknife.OnClick;\n"
-        + "class TestOne extends Test {\n"
-        + "  @OnClick(2) void doStuff2() { }\n"
-        + "}"
-    );
-
-    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
-        + "package test;\n"
-        + "import android.support.annotation.CallSuper;\n"
-        + "import android.support.annotation.UiThread;\n"
-        + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
-        + "import butterknife.internal.Utils;\n"
-        + "import java.lang.IllegalStateException;\n"
-        + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
-        + "  private View view1;\n"
-        + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
-        + "    this.target = target;\n"
-        + "    View view;\n"
-        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
-        + "    view1 = view;\n"
-        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "      @Override\n"
-        + "      public void doClick(View p0) {\n"
-        + "        target.doStuff1();\n"
-        + "      }\n"
-        + "    });\n"
-        + "  }\n"
-        + "  @Override\n"
-        + "  @CallSuper\n"
-        + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    view1.setOnClickListener(null);\n"
-        + "    view1 = null;\n"
-        + "    this.target = null;\n"
-        + "  }\n"
-        + "}"
-    );
-
-    JavaFileObject binding2Source =
-        JavaFileObjects.forSourceString("test/one/TestOne_ViewBinding", ""
-            + "package test.one;\n"
-            + "import android.support.annotation.UiThread;\n"
-            + "import android.view.View;\n"
-            + "import butterknife.internal.DebouncingOnClickListener;\n"
-            + "import butterknife.internal.Utils;\n"
-            + "import java.lang.Override;\n"
-            + "import test.Test_ViewBinding;\n"
-            + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
-            + "  private View view2;\n"
-            + "  @UiThread\n"
-            + "  public TestOne_ViewBinding(final T target, View source) {\n"
-            + "    super(target, source);\n"
-            + "    View view;\n"
-            + "    view = Utils.findRequiredView(source, 2, \"method 'doStuff2'\");\n"
-            + "    view2 = view;\n"
-            + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
-            + "      @Override\n"
-            + "      public void doClick(View p0) {\n"
-            + "        target.doStuff2();\n"
-            + "      }\n"
-            + "    });\n"
-            + "  }\n"
-            + "  @Override\n"
-            + "  public void unbind() {\n"
-            + "    super.unbind();\n"
-            + "    view2.setOnClickListener(null);\n"
-            + "    view2 = null;\n"
-            + "  }\n"
-            + "}"
-        );
-
-    assertAbout(javaSources()).that(asList(source1, source2))
-        .withCompilerOptions("-Xlint:-processing")
-        .processedWith(new ButterKnifeProcessor())
-        .compilesWithoutWarnings()
-        .and()
-        .generatesSources(binding1Source, binding2Source);
-  }
-
   @Test public void unbindingThroughAbstractChild() {
     JavaFileObject source1 = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
@@ -445,7 +96,7 @@ public class UnbinderTest {
 
     JavaFileObject source2 = JavaFileObjects.forSourceString("test.TestOne", ""
         + "package test;\n"
-        + "public class TestOne extends Test {\n"
+        + "public abstract class TestOne extends Test {\n"
         + "}"
     );
 
@@ -467,11 +118,11 @@ public class UnbinderTest {
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(final T target, View source) {\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
@@ -486,10 +137,10 @@ public class UnbinderTest {
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -500,12 +151,15 @@ public class UnbinderTest {
         + "import android.view.View;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class TestTwo_ViewBinding<T extends TestTwo> extends Test_ViewBinding<T> {\n"
+        + "public class TestTwo_ViewBinding extends Test_ViewBinding {\n"
+        + "  private TestTwo target;\n"
         + "  private View view1;\n"
         + "  @UiThread\n"
-        + "  public TestTwo_ViewBinding(final T target, View source) {\n"
+        + "  public TestTwo_ViewBinding(final TestTwo target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
         + "    view1 = view;\n"
@@ -518,9 +172,11 @@ public class UnbinderTest {
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    super.unbind();\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -664,29 +320,24 @@ public class UnbinderTest {
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import java.lang.Deprecated;\n"
-        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class A_ViewBinding<T extends A> implements Unbinder {\n"
-        + "  protected T target;\n"
+        + "public class A_ViewBinding implements Unbinder {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(A, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(A target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
-        + "  public A_ViewBinding(T target, Context context) {\n"
-        + "    this.target = target;\n"
+        + "  public A_ViewBinding(A target, Context context) {\n"
         + "    target.blackColor = ContextCompat.getColor(context, android.R.color.black);\n"
         + "  }\n"
         + "  @Override\n"
         + "  @CallSuper\n"
         + "  public void unbind() {\n"
-        + "    if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "    this.target = null;\n"
         + "  }\n"
         + "}"
     );
@@ -699,18 +350,18 @@ public class UnbinderTest {
         + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import java.lang.Deprecated;\n"
-        + "public class B_ViewBinding<T extends B> extends A_ViewBinding<T> {\n"
+        + "public class B_ViewBinding extends A_ViewBinding {\n"
         + "  /**\n"
-        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n"
+        + "   * @deprecated Use {@link #Test_ViewBinding(B, Context)} for direct creation.\n"
         + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n"
         + "   */\n"
         + "  @Deprecated\n"
         + "  @UiThread\n"
-        + "  public Test_ViewBinding(T target, View source) {\n"
+        + "  public Test_ViewBinding(B target, View source) {\n"
         + "    this(target, source.getContext());\n"
         + "  }\n"
         + "  @UiThread\n"
-        + "  public B_ViewBinding(T target, Context context) {\n"
+        + "  public B_ViewBinding(B target, Context context) {\n"
         + "    super(target, context);\n"
         + "    target.whiteColor = ContextCompat.getColor(context, android.R.color.white);\n"
         + "  }\n"
@@ -725,20 +376,25 @@ public class UnbinderTest {
         + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class C_ViewBinding<T extends C> extends B_ViewBinding<T> {\n"
+        + "public class C_ViewBinding extends B_ViewBinding {\n"
+        + "  private C target;\n"
         + "  @UiThread\n"
-        + "  public C_ViewBinding(T target, View source) {\n"
+        + "  public C_ViewBinding(C target, View source) {\n"
         + "    super(target, source.getContext());\n"
+        + "    this.target = target;\n"
         + "    target.button1 = Utils.findRequiredView(source, android.R.id.button1, \"field 'button1'\");\n"
         + "    Context context = source.getContext();\n"
         + "    target.transparentColor = ContextCompat.getColor(context, android.R.color.transparent);\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    C target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.button1 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -749,9 +405,9 @@ public class UnbinderTest {
         + "import android.support.annotation.UiThread;\n"
         + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
-        + "public class D_ViewBinding<T extends D> extends C_ViewBinding<T> {\n"
+        + "public class D_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
-        + "  public D_ViewBinding(T target, View source) {\n"
+        + "  public D_ViewBinding(D target, View source) {\n"
         + "    super(target, source);\n"
         + "    Context context = source.getContext();\n"
         + "    target.grayColor = ContextCompat.getColor(context, android.R.color.darker_gray);\n"
@@ -765,9 +421,9 @@ public class UnbinderTest {
         + "import android.support.annotation.UiThread;\n"
         + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
-        + "public class E_ViewBinding<T extends E> extends C_ViewBinding<T> {\n"
+        + "public class E_ViewBinding extends C_ViewBinding {\n"
         + "  @UiThread\n"
-        + "  public E_ViewBinding(T target, View source) {\n"
+        + "  public E_ViewBinding(E target, View source) {\n"
         + "    super(target, source);\n"
         + "    Context context = source.getContext();\n"
         + "    target.backgroundDarkColor = ContextCompat.getColor(context, android.R.color.background_dark);\n"
@@ -781,9 +437,9 @@ public class UnbinderTest {
         + "import android.support.annotation.UiThread;\n"
         + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
-        + "public class F_ViewBinding<T extends F> extends D_ViewBinding<T> {\n"
+        + "public class F_ViewBinding extends D_ViewBinding {\n"
         + "  @UiThread\n"
-        + "  public F_ViewBinding(T target, View source) {\n"
+        + "  public F_ViewBinding(F target, View source) {\n"
         + "    super(target, source);\n"
         + "    Context context = source.getContext();\n"
         + "    target.backgroundLightColor = ContextCompat.getColor(context, android.R.color.background_light);\n"
@@ -799,12 +455,15 @@ public class UnbinderTest {
         + "import android.view.View;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class G_ViewBinding<T extends G> extends E_ViewBinding<T> {\n"
+        + "public class G_ViewBinding extends E_ViewBinding {\n"
+        + "  private G target;\n"
         + "  private View view16908290;\n"
         + "  @UiThread\n"
-        + "  public G_ViewBinding(final T target, View source) {\n"
+        + "  public G_ViewBinding(final G target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    View view;\n"
         + "    target.button2 = Utils.findRequiredView(source, android.R.id.button2, \"field 'button2'\");\n"
         + "    view = Utils.findRequiredView(source, android.R.id.content, \"method 'onClick'\");\n"
@@ -820,11 +479,13 @@ public class UnbinderTest {
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    G target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null\n"
         + "    target.button2 = null;\n"
         + "    view16908290.setOnClickListener(null);\n"
         + "    view16908290 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
@@ -836,20 +497,25 @@ public class UnbinderTest {
         + "import android.support.v4.content.ContextCompat;\n"
         + "import android.view.View;\n"
         + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Override;\n"
-        + "public class H_ViewBinding<T extends H> extends G_ViewBinding<T> {\n"
+        + "public class H_ViewBinding extends G_ViewBinding {\n"
+        + "  private H target;\n"
         + "  @UiThread\n"
-        + "  public H_ViewBinding(T target, View source) {\n"
+        + "  public H_ViewBinding(H target, View source) {\n"
         + "    super(target, source);\n"
+        + "    this.target = target;\n"
         + "    target.button3 = Utils.findRequiredView(source, android.R.id.button3, \"field 'button3'\");\n"
         + "    Context context = source.getContext();\n"
         + "    target.grayColor = ContextCompat.getColor(context, android.R.color.primary_text_dark);\n"
         + "  }\n"
         + "  @Override\n"
         + "  public void unbind() {\n"
-        + "    T target = this.target;\n"
-        + "    super.unbind();\n"
+        + "    H target = this.target;\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    this.target = null;\n"
         + "    target.button3 = null;\n"
+        + "    super.unbind();\n"
         + "  }\n"
         + "}"
     );
