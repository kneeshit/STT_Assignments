diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
index 7213781..868e3bc 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldResourceBinding.java
@@ -1,14 +1,14 @@
 package butterknife.compiler;
 
+import android.support.annotation.Nullable;
+import com.google.common.collect.ImmutableList;
+import com.google.errorprone.annotations.Immutable;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import static java.util.Collections.singletonList;
-import static java.util.Collections.unmodifiableList;
-
 final class FieldResourceBinding implements ResourceBinding {
   enum Type {
     BITMAP(new ResourceMethod(BindingSet.BITMAP_FACTORY, "decodeResource", true, 1)),
@@ -32,18 +32,18 @@ final class FieldResourceBinding implements ResourceBinding {
     TEXT_ARRAY("getTextArray"),
     TYPED_ARRAY("obtainTypedArray");
 
-    private final List<ResourceMethod> methods;
+    private final ImmutableList<ResourceMethod> methods;
 
     Type(ResourceMethod... methods) {
       List<ResourceMethod> methodList = new ArrayList<>(methods.length);
       Collections.addAll(methodList, methods);
       Collections.sort(methodList);
       Collections.reverse(methodList);
-      this.methods = unmodifiableList(methodList);
+      this.methods = ImmutableList.copyOf(methodList);
     }
 
     Type(String methodName) {
-      methods = singletonList(new ResourceMethod(null, methodName, true, 1));
+      methods = ImmutableList.of(new ResourceMethod(null, methodName, true, 1));
     }
 
     ResourceMethod methodForSdk(int sdk) {
@@ -56,13 +56,15 @@ final class FieldResourceBinding implements ResourceBinding {
     }
   }
 
+  @Immutable
   static final class ResourceMethod implements Comparable<ResourceMethod> {
-    final ClassName typeName;
+    @SuppressWarnings("Immutable")
+    final @Nullable ClassName typeName;
     final String name;
     final boolean requiresResources;
     final int sdk;
 
-    ResourceMethod(ClassName typeName, String name, boolean requiresResources, int sdk) {
+    ResourceMethod(@Nullable ClassName typeName, String name, boolean requiresResources, int sdk) {
       this.typeName = typeName;
       this.name = name;
       this.requiresResources = requiresResources;
