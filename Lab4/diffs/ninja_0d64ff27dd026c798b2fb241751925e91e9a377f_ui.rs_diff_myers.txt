diff --git a/openai/src/serve/router/ui.rs b/openai/src/serve/router/ui.rs
index fcac913..217177c 100644
--- a/openai/src/serve/router/ui.rs
+++ b/openai/src/serve/router/ui.rs
@@ -8,6 +8,8 @@ use axum::body::Body;
 use axum::extract::ConnectInfo;
 use axum::extract::Path;
 use axum::extract::Query;
+use axum::headers::authorization::Bearer;
+use axum::headers::Authorization;
 use axum::http::header;
 use axum::http::HeaderMap;
 use axum::http::Response;
@@ -15,6 +17,7 @@ use axum::response::IntoResponse;
 use axum::routing::any;
 use axum::routing::{get, post};
 use axum::Router;
+use axum::TypedHeader;
 use axum_extra::extract::cookie;
 use axum_extra::extract::CookieJar;
 
@@ -280,10 +283,16 @@ async fn post_login(
     }
 }
 
-async fn post_login_token(headers: HeaderMap) -> Result<Response<Body>, ResponseError> {
-    if let Some(token) = headers.get(header::AUTHORIZATION) {
-        let access_token = token.to_str().unwrap_or_default();
-        let profile = crate::token::check(access_token)
+async fn post_login_token(
+    TypedHeader(bearer): TypedHeader<Authorization<Bearer>>,
+) -> Result<Response<Body>, ResponseError> {
+    let access_token = bearer.token();
+
+    if access_token.is_empty() {
+        return redirect_login();
+    }
+
+    let profile = crate::token::check(bearer.token())
         .map_err(|err| ResponseError::Unauthorized(err))?
         .ok_or(ResponseError::InternalServerError(anyhow!(
             "Get Profile Erorr"
@@ -329,8 +338,6 @@ async fn post_login_token(headers: HeaderMap) -> Result<Response<Body>, Response
         .body(Body::empty())
         .map_err(|err| ResponseError::InternalServerError(err))?);
 }
-    redirect_login()
-}
 
 async fn get_logout(jar: CookieJar) -> Result<Response<Body>, ResponseError> {
     if let Some(c) = jar.get(SESSION_ID) {
