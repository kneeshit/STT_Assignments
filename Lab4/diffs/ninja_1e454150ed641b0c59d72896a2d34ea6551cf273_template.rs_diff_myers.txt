diff --git a/openai/src/serve/template.rs b/openai/src/serve/template.rs
index 318126f..2d43e38 100644
--- a/openai/src/serve/template.rs
+++ b/openai/src/serve/template.rs
@@ -15,10 +15,10 @@ use crate::auth;
 include!(concat!(env!("OUT_DIR"), "/generated.rs"));
 
 const SESSION_ID: &str = "opengpt_session";
-const BUILD_ID: &str = "cx416mT2Lb0ZTj5FxFg1l";
-const TEMP_404: &str = "404.html";
-const TEMP_AUTH: &str = "auth.html";
-const TEMP_CHAT: &str = "chat.html";
+const BUILD_ID: &str = "WLHd8p-1ysAW_5sZZPJIy";
+const TEMP_404: &str = "404.htm";
+const TEMP_AUTH: &str = "auth.htm";
+const TEMP_CHAT: &str = "chat.htm";
 const TEMP_DETAIL: &str = "detail.html";
 const TEMP_LOGIN: &str = "login.html";
 const TEMP_SHARE: &str = "share.html";
@@ -51,11 +51,11 @@ async fn get_static_resource(
 pub fn config(cfg: &mut web::ServiceConfig) {
     let mut tera = tera::Tera::default();
     tera.add_raw_templates(vec![
-        (TEMP_404, include_str!("../../templates/404.html")),
-        (TEMP_AUTH, include_str!("../../templates/auth.html")),
+        (TEMP_404, include_str!("../../templates/404.htm")),
+        (TEMP_AUTH, include_str!("../../templates/auth.htm")),
         (TEMP_LOGIN, include_str!("../../templates/login.html")),
-        (TEMP_CHAT, include_str!("../../templates/chat.html")),
-        (TEMP_DETAIL, include_str!("../../templates/detail.html")),
+        (TEMP_CHAT, include_str!("../../templates/chat.htm")),
+        (TEMP_DETAIL, include_str!("../../templates/detail.htm")),
         (TEMP_SHARE, include_str!("../../templates/share.html")),
     ])
     .expect("The static template failed to load");
@@ -65,7 +65,7 @@ pub fn config(cfg: &mut web::ServiceConfig) {
         .route("/login", web::get().to(get_login))
         .route("/login", web::post().to(post_login))
         .route("/auth/logout", web::get().to(get_logout))
-        .route("/auth/session", web::get().to(get_session))
+        .route("/api/auth/session", web::get().to(get_session))
         .route(
             "/auth/accounts/check/v4-2023-04-27",
             web::get().to(get_account_check),
@@ -104,162 +104,15 @@ async fn get_auth(tmpl: web::Data<tera::Tera>) -> Result<HttpResponse> {
     render_template(tmpl, TEMP_SHARE, &tera::Context::new())
 }
 
-async fn get_chat(
-    tmpl: web::Data<tera::Tera>,
-    req: HttpRequest,
-    conversation_id: Option<web::Path<String>>,
-    mut query: web::Query<HashMap<String, String>>,
-) -> Result<HttpResponse> {
-    match req.cookie(SESSION_ID) {
-        Some(cookie) => match crate::token::verify_access_token(cookie.value()).await {
-            Ok(token_profile) => {
-                let profile =
-                    token_profile.ok_or(error::ErrorInternalServerError("Get Profile Error"))?;
-                let (template_name, path) = match conversation_id {
-                    Some(conversation_id) => {
-                        query.insert("chatId".to_string(), conversation_id.into_inner());
-                        (TEMP_DETAIL, "/c/[chatId]")
-                    }
-                    None => (TEMP_CHAT, "/"),
-                };
-                let props = serde_json::json!({
-                    "props": {
-                        "pageProps": {
-                            "user": {
-                                "id": profile.user_id(),
-                                "name": profile.email(),
-                                "email": profile.email(),
-                                "image": None::<String>,
-                                "picture": None::<String>,
-                                "groups": [],
-                            },
-                            "serviceStatus": {},
-                            "userCountry": "US",
-                            "geoOk": true,
-                            "serviceAnnouncement": {
-                                "paid": {},
-                                "public": {}
-                            },
-                            "isUserInCanPayGroup": true
-                        },
-                        "__N_SSP": true
-                    },
-                    "page": path,
-                    "query": query.into_inner(),
-                    "buildId": BUILD_ID,
-                    "isFallback": false,
-                    "gssp": true,
-                    "scriptLoader": []
-                });
-                let mut ctx = tera::Context::new();
-                ctx.insert(
-                    "props",
-                    &serde_json::to_string(&props)
-                        .map_err(|e| error::ErrorInternalServerError(e.to_string()))?,
-                );
-                render_template(tmpl, template_name, &ctx)
-            }
-            Err(_) => redirect_login(),
-        },
-        None => redirect_login(),
-    }
-}
-
-async fn get_chat_info(req: HttpRequest) -> Result<HttpResponse> {
-    match req.cookie(SESSION_ID) {
-        Some(cookie) => match crate::token::verify_access_token(cookie.value()).await {
-            Ok(token_profile) => {
-                let profile =
-                    token_profile.ok_or(error::ErrorInternalServerError("Get Profile Erorr"))?;
-                let body = serde_json::json!({
-                    "pageProps": {
-                        "user": {
-                            "id": profile.user_id(),
-                            "name": profile.email(),
-                            "email": profile.email(),
-                            "image": "",
-                            "picture": "",
-                            "groups": [],
-                        },
-                        "serviceStatus": {},
-                        "userCountry": "US",
-                        "geoOk": true,
-                        "serviceAnnouncement": {
-                            "paid": {},
-                            "public": {}
-                        },
-                        "isUserInCanPayGroup": true
-                    },
-                    "__N_SSP": true
-                });
-
-                Ok(HttpResponse::Ok().json(body))
-            }
-            Err(_) => {
-                let body = serde_json::json!(
-                    {"pageProps": {"__N_REDIRECT": "/auth/login?", "__N_REDIRECT_STATUS": 307}, "__N_SSP": true}
-                );
-                Ok(HttpResponse::Ok().json(body))
-            }
-        },
-        None => redirect_login(),
-    }
-}
-
-async fn get_share_chat(
-    tmpl: web::Data<tera::Tera>,
-    req: HttpRequest,
-    mut query: web::Query<HashMap<String, String>>,
-    share_id: web::Path<String>,
-) -> Result<HttpResponse> {
-    let share_id = share_id.into_inner();
-    match req.cookie(SESSION_ID) {
-        Some(cookie) => match crate::token::verify_access_token(cookie.value()).await {
-            Ok(_) => {
-                query.insert("chatId".to_string(), share_id);
-                let props = serde_json::json!({
-                    "props": {
-                        "pageProps": {"statusCode": 404}
-                    },
-                    "page": "/_error",
-                    "query": {},
-                    "buildId": BUILD_ID,
-                    "nextExport": true,
-                    "isFallback": false,
-                    "gip": true,
-                    "scriptLoader": []
-                });
-
-                let mut ctx = tera::Context::new();
-                ctx.insert("props", &props.to_string());
-                render_template(tmpl, TEMP_SHARE, &ctx)
-            }
-            Err(_) => Ok(HttpResponse::Found()
-                .insert_header((
-                    header::LOCATION,
-                    format!("/login?next=%2Fshare%2F{share_id}"),
-                ))
-                .finish()),
-        },
-        None => redirect_login(),
-    }
-}
-
 async fn get_login(
     tmpl: web::Data<tera::Tera>,
     query: web::Query<HashMap<String, String>>,
-) -> impl Responder {
+) -> Result<HttpResponse> {
     let mut ctx = tera::Context::new();
     ctx.insert("next", query.get("next").unwrap_or(&"".to_owned()));
     ctx.insert("error", "");
     ctx.insert("username", "");
-    let tm = tmpl
-        .render("login.html", &ctx)
-        .map_err(|e| error::ErrorInternalServerError(e.to_string()))
-        .unwrap();
-    HttpResponse::Ok()
-        .content_type(header::ContentType::html())
-        .body(tm)
+    render_template(tmpl, TEMP_LOGIN, &ctx)
 }
 
 async fn post_login(
@@ -271,7 +124,7 @@ async fn post_login(
     let next = query.get("next").unwrap_or(&default_next);
     let account = account.into_inner();
     match super::oauth_client().do_access_token(&account).await {
-        Ok(access_token) => HttpResponse::Found()
+        Ok(access_token) => HttpResponse::SeeOther()
             .append_header((header::LOCATION, next.as_str()))
             .cookie(
                 Cookie::build(SESSION_ID, access_token.access_token)
@@ -301,7 +154,7 @@ async fn login_token(req: HttpRequest) -> Result<HttpResponse> {
                 Ok(token_profile) => {
                     let profile = token_profile
                         .ok_or(error::ErrorInternalServerError("Get Profile Erorr"))?;
-                    Ok(HttpResponse::Found()
+                    Ok(HttpResponse::SeeOther()
                         .insert_header((header::LOCATION, "/"))
                         .cookie(
                             Cookie::build(SESSION_ID, token.to_str().unwrap())
@@ -328,7 +181,7 @@ async fn get_logout(req: HttpRequest) -> impl Responder {
         }
         None => {}
     }
-    HttpResponse::Found()
+    HttpResponse::SeeOther()
         .cookie(
             Cookie::build(SESSION_ID, "")
                 .path("/")
@@ -439,7 +292,148 @@ async fn get_account_check() -> impl Responder {
     HttpResponse::Ok().json(res)
 }
 
-async fn error_404(tmpl: web::Data<tera::Tera>) -> impl Responder {
+async fn get_chat(
+    tmpl: web::Data<tera::Tera>,
+    req: HttpRequest,
+    conversation_id: Option<web::Path<String>>,
+    mut query: web::Query<HashMap<String, String>>,
+) -> Result<HttpResponse> {
+    match req.cookie(SESSION_ID) {
+        Some(cookie) => match crate::token::verify_access_token(cookie.value()).await {
+            Ok(token_profile) => {
+                let profile =
+                    token_profile.ok_or(error::ErrorInternalServerError("Get Profile Error"))?;
+                let (template_name, path) = match conversation_id {
+                    Some(conversation_id) => {
+                        query.insert("chatId".to_string(), conversation_id.into_inner());
+                        (TEMP_DETAIL, "/c/[chatId]")
+                    }
+                    None => (TEMP_CHAT, "/"),
+                };
+                let props = serde_json::json!({
+                    "props": {
+                        "pageProps": {
+                            "user": {
+                                "id": profile.user_id(),
+                                "name": profile.email(),
+                                "email": profile.email(),
+                                "image": None::<String>,
+                                "picture": None::<String>,
+                                "groups": [],
+                            },
+                            "serviceStatus": {},
+                            "userCountry": "US",
+                            "geoOk": true,
+                            "serviceAnnouncement": {
+                                "paid": {},
+                                "public": {}
+                            },
+                            "isUserInCanPayGroup": true
+                        },
+                        "__N_SSP": true
+                    },
+                    "page": path,
+                    "query": query.into_inner(),
+                    "buildId": BUILD_ID,
+                    "isFallback": false,
+                    "gssp": true,
+                    "scriptLoader": []
+                });
+                let mut ctx = tera::Context::new();
+                ctx.insert(
+                    "props",
+                    &serde_json::to_string(&props)
+                        .map_err(|e| error::ErrorInternalServerError(e.to_string()))?,
+                );
+                render_template(tmpl, template_name, &ctx)
+            }
+            Err(_) => redirect_login(),
+        },
+        None => redirect_login(),
+    }
+}
+
+async fn get_chat_info(req: HttpRequest) -> Result<HttpResponse> {
+    match req.cookie(SESSION_ID) {
+        Some(cookie) => match crate::token::verify_access_token(cookie.value()).await {
+            Ok(token_profile) => {
+                let profile =
+                    token_profile.ok_or(error::ErrorInternalServerError("Get Profile Erorr"))?;
+                let body = serde_json::json!({
+                    "pageProps": {
+                        "user": {
+                            "id": profile.user_id(),
+                            "name": profile.email(),
+                            "email": profile.email(),
+                            "image": "",
+                            "picture": "",
+                            "groups": [],
+                        },
+                        "serviceStatus": {},
+                        "userCountry": "US",
+                        "geoOk": true,
+                        "serviceAnnouncement": {
+                            "paid": {},
+                            "public": {}
+                        },
+                        "isUserInCanPayGroup": true
+                    },
+                    "__N_SSP": true
+                });
+
+                Ok(HttpResponse::Ok().json(body))
+            }
+            Err(_) => {
+                let body = serde_json::json!(
+                    {"pageProps": {"__N_REDIRECT": "/auth/login?", "__N_REDIRECT_STATUS": 307}, "__N_SSP": true}
+                );
+                Ok(HttpResponse::Ok().json(body))
+            }
+        },
+        None => redirect_login(),
+    }
+}
+
+async fn get_share_chat(
+    tmpl: web::Data<tera::Tera>,
+    req: HttpRequest,
+    mut query: web::Query<HashMap<String, String>>,
+    share_id: web::Path<String>,
+) -> Result<HttpResponse> {
+    let share_id = share_id.into_inner();
+    match req.cookie(SESSION_ID) {
+        Some(cookie) => match crate::token::verify_access_token(cookie.value()).await {
+            Ok(_) => {
+                query.insert("chatId".to_string(), share_id);
+                let props = serde_json::json!({
+                    "props": {
+                        "pageProps": {"statusCode": 404}
+                    },
+                    "page": "/_error",
+                    "query": {},
+                    "buildId": BUILD_ID,
+                    "nextExport": true,
+                    "isFallback": false,
+                    "gip": true,
+                    "scriptLoader": []
+                });
+
+                let mut ctx = tera::Context::new();
+                ctx.insert("props", &props.to_string());
+                render_template(tmpl, TEMP_SHARE, &ctx)
+            }
+            Err(_) => Ok(HttpResponse::Found()
+                .insert_header((
+                    header::LOCATION,
+                    format!("/login?next=%2Fshare%2F{share_id}"),
+                ))
+                .finish()),
+        },
+        None => redirect_login(),
+    }
+}
+
+async fn error_404(tmpl: web::Data<tera::Tera>) -> Result<HttpResponse> {
     let mut ctx = tera::Context::new();
     let props = json!(
         {
@@ -455,14 +449,12 @@ async fn error_404(tmpl: web::Data<tera::Tera>) -> impl Responder {
             "scriptLoader": []
         }
     );
-    ctx.insert("props", &props);
-    let tm = tmpl
-        .render(TEMP_404, &ctx)
-        .map_err(|e| error::ErrorInternalServerError(e.to_string()))
-        .unwrap();
-    HttpResponse::Ok()
-        .content_type(header::ContentType::html())
-        .body(tm)
+    ctx.insert(
+        "props",
+        &serde_json::to_string(&props)
+            .map_err(|e| error::ErrorInternalServerError(e.to_string()))?,
+    );
+    render_template(tmpl, TEMP_404, &ctx)
 }
 
 fn redirect_login() -> Result<HttpResponse> {
