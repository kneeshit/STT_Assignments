diff --git a/openai/src/arkose/funcaptcha/yescaptcha.rs b/openai/src/arkose/funcaptcha/yescaptcha.rs
index e0886b1..6a64a3c 100644
--- a/openai/src/arkose/funcaptcha/yescaptcha.rs
+++ b/openai/src/arkose/funcaptcha/yescaptcha.rs
@@ -1,12 +1,11 @@
 use anyhow::Context;
 use serde::{Deserialize, Serialize};
-use serde_json::json;
 
 use crate::{arkose::CLIENT_HOLDER, debug};
 
-#[derive(Serialize, Deserialize, Default, Debug)]
+#[derive(Deserialize, Default, Debug)]
 #[serde(default)]
-struct Task {
+struct TaskResp {
     #[serde(rename = "errorId")]
     error_id: i32,
     #[serde(rename = "errorCode")]
@@ -14,29 +13,50 @@ struct Task {
     #[serde(rename = "errorDescription")]
     error_description: Option<String>,
     status: String,
-    solution: Solution,
+    solution: SolutionResp,
     #[serde(rename = "taskId")]
     task_id: String,
 }
 
-#[derive(Serialize, Deserialize, Default, Debug)]
+#[derive(Deserialize, Default, Debug)]
 #[serde(default)]
-struct Solution {
+struct SolutionResp {
     objects: Vec<i32>,
     labels: Vec<String>,
 }
 
-pub async fn valid(client_key: &str, image_as_base64: &str, question: &str) -> anyhow::Result<i32> {
-    let body = json!(
-        {
-            "clientKey": client_key,
-            "task": {
-                "type": "FunCaptchaClassification",
-                "image": image_as_base64,
-                "question": question
+#[derive(Serialize, Debug)]
+struct ReqBody<'a> {
+    #[serde(rename = "clientKey")]
+    client_key: &'a str,
+    task: ReqTask<'a>,
+    #[serde(rename = "softID")]
+    soft_id: &'static str,
 }
+
+#[derive(Serialize, Debug)]
+struct ReqTask<'a> {
+    #[serde(rename = "type")]
+    type_field: &'static str,
+    image: &'a str,
+    question: &'a str,
 }
-    );
+
+pub async fn submit_task(
+    client_key: &str,
+    image_as_base64: &str,
+    question: &str,
+) -> anyhow::Result<i32> {
+    let body = ReqBody {
+        client_key,
+        task: ReqTask {
+            type_field: "FunCaptchaClassification",
+            image: &image_as_base64,
+            question: &question,
+        },
+        soft_id: "26299",
+    };
+
     let client = CLIENT_HOLDER.get_instance();
     let resp = client
         .post("https://api.yescaptcha.com/createTask")
@@ -45,14 +65,14 @@ pub async fn valid(client_key: &str, image_as_base64: &str, question: &str) -> a
         .await?;
 
     if resp.status().is_success() {
-        let task = resp.json::<Task>().await?;
+        let task = resp.json::<TaskResp>().await?;
         debug!("yescaptcha task: {task:#?}");
         if let Some(error_description) = task.error_description {
             anyhow::bail!(format!("yescaptcha task error:{error_description}"))
         }
         let target = task.solution.objects;
         return match target.is_empty() {
-            true => Ok(-1),
+            true => Ok(0),
             false => Ok(target.get(0).context("funcaptcha valid error")?.clone()),
         };
     }
