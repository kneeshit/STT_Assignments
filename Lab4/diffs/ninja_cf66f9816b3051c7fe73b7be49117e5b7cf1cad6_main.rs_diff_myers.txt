diff --git a/src/main.rs b/src/main.rs
index 7b128b3..4f5e12d 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,65 +1,99 @@
 use anyhow::Context;
 use clap::{Parser, Subcommand};
+use openai::serve::ConfigBuilder;
 use std::{io::Write, path::PathBuf, sync::Once};
 
+pub mod account;
+pub mod prompt;
 pub mod util;
 
-#[derive(Parser, Debug)]
-#[clap(author, version, about, arg_required_else_help = true)]
+#[derive(Parser)]
+#[clap(author, version, about)]
 struct Opt {
     /// Enable debug
     #[clap(long, global = true, env = "OPENGPT_DEBUG", value_parser = initialize_log)]
     debug: bool,
 
-    /// OpenAI gpt-3.5-turbo chat api, Note: OpenAI will bill you
-    #[clap(short, long, env = "OPENGPT_TURBO")]
-    turbo: bool,
-
-    /// OpenAI account email, Format: example@gmail.com
-    #[arg(short = 'E', long, env = "OPENGPT_EMAIL", requires = "password")]
-    email: Option<String>,
-
-    /// OpenAI account password
-    #[arg(short = 'W', long, env = "OPENGPT_PASSWORD", requires = "email")]
-    password: Option<String>,
-
-    /// Server Listen host
-    #[clap(short = 'H', long, default_value = "0.0.0.0", value_parser = parse_host, requires = "port")]
-    host: Option<std::net::IpAddr>,
-
-    /// Server Listen port
-    #[clap(short = 'P', long, default_value = "7999", value_parser = parse_port_in_range, requires = "host")]
-    port: Option<u16>,
-
     #[clap(subcommand)]
     command: Option<SubCommands>,
 }
 
-#[derive(Subcommand, Debug)]
+#[derive(Subcommand)]
 enum SubCommands {
-    /// Setting configuration
+    /// Start the http server
+    Serve {
+        /// Server Listen host
+        #[clap(short = 'H', long, env = "OPENGPT_HOST", default_value = "0.0.0.0", value_parser = parse_host)]
+        host: Option<std::net::IpAddr>,
+        /// Server Listen port
+        #[clap(short = 'P', long, env = "OPENGPT_PORT", default_value = "7999", value_parser = parse_port_in_range)]
+        port: Option<u16>,
+        /// Server worker-pool size (Recommended number of CPU cores)
+        #[clap(short, long, env = "OPENGPT_WORKERS", default_value = "1")]
+        workers: Option<usize>,
+        /// TLS certificate file path
+        #[clap(long, env = "OPENGPT_TLS_CERT", requires = "tls_key")]
+        tls_cert: Option<PathBuf>,
+        /// TLS private key file path
+        #[clap(long, env = "OPENGPT_TLS_KEY", requires = "tls_cert")]
+        tls_key: Option<PathBuf>,
+    },
+    /// Account configuration settings
+    Account,
+    /// Configuration Settings
     Config {
         /// Working directory, refresh_token will be stored in there if specified
         #[clap(short, long, env = "OPENGPT_WORKDIR")]
         workdir: Option<PathBuf>,
 
-        /// Unofficial API prefix, Format: https://example.com/backend-api
-        #[clap(short, long, env = "OPENGPT_API")]
+        /// Unofficial API prefix. Format: https://example.com/backend-api
+        #[clap(long, env = "OPENGPT_API")]
         unofficial_api: Option<String>,
 
-        /// HTTP Proxy. Format: protocol://user:pass@ip:port
-        #[clap(short, long, env = "OPENGPT_PROXY", value_parser = parse_proxy_url)]
-        proxy: Option<url::Url>,
+        /// Unofficial API http proxy. Format: protocol://user:pass@ip:port
+        #[clap(long, env = "OPENGPT_PROXY", value_parser = parse_proxy_url)]
+        unofficial_proxy: Option<url::Url>,
     },
 }
 
 #[tokio::main]
 async fn main() -> anyhow::Result<()> {
     let _opt = Opt::parse();
+    match _opt.command {
+        Some(command) => match command {
+            SubCommands::Account => {
+                prompt::account_prompt()?;
+            }
+            SubCommands::Config {
+                workdir,
+                unofficial_api,
+                unofficial_proxy,
+            } => {
+
+            },
+            SubCommands::Serve {
+                host,
+                port,
+                workers,
+                tls_cert,
+                tls_key,
+            } => {
+                let conf = ConfigBuilder::default()
+                    .host(host.unwrap())
+                    .port(port.unwrap())
+                    .workers(workers.unwrap())
+                    .tls_cert(tls_cert)
+                    .tls_key(tls_key)
+                    .build()?;
+                openai::serve::run(conf).await?
+            }
+        },
+        None => prompt::main_prompt()?,
+    }
     Ok(())
 }
 
-static INIT: Once = Once::new();
+pub(crate) static ONCE_INIT: Once = Once::new();
 
 fn initialize_log(s: &str) -> anyhow::Result<bool> {
     let debug = s.parse::<bool>()?;
@@ -67,7 +101,7 @@ fn initialize_log(s: &str) -> anyhow::Result<bool> {
         true => std::env::set_var("RUST_LOG", "DEBUG"),
         false => std::env::set_var("RUST_LOG", "INFO"),
     };
-    INIT.call_once(|| {
+    ONCE_INIT.call_once(|| {
         env_logger::builder()
             .format(|buf, record| {
                 writeln!(
