diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index d72b63a..bffc751 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -61,11 +61,11 @@ class ButterKnifePlugin : Plugin<Project> {
       val rPackage = getPackageName(variant)
       val once = AtomicBoolean()
       variant.outputs.all { output ->
-        val processResources = output.processResources
-
         // Though there might be multiple outputs, their R files are all the same. Thus, we only
         // need to configure the task once with the R.java input and action.
         if (once.compareAndSet(false, true)) {
+          val processResources = output.processResourcesProvider.get() // TODO lazy
+
           // TODO: switch to better API once exists in AGP (https://issuetracker.google.com/118668005)
           val rFile =
               project.files(
@@ -73,16 +73,16 @@ class ButterKnifePlugin : Plugin<Project> {
                     is GenerateLibraryRFileTask -> processResources.textSymbolOutputFile
                     is LinkApplicationAndroidResourcesTask -> processResources.textSymbolOutputFile
                     else -> throw RuntimeException(
-                        "Minimum supported Android Gradle Plugin is 3.1.0")
+                        "Minimum supported Android Gradle Plugin is 3.3.0")
                   })
                   .builtBy(processResources)
-          project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {
+          val generate = project.tasks.create("generate${variant.name.capitalize()}R2", R2Generator::class.java) {
             it.outputDir = outputDir
             it.rFile = rFile
             it.packageName = rPackage
             it.className = "R2"
-            variant.registerJavaGeneratingTask(it, outputDir)
           }
+          variant.registerJavaGeneratingTask(generate, outputDir)
         }
       }
     }
