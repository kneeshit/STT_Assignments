diff --git a/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
index fba1909..06e3701 100644
--- a/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
+++ b/butterknife-runtime/src/test/java/butterknife/OnTouchTest.java
@@ -65,7 +65,64 @@ public class OnTouchTest {
         .generatesSources(bindingSource);
   }
 
-  @Test public void failsMultipleListenersWithReturnValue() throws Exception {
+  @Test public void defaultReturnValue() {
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import butterknife.OnTouch;\n"
+        + "public class Test {\n"
+        + "  @OnTouch(1) void doStuff() {}\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
+        + "package test;\n"
+        + "import android.annotation.SuppressLint;\n"
+        + "import android.view.MotionEvent;\n"
+        + "import android.view.View;\n"
+        + "import androidx.annotation.CallSuper;\n"
+        + "import androidx.annotation.UiThread;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.IllegalStateException;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinding implements Unbinder {\n"
+        + "  private Test target;\n"
+        + "  private View view1;\n"
+        + "  @UiThread\n"
+        + "  @SuppressLint(\"ClickableViewAccessibility\")\n"
+        + "  public Test_ViewBinding(final Test target, View source) {\n"
+        + "    this.target = target;\n"
+        + "    View view;\n"
+        + "    view = Utils.findRequiredView(source, 1, \"method 'doStuff'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnTouchListener(new View.OnTouchListener() {\n"
+        + "      @Override\n"
+        + "      public boolean onTouch(View p0, MotionEvent p1) {\n"
+        + "        target.doStuff();\n"
+        + "        return true;\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  @CallSuper\n"
+        + "  public void unbind() {\n"
+        + "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
+        + "    target = null;\n"
+        + "    view1.setOnTouchListener(null);\n"
+        + "    view1 = null;\n"
+        + "  }\n"
+        + "}"
+    );
+
+    assertAbout(javaSource()).that(source)
+        .withCompilerOptions("-Xlint:-processing")
+        .processedWith(new ButterKnifeProcessor())
+        .compilesWithoutWarnings()
+        .and()
+        .generatesSources(bindingSource);
+  }
+
+  @Test public void failsMultipleListenersWithReturnValue() {
     JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
         + "package test;\n"
         + "import butterknife.OnTouch;\n"
