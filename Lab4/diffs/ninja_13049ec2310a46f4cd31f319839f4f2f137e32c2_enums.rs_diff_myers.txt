diff --git a/src/inter/enums.rs b/src/inter/enums.rs
index 0261212..0414c8e 100644
--- a/src/inter/enums.rs
+++ b/src/inter/enums.rs
@@ -1,8 +1,6 @@
 use std::fmt::{Display, Formatter};
 
 #[derive(Debug, Copy, Clone)]
-#[allow(clippy::upper_case_acronyms)]
-#[allow(non_camel_case_types)]
 pub enum Usage {
     ChatGPT,
     API,
@@ -29,10 +27,39 @@ impl Display for Usage {
         match self {
             Usage::API => write!(f, "{self:?}           - Turbo API interactive conversation"),
             Usage::ChatGPT => write!(f, "{self:?}       - ChatGPT API interactive conversation"),
-            Usage::Dashboard => write!(f, "{self:?}     - Dashboard settings"),
-            Usage::OAuth => write!(f, "{self:?}         - OAuth authorization settings"),
-            Usage::Configuration => write!(f, "{self:?} - API configuration settings"),
+            Usage::Dashboard => write!(f, "{self:?}     - Dashboard Manager"),
+            Usage::OAuth => write!(f, "{self:?}         - OAuth authorization"),
+            Usage::Configuration => write!(f, "{self:?} - Configuration settings"),
             Usage::Quit => write!(f, "{self:?}"),
         }
     }
 }
+
+#[derive(Debug, Copy, Clone)]
+pub enum OAuth {
+    AccessToken,
+    RefreshToken,
+    RevokeToken,
+    Quit,
+}
+
+impl OAuth {
+    // could be generated by macro
+    pub const OAUTH_VARS: &'static [OAuth] = &[
+        Self::AccessToken,
+        Self::RefreshToken,
+        Self::RevokeToken,
+        Self::Quit,
+    ];
+}
+
+impl Display for OAuth {
+    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
+        match self {
+            OAuth::AccessToken => write!(f, "{self:?}  - Login to get AccessToken"),
+            OAuth::RefreshToken => write!(f, "{self:?} - Refresh to get AccessToken"),
+            OAuth::RevokeToken => write!(f, "{self:?}  - Revoke AccessToken"),
+            OAuth::Quit => write!(f, "{self:?}"),
+        }
+    }
+}
