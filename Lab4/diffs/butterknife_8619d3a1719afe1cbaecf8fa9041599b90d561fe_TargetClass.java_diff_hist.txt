diff --git a/butterknife/src/main/java/butterknife/internal/TargetClass.java b/butterknife/src/main/java/butterknife/internal/TargetClass.java
index 427e28c..723270d 100644
--- a/butterknife/src/main/java/butterknife/internal/TargetClass.java
+++ b/butterknife/src/main/java/butterknife/internal/TargetClass.java
@@ -1,14 +1,13 @@
 package butterknife.internal;
 
 import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
+import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import static butterknife.internal.InjectViewProcessor.VIEW_TYPE;
 
 class TargetClass {
-  private final Map<Integer, ViewId> viewIdMap = new LinkedHashMap<Integer, ViewId>();
+  private final Map<Integer, ViewInjection> viewIdMap = new LinkedHashMap<Integer, ViewInjection>();
   private final String classPackage;
   private final String className;
   private final String targetClass;
@@ -21,26 +20,26 @@ class TargetClass {
   }
 
   void addField(int id, String name, String type, boolean required) {
-    getTargetView(id).fields.add(new FieldInjection(name, type, required));
+    getOrCreateViewBinding(id).addFieldBinding(new FieldBinding(name, type, required));
   }
 
   boolean addMethod(int id, String name, String parameterType, boolean required) {
-    ViewId targetView = getTargetView(id);
-    if (targetView.method != null) {
+    try {
+      getOrCreateViewBinding(id).addMethodBinding(new MethodBinding(name, parameterType, required));
+      return true;
+    } catch (IllegalStateException e) {
       return false;
     }
-    targetView.method = new MethodInjection(name, parameterType, required);
-    return true;
   }
 
   void setParentInjector(String parentInjector) {
     this.parentInjector = parentInjector;
   }
 
-  private ViewId getTargetView(int id) {
-    ViewId viewId = viewIdMap.get(id);
+  private ViewInjection getOrCreateViewBinding(int id) {
+    ViewInjection viewId = viewIdMap.get(id);
     if (viewId == null) {
-      viewId = new ViewId(id);
+      viewId = new ViewInjection(id);
       viewIdMap.put(id, viewId);
     }
     return viewId;
@@ -57,63 +56,82 @@ class TargetClass {
     builder.append("import android.view.View;\n");
     builder.append("import butterknife.Views.Finder;\n\n");
     builder.append("public class ").append(className).append(" {\n");
+    emitInject(builder);
+    builder.append("\n");
+    emitReset(builder);
+    builder.append("}\n");
+    return builder.toString();
+  }
+
+  private void emitInject(StringBuilder builder) {
     builder.append("  public static void inject(Finder finder, final ")
         .append(targetClass)
         .append(" target, Object source) {\n");
+
+    // Emit a call to the superclass injector, if any.
     if (parentInjector != null) {
       builder.append("    ")
           .append(parentInjector)
           .append(".inject(finder, target, source);\n\n");
     }
+
+    // Local variable in which all views will be temporarily stored.
     builder.append("    View view;\n");
-    for (Map.Entry<Integer, ViewId> entry : viewIdMap.entrySet()) {
-      int id = entry.getKey();
-      builder.append("    view = finder.findById(source, ").append(id).append(");\n");
-      ViewId viewId = entry.getValue();
-      for (FieldInjection fieldInjection : viewId.fields) {
-        if (fieldInjection.required) {
+
+    // Loop over each view injection and emit it.
+    for (ViewInjection injection : viewIdMap.values()) {
+      emitViewInjection(builder, injection);
+    }
+
+    builder.append("  }\n");
+  }
+
+  private void emitViewInjection(StringBuilder builder, ViewInjection injection) {
+    builder.append("    view = finder.findById(source, ")
+        .append(injection.getId())
+        .append(");\n");
+
+    List<Binding> requiredBindings = injection.getRequiredBindings();
+    if (!requiredBindings.isEmpty()) {
+      String names1 = humanDescriptionJoin(requiredBindings);
       builder.append("    if (view == null) {\n")
           .append("      throw new IllegalStateException(\"Required view with id '")
-              .append(id)
-              .append("' for field '")
-              .append(fieldInjection.name)
-              .append("' was not found. If this field binding is optional add '@Optional'.\");\n")
+          .append(injection.getId())
+          .append("' for ")
+          .append(names1)
+          .append(" was not found. If this view is optional add '@Optional' annotation.\");\n")
           .append("    }\n");
     }
+
+    for (FieldBinding fieldBinding : injection.getFieldBindings()) {
       builder.append("    target.")
-            .append(fieldInjection.name)
+          .append(fieldBinding.getName())
           .append(" = ");
 
       // Only emit a cast if the type is not View.
-        if (!VIEW_TYPE.equals(fieldInjection.type)) {
+      if (!VIEW_TYPE.equals(fieldBinding.getViewType())) {
         builder.append("(")
-            .append(fieldInjection.type)
+          .append(fieldBinding.getViewType())
           .append(") ");
       }
 
       builder.append("view;\n");
     }
-      MethodInjection method = viewId.method;
-      if (method != null) {
-        if (method.required) {
-          builder.append("    if (view == null) {\n")
-              .append("      throw new IllegalStateException(\"Required view with id '")
-              .append(id)
-              .append("' for method '")
-              .append(method.name)
-              .append("' was not found. If this method binding is optional add '@Optional'.\");\n")
-              .append("    }\n");
-        } else {
+
+    MethodBinding methodBinding = injection.getMethodBinding();
+    if (methodBinding != null) {
+      // We only need to emit the null check if there are zero required bindings.
+      if (requiredBindings.isEmpty()) {
         builder.append("    if (view != null) {\n  ");
       }
       builder.append("    view.setOnClickListener(new View.OnClickListener() {\n")
           .append("      @Override public void onClick(View view) {\n")
-            .append("        target.").append(method.name).append("(");
-        if (method.type != null) {
+          .append("        target.").append(methodBinding.getName()).append("(");
+      if (methodBinding.getViewType() != null) {
         // Only emit a cast if the type is not View.
-          if (!VIEW_TYPE.equals(method.type)) {
+        if (!VIEW_TYPE.equals(methodBinding.getViewType())) {
           builder.append("(")
-                .append(method.type)
+              .append(methodBinding.getViewType())
               .append(") ");
         }
         builder.append("view");
@@ -121,59 +139,46 @@ class TargetClass {
       builder.append(");\n")
           .append("      }\n")
           .append("    });\n");
-        if (!method.required) {
+      if (requiredBindings.isEmpty()) {
         builder.append("    }\n");
       }
     }
   }
-    builder.append("  }\n\n");
+
+  private void emitReset(StringBuilder builder) {
     builder.append("  public static void reset(").append(targetClass).append(" target) {\n");
     if (parentInjector != null) {
       builder.append("    ")
           .append(parentInjector)
           .append(".reset(target);\n\n");
     }
-    for (ViewId viewId : viewIdMap.values()) {
-      for (FieldInjection fieldInjection : viewId.fields) {
-        builder.append("    target.").append(fieldInjection.name).append(" = null;\n");
+    for (ViewInjection viewId : viewIdMap.values()) {
+      for (FieldBinding fieldInjection : viewId.getFieldBindings()) {
+        builder.append("    target.").append(fieldInjection.getName()).append(" = null;\n");
       }
     }
     builder.append("  }\n");
-    builder.append("}\n");
-    return builder.toString();
   }
 
-  static class ViewId {
-    final int id;
-    final Set<FieldInjection> fields = new LinkedHashSet<FieldInjection>();
-    MethodInjection method;
-
-    ViewId(int id) {
-      this.id = id;
+  static String humanDescriptionJoin(List<Binding> bindings) {
+    switch (bindings.size()) {
+      case 1:
+        return bindings.get(0).getDescription();
+      case 2:
+        return bindings.get(0).getDescription() + " and " + bindings.get(1).getDescription();
+      default:
+        StringBuilder names = new StringBuilder();
+        for (int i = 0, count = bindings.size(); i < count; i++) {
+          Binding requiredField = bindings.get(i);
+          if (i != 0) {
+            names.append(", ");
           }
+          if (i == count - 1) {
+            names.append("and ");
           }
-
-  static class FieldInjection {
-    final String name;
-    final String type;
-    final boolean required;
-
-    FieldInjection(String name, String type, boolean required) {
-      this.name = name;
-      this.type = type;
-      this.required = required;
+          names.append(requiredField.getDescription());
         }
-  }
-
-  static class MethodInjection {
-    final String name;
-    final String type;
-    final boolean required;
-
-    MethodInjection(String name, String type, boolean required) {
-      this.name = name;
-      this.type = type;
-      this.required = required;
+        return names.toString();
     }
   }
 }
