diff --git a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
index 8c613fa..39d1ca2 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnClickTest.java
@@ -36,14 +36,16 @@ public class OnClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -51,12 +53,6 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -98,23 +94,22 @@ public class OnClickTest {
         + "public final class Test$$ViewBinder implements ViewBinder<Test> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, final Test target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
+        + "  }\n"
+        + "  private static final class InnerUnbinder implements Unbinder {\n"
+        + "    private Test target;\n"
+        + "    private View view1;\n"
+        + "    InnerUnbinder(final Test target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
         + "          target.doStuff();\n"
         + "        }\n"
         + "      });\n"
-        + "    return unbinder;\n"
-        + "  }\n"
-        + "  protected static final class InnerUnbinder implements Unbinder {\n"
-        + "    protected Test target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(Test target) {\n"
-        + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
@@ -160,14 +155,17 @@ public class OnClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    private View view2;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff1', method 'doStuff2', and method 'doStuff3'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -177,7 +175,7 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "      view = finder.findRequiredView(source, 2, \"method 'doStuff3'\");\n"
-        + "    unbinder.view2 = view;\n"
+        + "      view2 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -185,13 +183,6 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    View view2;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -238,15 +229,17 @@ public class OnClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'view' and method 'doStuff'\");\n"
         + "      target.view = view;\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -254,12 +247,6 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
@@ -331,14 +318,20 @@ public class OnClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view0;\n"
+        + "    private View view1;\n"
+        + "    private View view2;\n"
+        + "    private View view3;\n"
+        + "    private View view4;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 0, \"method 'click0'\");\n"
-        + "    unbinder.view0 = view;\n"
+        + "      view0 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -346,7 +339,7 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'click1'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -354,7 +347,7 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "      view = finder.findRequiredView(source, 2, \"method 'click2'\");\n"
-        + "    unbinder.view2 = view;\n"
+        + "      view2 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -363,7 +356,7 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "      view = finder.findRequiredView(source, 3, \"method 'click3'\");\n"
-        + "    unbinder.view3 = view;\n"
+        + "      view3 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -372,7 +365,7 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "      view = finder.findRequiredView(source, 4, \"method 'click4'\");\n"
-        + "    unbinder.view4 = view;\n"
+        + "      view4 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -381,16 +374,6 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view0;\n"
-        + "    View view1;\n"
-        + "    View view2;\n"
-        + "    View view3;\n"
-        + "    View view4;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -441,14 +424,18 @@ public class OnClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    private View view2;\n"
+        + "    private View view3;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'click'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -456,7 +443,7 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "      view = finder.findRequiredView(source, 2, \"method 'click'\");\n"
-        + "    unbinder.view2 = view;\n"
+        + "      view2 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -464,7 +451,7 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "      view = finder.findRequiredView(source, 3, \"method 'click'\");\n"
-        + "    unbinder.view3 = view;\n"
+        + "      view3 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -472,14 +459,6 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    View view2;\n"
-        + "    View view3;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -525,15 +504,17 @@ public class OnClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findOptionalView(source, 1, null);\n"
         + "      if (view != null) {\n"
-        + "      unbinder.view1 = view;\n"
+        + "        view1 = view;\n"
         + "        view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "          @Override\n"
         + "          public void doClick(View p0) {\n"
@@ -542,12 +523,6 @@ public class OnClickTest {
         + "        });\n"
         + "      }\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -594,15 +569,17 @@ public class OnClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"field 'view'\");\n"
         + "      target.view = view;\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
         + "        @Override\n"
         + "        public void doClick(View p0) {\n"
@@ -610,12 +587,6 @@ public class OnClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      T target = this.target;\n"
