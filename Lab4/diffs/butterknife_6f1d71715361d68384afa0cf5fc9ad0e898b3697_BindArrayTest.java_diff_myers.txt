diff --git a/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
index 8a2251d..9e50b8d 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java
@@ -1,27 +1,23 @@
 package butterknife;
 
-import com.google.common.base.Joiner;
+import butterknife.compiler.ButterKnifeProcessor;
 import com.google.testing.compile.JavaFileObjects;
-
-import org.junit.Test;
-
 import javax.tools.JavaFileObject;
-
-import butterknife.compiler.ButterKnifeProcessor;
+import org.junit.Test;
 
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 
 public class BindArrayTest {
   @Test public void stringArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) String[] one;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) String[] one;\n"
+        + "}"
+    );
 
     JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
         + "package test;\n"
@@ -34,13 +30,17 @@ public class BindArrayTest {
         + "import java.lang.SuppressWarnings;\n"
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    bindToTarget(target, finder, source);\n"
+        + "    return Unbinder.EMPTY;\n"
+        + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n"
+        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
         + "    Resources res = finder.getContext(source).getResources();\n"
         + "    target.one = res.getStringArray(1);\n"
-        + "    return Unbinder.EMPTY;\n"
         + "  }\n"
-        + "}");
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -50,35 +50,37 @@ public class BindArrayTest {
   }
 
   @Test public void intArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) int[] one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.Unbinder;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public Unbinder bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getIntArray(1);",
-            "    return Unbinder.EMPTY",
-            "  }",
-            "}"
-        ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) int[] one;\n"
+        + "}"
+    );
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    bindToTarget(target, finder, source);\n"
+        + "    return Unbinder.EMPTY;\n"
+        + "  }\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
+        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "    target.one = res.getIntArray(1);\n"
+        + "  }\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -88,35 +90,36 @@ public class BindArrayTest {
   }
 
   @Test public void textArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) CharSequence[] one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.Unbinder;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public Unbinder bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.getTextArray(1);",
-            "    return Unbinder.EMPTY",
-            "  }",
-            "}"
-        ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) CharSequence[] one;\n"
+        + "}"
+    );
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    bindToTarget(target, finder, source);\n"
+        + "    return Unbinder.EMPTY;\n"
+        + "  }\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
+        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "    target.one = res.getTextArray(1);\n"
+        + "  }\n"
+        + "}");
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -126,36 +129,38 @@ public class BindArrayTest {
   }
 
   @Test public void typedArray() throws Exception {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "import android.content.res.TypedArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) TypedArray one;",
-        "}"
-    ));
-
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder",
-        Joiner.on('\n').join(
-            "package test;",
-            "import android.content.res.Resources;",
-            "import butterknife.Unbinder;",
-            "import butterknife.internal.Finder;",
-            "import butterknife.internal.ViewBinder;",
-            "import java.lang.Object;",
-            "import java.lang.Override;",
-            "import java.lang.SuppressWarnings;",
-            "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {",
-            "  @Override",
-            "  @SuppressWarnings(\"ResourceType\")",
-            "  public Unbinder bind(final Finder finder, final T target, Object source) {",
-            "    Resources res = finder.getContext(source).getResources();",
-            "    target.one = res.obtainTypedArray(1);",
-            "    return Unbinder.EMPTY",
-            "  }",
-            "}"
-        ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "import android.content.res.TypedArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) TypedArray one;\n"
+        + "}"
+    );
+
+    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    bindToTarget(target, finder, source);\n"
+        + "    return Unbinder.EMPTY;\n"
+        + "  }\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  protected static void bindToTarget(final Test target, Finder finder, Object source) {\n"
+        + "    Resources res = finder.getContext(source).getResources();\n"
+        + "    target.one = res.obtainTypedArray(1);\n"
+        + "  }\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
@@ -165,14 +170,14 @@ public class BindArrayTest {
   }
 
   @Test public void typeMustBeSupported() {
-    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(
-        "package test;",
-        "import android.app.Activity;",
-        "import butterknife.BindArray;",
-        "public class Test extends Activity {",
-        "  @BindArray(1) String one;",
-        "}"
-    ));
+    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
+        + "package test;\n"
+        + "import android.app.Activity;\n"
+        + "import butterknife.BindArray;\n"
+        + "public class Test extends Activity {\n"
+        + "  @BindArray(1) String one;\n"
+        + "}"
+    );
 
     assertAbout(javaSource()).that(source)
         .processedWith(new ButterKnifeProcessor())
