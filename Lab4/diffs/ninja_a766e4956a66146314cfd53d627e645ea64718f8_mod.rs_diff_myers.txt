diff --git a/openai/src/arkose/mod.rs b/openai/src/arkose/mod.rs
index d9638e3..a54071b 100644
--- a/openai/src/arkose/mod.rs
+++ b/openai/src/arkose/mod.rs
@@ -436,14 +436,14 @@ async fn submit_captcha(
 
             let (tx, rx) = tokio::sync::mpsc::channel(classified_data.len());
 
-            for (i, data) in classified_data.into_iter().enumerate() {
+            for data in classified_data {
                 let images_chunks = data
                     .1
                     .chunks(3)
                     .map(|item| item.iter().map(|item| item.image.clone()).collect())
                     .collect::<Vec<Vec<String>>>();
 
-                for images in images_chunks {
+                for (i, images) in images_chunks.into_iter().enumerate() {
                     let submit_task = SubmitSolver::builder()
                         .solved(solver)
                         .client_key(key)
@@ -465,26 +465,24 @@ async fn submit_captcha(
 
     // Wait for all tasks to complete
     let mut r = Vec::new();
-    let mut need_soty = false;
+    let mut mr = Vec::new();
 
     while let Some((i, res)) = rx.recv().await {
         let answers = res?;
         if answers.len() == 1 {
             r.push((i, answers[0]));
-            need_soty = true;
         } else {
-            r.extend(
-                answers
-                    .into_iter()
-                    .enumerate()
-                    .map(|(i, answer)| (i, answer)),
-            );
+            mr.push((i, answers));
         }
     }
 
-    if need_soty {
-        r.sort_by_key(|&(i, _)| i);
+    mr.sort_by_key(|&(i, _)| i);
+    for (_, answers) in mr {
+        for answer in answers {
+            r.push((0, answer));
         }
+    }
+    r.sort_by_key(|&(i, _)| i);
 
     let answers = r
         .into_iter()
