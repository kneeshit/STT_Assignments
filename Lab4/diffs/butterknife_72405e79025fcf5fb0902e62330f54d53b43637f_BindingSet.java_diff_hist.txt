diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
index 1c44014..d35671e 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java
@@ -236,7 +236,7 @@ final class BindingSet {
         constructor.addStatement("$T view", VIEW);
       }
       for (ViewBinding binding : viewBindings) {
-        addViewBinding(constructor, binding, debuggable);
+        addViewBinding(constructor, binding, debuggable, useAndroidX);
       }
       for (FieldCollectionViewBinding binding : collectionBindings) {
         constructor.addStatement("$L", binding.render(debuggable));
@@ -291,7 +291,7 @@ final class BindingSet {
     if (hasMethodBindings()) {
       result.addCode("\n");
       for (ViewBinding binding : viewBindings) {
-        addFieldAndUnbindStatement(bindingClass, result, binding);
+        addFieldAndUnbindStatement(bindingClass, result, binding, useAndroidX);
       }
     }
 
@@ -303,7 +303,7 @@ final class BindingSet {
   }
 
   private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,
-      ViewBinding bindings) {
+      ViewBinding bindings, boolean useAndroidX) {
     // Only add fields to the binding if there are method bindings.
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         bindings.getMethodBindings();
@@ -329,13 +329,14 @@ final class BindingSet {
       boolean requiresRemoval = !"".equals(listenerClass.remover());
       String listenerField = "null";
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(listenerClass.type());
+        TypeName listenerClassName = bestGuess(getType(listenerClass, useAndroidX));
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addField(listenerClassName, listenerField, PRIVATE);
       }
 
-      if (!VIEW_TYPE.equals(listenerClass.targetType())) {
-        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),
+      String targetType = getTargetType(listenerClass, useAndroidX);
+      if (!VIEW_TYPE.equals(targetType)) {
+        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(targetType),
             fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);
       } else {
         unbindMethod.addStatement("$N.$N($N)", fieldName,
@@ -354,13 +355,32 @@ final class BindingSet {
     }
   }
 
+  private static String getType(ListenerClass listenerClass, boolean useAndroidX) {
+    String type = listenerClass.type();
+    String typeAndroidX = listenerClass.typeAndroidX();
+    if (useAndroidX && !typeAndroidX.isEmpty()) {
+      type = typeAndroidX;
+    }
+    return type;
+  }
+
+  private static String getTargetType(ListenerClass listenerClass, boolean useAndroidX) {
+    String targetType = listenerClass.targetType();
+    String targetTypeAndroidX = listenerClass.targetTypeAndroidX();
+    if (useAndroidX && !targetTypeAndroidX.isEmpty()) {
+      targetType = targetTypeAndroidX;
+    }
+    return targetType;
+  }
+
   private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemoval) {
     return requiresRemoval
         ? listenerClass.remover()
         : listenerClass.setter();
   }
 
-  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
+  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
+      boolean useAndroidX) {
     if (binding.isSingleFieldBinding()) {
       // Optimize the common case where there's a single binding directly to a field.
       FieldViewBinding fieldBinding = binding.getFieldBinding();
@@ -401,7 +421,7 @@ final class BindingSet {
     }
 
     addFieldBinding(result, binding, debuggable);
-    addMethodBindings(result, binding, debuggable);
+    addMethodBindings(result, binding, debuggable, useAndroidX);
   }
 
   private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {
@@ -422,8 +442,8 @@ final class BindingSet {
     }
   }
 
-  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,
-      boolean debuggable) {
+  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding, boolean debuggable,
+      boolean useAndroidX) {
     Map<ListenerClass, Map<ListenerMethod, Set<MethodViewBinding>>> classMethodBindings =
         binding.getMethodBindings();
     if (classMethodBindings.isEmpty()) {
@@ -451,7 +471,7 @@ final class BindingSet {
       Map<ListenerMethod, Set<MethodViewBinding>> methodBindings = e.getValue();
 
       TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder("")
-          .superclass(ClassName.bestGuess(listener.type()));
+          .superclass(ClassName.bestGuess(getType(listener, useAndroidX)));
 
       for (ListenerMethod method : getListenerMethods(listener)) {
         MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name())
@@ -506,13 +526,14 @@ final class BindingSet {
       boolean requiresRemoval = listener.remover().length() != 0;
       String listenerField = null;
       if (requiresRemoval) {
-        TypeName listenerClassName = bestGuess(listener.type());
+        TypeName listenerClassName = bestGuess(getType(listener, useAndroidX));
         listenerField = fieldName + ((ClassName) listenerClassName).simpleName();
         result.addStatement("$L = $L", listenerField, callback.build());
       }
 
-      if (!VIEW_TYPE.equals(listener.targetType())) {
-        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,
+      String targetType = getTargetType(listener, useAndroidX);
+      if (!VIEW_TYPE.equals(targetType)) {
+        result.addStatement("(($T) $N).$L($L)", bestGuess(targetType), bindName,
             listener.setter(), requiresRemoval ? listenerField : callback.build());
       } else {
         result.addStatement("$N.$L($L)", bindName, listener.setter(),
