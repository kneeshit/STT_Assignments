diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
index 51ef75e..1d3a300 100644
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
@@ -31,25 +31,34 @@ public class UnbinderTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"field 'view', method 'doStuff', and method 'doMoreStuff'\");\n"
@@ -80,7 +89,6 @@ public class UnbinderTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -88,7 +96,7 @@ public class UnbinderTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void unbinderRespectsNullable() {
@@ -104,25 +112,34 @@ public class UnbinderTest {
         + "}"
     );
 
-    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binderSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingSource = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findOptionalView(source, 1);\n"
@@ -145,7 +162,6 @@ public class UnbinderTest {
         + "    }\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -153,7 +169,7 @@ public class UnbinderTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource);
+        .generatesSources(binderSource, bindingSource);
   }
 
   @Test public void childBindsSecondUnbinder() {
@@ -172,62 +188,34 @@ public class UnbinderTest {
         + "class TestTwo extends Test {}"
     );
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
-        + "      super(target, finder, source);\n"
-        + "      View view;\n"
-        + "      view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "      view1 = view;\n"
-        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "        @Override\n"
-        + "        public void doClick(View p0) {\n"
-        + "          target.doStuff2();\n"
-        + "        }\n"
-        + "      });\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public void unbind() {\n"
-        + "      super.unbind();\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1 = null;\n"
-        + "    }\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder", ""
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
@@ -246,6 +234,49 @@ public class UnbinderTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binder2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinder<T extends TestOne> extends Test_ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new TestOne_ViewBinding<>(target, finder, source);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "  private View view1;\n"
+        + "  public TestOne_ViewBinding(final T target, Finder finder, Object source) {\n"
+        + "    super(target, finder, source);\n"
+        + "    View view;\n"
+        + "    view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff2();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    super.unbind();\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
         + "  }\n"
         + "}"
     );
@@ -254,7 +285,7 @@ public class UnbinderTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource1, expectedSource2);
+        .generatesSources(binder1Source, binding1Source, binder2Source, binding2Source);
   }
 
   @Test public void childUsesOwnUnbinder() {
@@ -274,62 +305,34 @@ public class UnbinderTest {
                 "}"
             ));
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
         + "package test;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
-        + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
-        + "      super(target, finder, source);\n"
-        + "      View view;\n"
-        + "      view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
-        + "      view1 = view;\n"
-        + "      view.setOnClickListener(new DebouncingOnClickListener() {\n"
-        + "        @Override\n"
-        + "        public void doClick(View p0) {\n"
-        + "          target.doStuff2();\n"
-        + "        }\n"
-        + "      });\n"
-        + "    }\n"
-        + "    @Override\n"
-        + "    public void unbind() {\n"
-        + "      super.unbind();\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1 = null;\n"
-        + "    }\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestOne$$ViewBinder", ""
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
@@ -348,6 +351,49 @@ public class UnbinderTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binder2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinder<T extends TestOne> extends Test_ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new TestOne_ViewBinding<>(target, finder, source);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestOne_ViewBinding", ""
+        + "package test;\n"
+        + "import android.view.View;\n"
+        + "import butterknife.internal.DebouncingOnClickListener;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
+        + "  private View view1;\n"
+        + "  public TestOne_ViewBinding(final T target, Finder finder, Object source) {\n"
+        + "    super(target, finder, source);\n"
+        + "    View view;\n"
+        + "    view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
+        + "    view1 = view;\n"
+        + "    view.setOnClickListener(new DebouncingOnClickListener() {\n"
+        + "      @Override\n"
+        + "      public void doClick(View p0) {\n"
+        + "        target.doStuff2();\n"
+        + "      }\n"
+        + "    });\n"
+        + "  }\n"
+        + "  @Override\n"
+        + "  public void unbind() {\n"
+        + "    super.unbind();\n"
+        + "    view1.setOnClickListener(null);\n"
+        + "    view1 = null;\n"
         + "  }\n"
         + "}"
     );
@@ -356,7 +402,7 @@ public class UnbinderTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource1, expectedSource2);
+        .generatesSources(binder1Source, binding1Source, binder2Source, binding2Source);
   }
 
   @Test public void childInDifferentPackage() {
@@ -384,25 +430,34 @@ public class UnbinderTest {
                 "}"
             ));
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
@@ -421,27 +476,35 @@ public class UnbinderTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binder2Source = JavaFileObjects.forSourceString("test/one/TestOne_ViewBinder", ""
+        + "package test.one;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "import test.Test_ViewBinder;\n"
+        + "public class TestOne_ViewBinder<T extends TestOne> extends Test_ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new TestOne_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/one/TestOne$$ViewBinder", ""
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/one/TestOne_ViewBinding", ""
         + "package test.one;\n"
         + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "import test.Test$$ViewBinder;\n"
-        + "public class TestOne$$ViewBinder<T extends TestOne> extends Test$$ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends TestOne> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "import test.Test_ViewBinding;\n"
+        + "public class TestOne_ViewBinding<T extends TestOne> extends Test_ViewBinding<T> {\n"
         + "  private View view2;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public TestOne_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    super(target, finder, source);\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 2, \"method 'doStuff2'\");\n"
@@ -459,7 +522,6 @@ public class UnbinderTest {
         + "    view2.setOnClickListener(null);\n"
         + "    view2 = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -467,7 +529,7 @@ public class UnbinderTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource1, expectedSource2);
+        .generatesSources(binder1Source, binding1Source, binder2Source, binding2Source);
   }
 
   @Test public void unbindingThroughAbstractChild() {
@@ -489,25 +551,34 @@ public class UnbinderTest {
                 "}"
             ));
 
-    JavaFileObject expectedSource1 = JavaFileObjects.forSourceString("test/Test$$ViewBinder", ""
+    JavaFileObject binder1Source = JavaFileObjects.forSourceString("test/Test_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.ViewBinder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new Test_ViewBinding<>(target, finder, source);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binding1Source = JavaFileObjects.forSourceString("test/Test_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.ViewBinder;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public Test_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    this.target = target;\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff1'\");\n"
@@ -526,26 +597,33 @@ public class UnbinderTest {
         + "    view1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binder2Source = JavaFileObjects.forSourceString("test/TestTwo_ViewBinder", ""
+        + "package test;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class TestTwo_ViewBinder<T extends TestTwo> extends Test_ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    return new TestTwo_ViewBinding<>(target, finder, source);\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/TestTwo$$ViewBinder", ""
+    JavaFileObject binding2Source = JavaFileObjects.forSourceString("test/TestTwo_ViewBinding", ""
         + "package test;\n"
         + "import android.view.View;\n"
-        + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "public class TestTwo$$ViewBinder<T extends TestTwo> extends Test$$ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    return new InnerUnbinder<>(target, finder, source);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends TestTwo> extends Test$$ViewBinder.InnerUnbinder<T> {\n"
+        + "public class TestTwo_ViewBinding<T extends TestTwo> extends Test_ViewBinding<T> {\n"
         + "  private View view1;\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "  public TestTwo_ViewBinding(final T target, Finder finder, Object source) {\n"
         + "    super(target, finder, source);\n"
         + "    View view;\n"
         + "    view = finder.findRequiredView(source, 1, \"method 'doStuff2'\");\n"
@@ -563,7 +641,6 @@ public class UnbinderTest {
         + "    view1.setOnClickListener(null);\n"
         + "    view1 = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -571,7 +648,7 @@ public class UnbinderTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSource1, expectedSource2);
+        .generatesSources(binder1Source, binding1Source, binder2Source, binding2Source);
   }
 
   @Test public void fullIntegration() {
@@ -695,7 +772,7 @@ public class UnbinderTest {
         + "  }\n"
         + "}\n");
 
-    JavaFileObject expectedSourceA = JavaFileObjects.forSourceString("test/A$$ViewBinder", ""
+    JavaFileObject binderASource = JavaFileObjects.forSourceString("test/A_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
@@ -706,7 +783,7 @@ public class UnbinderTest {
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class A$$ViewBinder<T extends A> implements ViewBinder<T> {\n"
+        + "public class A_ViewBinder<T extends A> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
         + "    Context context = finder.getContext(source);\n"
@@ -716,13 +793,13 @@ public class UnbinderTest {
         + "    return Unbinder.EMPTY;\n"
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(A target, Resources res, Resources.Theme theme) {\n"
+        + "  public static void bindToTarget(A target, Resources res, Resources.Theme theme) {\n"
         + "    target.blackColor = Utils.getColor(res, theme, 17170444);\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSourceB = JavaFileObjects.forSourceString("test/B$$ViewBinder", ""
+    JavaFileObject binderBSource = JavaFileObjects.forSourceString("test/B_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
@@ -732,7 +809,7 @@ public class UnbinderTest {
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class B$$ViewBinder<T extends B> extends A$$ViewBinder<T> {\n"
+        + "public class B_ViewBinder<T extends B> extends A_ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
         + "    Context context = finder.getContext(source);\n"
@@ -742,38 +819,48 @@ public class UnbinderTest {
         + "    return Unbinder.EMPTY;\n"
         + "  }\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "  protected static void bindToTarget(B target, Resources res, Resources.Theme theme) {\n"
-        + "    A$$ViewBinder.bindToTarget(target, res, theme);\n"
+        + "  public static void bindToTarget(B target, Resources res, Resources.Theme theme) {\n"
+        + "    A_ViewBinder.bindToTarget(target, res, theme);\n"
         + "    target.whiteColor = Utils.getColor(res, theme, 17170443);\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSourceC = JavaFileObjects.forSourceString("test/C$$ViewBinder", ""
+    JavaFileObject binderCSource = JavaFileObjects.forSourceString("test/C_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class C_ViewBinder<T extends C> extends B_ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    Context context = finder.getContext(source);\n"
+        + "    Resources res = context.getResources();\n"
+        + "    Resources.Theme theme = context.getTheme();\n"
+        + "    return new C_ViewBinding<>(target, finder, source, res, theme);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingCSource = JavaFileObjects.forSourceString("test/C_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.IllegalStateException;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class C$$ViewBinder<T extends C> extends B$$ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    Context context = finder.getContext(source);\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    return new InnerUnbinder<>(target, finder, source, res, theme);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends C> implements Unbinder {\n"
+        + "public class C_ViewBinding<T extends C> implements Unbinder {\n"
         + "  protected T target;\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "  public C_ViewBinding(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
         + "    this.target = target;\n"
-        + "      B$$ViewBinder.bindToTarget(target, res, theme);\n"
+        + "    B_ViewBinder.bindToTarget(target, res, theme);\n"
         + "    target.button1 = finder.findRequiredView(source, 16908313, \"field 'button1'\");\n"
         + "    target.transparentColor = Utils.getColor(res, theme, 17170445);\n"
         + "  }\n"
@@ -784,118 +871,147 @@ public class UnbinderTest {
         + "    target.button1 = null;\n"
         + "    this.target = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSourceD = JavaFileObjects.forSourceString("test/D$$ViewBinder", ""
+    JavaFileObject binderDSource = JavaFileObjects.forSourceString("test/D_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class D$$ViewBinder<T extends D> extends C$$ViewBinder<T> {\n"
+        + "public class D_ViewBinder<T extends D> extends C_ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    return new InnerUnbinder<>(target, finder, source, res, theme);\n"
+        + "    return new D_ViewBinding<>(target, finder, source, res, theme);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends D> extends C$$ViewBinder.InnerUnbinder<T> {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingDSource = JavaFileObjects.forSourceString("test/D_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class D_ViewBinding<T extends D> extends C_ViewBinding<T> {\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "  public D_ViewBinding(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
         + "    super(target, finder, source, res, theme);\n"
         + "    target.grayColor = Utils.getColor(res, theme, 17170432);\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSourceE = JavaFileObjects.forSourceString("test/E$$ViewBinder", ""
+    JavaFileObject binderESource = JavaFileObjects.forSourceString("test/E_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class E$$ViewBinder<T extends E> extends C$$ViewBinder<T> {\n"
+        + "public class E_ViewBinder<T extends E> extends C_ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    return new InnerUnbinder<>(target, finder, source, res, theme);\n"
+        + "    return new E_ViewBinding<>(target, finder, source, res, theme);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends E> extends C$$ViewBinder.InnerUnbinder<T> {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingESource = JavaFileObjects.forSourceString("test/E_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class E_ViewBinding<T extends E> extends C_ViewBinding<T> {\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "  public E_ViewBinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
         + "    super(target, finder, source, res, theme);\n"
         + "    target.backgroundDarkColor = Utils.getColor(res, theme, 17170446);\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSourceF = JavaFileObjects.forSourceString("test/F$$ViewBinder", ""
+    JavaFileObject binderFSource = JavaFileObjects.forSourceString("test/F_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class F$$ViewBinder<T extends F> extends D$$ViewBinder<T> {\n"
+        + "public class F_ViewBinder<T extends F> extends D_ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    return new InnerUnbinder<>(target, finder, source, res, theme);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends F> extends D$$ViewBinder.InnerUnbinder<T> {\n"
-        + "    @SuppressWarnings(\"ResourceType\")\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
-        + "      super(target, finder, source, res, theme);\n"
-        + "      target.backgroundLightColor = Utils.getColor(res, theme, 17170447);\n"
-        + "    }\n"
+        + "    return new F_ViewBinding<>(target, finder, source, res, theme);\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSourceG = JavaFileObjects.forSourceString("test/G$$ViewBinder", ""
+    JavaFileObject bindingFSource = JavaFileObjects.forSourceString("test/F_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class F_ViewBinding<T extends F> extends D_ViewBinding<T> {\n"
+        + "  @SuppressWarnings(\"ResourceType\")\n"
+        + "  public F_ViewBinding(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "    super(target, finder, source, res, theme);\n"
+        + "    target.backgroundLightColor = Utils.getColor(res, theme, 17170447);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject binderGSource = JavaFileObjects.forSourceString("test/G_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
-        + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "public class G_ViewBinder<T extends G> extends E_ViewBinder<T> {\n"
+        + "  @Override\n"
+        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
+        + "    Context context = finder.getContext(source);\n"
+        + "    Resources res = context.getResources();\n"
+        + "    Resources.Theme theme = context.getTheme();\n"
+        + "    return new G_ViewBinding<>(target, finder, source, res, theme);\n"
+        + "  }\n"
+        + "}"
+    );
+
+    JavaFileObject bindingGSource = JavaFileObjects.forSourceString("test/G_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import android.view.View;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
         + "import butterknife.internal.Finder;\n"
         + "import butterknife.internal.Utils;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
         + "import java.lang.SuppressWarnings;\n"
-        + "public class G$$ViewBinder<T extends G> extends E$$ViewBinder<T> {\n"
-        + "  @Override\n"
-        + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    Context context = finder.getContext(source);\n"
-        + "    Resources res = context.getResources();\n"
-        + "    Resources.Theme theme = context.getTheme();\n"
-        + "    return new InnerUnbinder<>(target, finder, source, res, theme);\n"
-        + "  }\n"
-        + "  protected static class InnerUnbinder<T extends G> extends E$$ViewBinder.InnerUnbinder<T> {\n"
+        + "public class G_ViewBinding<T extends G> extends E_ViewBinding<T> {\n"
         + "  private View view16908290;\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "    protected InnerUnbinder(final T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "  public G_ViewBinding(final T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
         + "    super(target, finder, source, res, theme);\n"
         + "    View view;\n"
         + "    target.button2 = finder.findRequiredView(source, 16908314, \"field 'button2'\");\n"
@@ -917,31 +1033,39 @@ public class UnbinderTest {
         + "    view16908290.setOnClickListener(null);\n"
         + "    view16908290 = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSourceH = JavaFileObjects.forSourceString("test/H$$ViewBinder", ""
+    JavaFileObject binderHSource = JavaFileObjects.forSourceString("test/H_ViewBinder", ""
         + "package test;\n"
         + "import android.content.Context;\n"
         + "import android.content.res.Resources;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.Finder;\n"
-        + "import butterknife.internal.Utils;\n"
         + "import java.lang.Object;\n"
         + "import java.lang.Override;\n"
-        + "import java.lang.SuppressWarnings;\n"
-        + "public class H$$ViewBinder<T extends H> extends G$$ViewBinder<T> {\n"
+        + "public class H_ViewBinder<T extends H> extends G_ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
         + "    Context context = finder.getContext(source);\n"
         + "    Resources res = context.getResources();\n"
         + "    Resources.Theme theme = context.getTheme();\n"
-        + "    return new InnerUnbinder<>(target, finder, source, res, theme);\n"
+        + "    return new H_ViewBinding<>(target, finder, source, res, theme);\n"
         + "  }\n"
-        + "  protected static class InnerUnbinder<T extends H> extends G$$ViewBinder.InnerUnbinder<T> {\n"
+        + "}"
+    );
+
+    JavaFileObject bindingHSource = JavaFileObjects.forSourceString("test/H_ViewBinding", ""
+        + "package test;\n"
+        + "import android.content.res.Resources;\n"
+        + "import butterknife.internal.Finder;\n"
+        + "import butterknife.internal.Utils;\n"
+        + "import java.lang.Object;\n"
+        + "import java.lang.Override;\n"
+        + "import java.lang.SuppressWarnings;\n"
+        + "public class H_ViewBinding<T extends H> extends G_ViewBinding<T> {\n"
         + "  @SuppressWarnings(\"ResourceType\")\n"
-        + "    protected InnerUnbinder(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
+        + "  public H_ViewBinding(T target, Finder finder, Object source, Resources res, Resources.Theme theme) {\n"
         + "    super(target, finder, source, res, theme);\n"
         + "    target.button3 = finder.findRequiredView(source, 16908315, \"field 'button3'\");\n"
         + "    target.grayColor = Utils.getColor(res, theme, 17170433);\n"
@@ -952,7 +1076,6 @@ public class UnbinderTest {
         + "    super.unbind();\n"
         + "    target.button3 = null;\n"
         + "  }\n"
-        + "  }\n"
         + "}"
     );
 
@@ -968,13 +1091,19 @@ public class UnbinderTest {
         .processedWith(new ButterKnifeProcessor())
         .compilesWithoutError()
         .and()
-        .generatesSources(expectedSourceA,
-            expectedSourceB,
-            expectedSourceC,
-            expectedSourceD,
-            expectedSourceE,
-            expectedSourceF,
-            expectedSourceG,
-            expectedSourceH);
+        .generatesSources(binderASource,
+            binderBSource,
+            binderCSource,
+            bindingCSource,
+            binderDSource,
+            bindingDSource,
+            binderESource,
+            bindingESource,
+            binderFSource,
+            bindingFSource,
+            binderGSource,
+            bindingGSource,
+            binderHSource,
+            bindingHSource);
   }
 }
