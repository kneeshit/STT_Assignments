diff --git a/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java b/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
index 8833879..3aef621 100644
--- a/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/OnItemClickTest.java
@@ -37,14 +37,16 @@ public class OnItemClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "        @Override\n"
         + "        public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
@@ -52,12 +54,6 @@ public class OnItemClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -106,14 +102,16 @@ public class OnItemClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "        @Override\n"
         + "        public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
@@ -121,12 +119,6 @@ public class OnItemClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -174,14 +166,16 @@ public class OnItemClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "        @Override\n"
         + "        public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
@@ -190,12 +184,6 @@ public class OnItemClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -243,14 +231,16 @@ public class OnItemClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View view1;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = finder.findRequiredView(source, 1, \"method 'doStuff'\");\n"
-        + "    unbinder.view1 = view;\n"
+        + "      view1 = view;\n"
         + "      ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "        @Override\n"
         + "        public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
@@ -259,12 +249,6 @@ public class OnItemClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View view1;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
@@ -310,14 +294,16 @@ public class OnItemClickTest {
         + "public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\n"
         + "  @Override\n"
         + "  public Unbinder bind(Finder finder, T target, Object source) {\n"
-        + "    InnerUnbinder unbinder = new InnerUnbinder(target);\n"
-        + "    bindToTarget(target, finder, source, unbinder);\n"
-        + "    return unbinder;\n"
+        + "    return new InnerUnbinder(target, finder, source);\n"
         + "  }\n"
-        + "  protected static void bindToTarget(final Test target, Finder finder, Object source, InnerUnbinder unbinder) {\n"
+        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
+        + "    protected T target;\n"
+        + "    private View viewOriginal;\n"
+        + "    protected InnerUnbinder(final T target, Finder finder, Object source) {\n"
+        + "      this.target = target;\n"
         + "      View view;\n"
         + "      view = target;\n"
-        + "    unbinder.viewOriginal = view;\n"
+        + "      viewOriginal = view;\n"
         + "      ((AdapterView<?>) view).setOnItemClickListener(new AdapterView.OnItemClickListener() {\n"
         + "        @Override\n"
         + "        public void onItemClick(AdapterView<?> p0, View p1, int p2, long p3) {\n"
@@ -325,12 +311,6 @@ public class OnItemClickTest {
         + "        }\n"
         + "      });\n"
         + "    }\n"
-        + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    protected T target;\n"
-        + "    View viewOriginal;\n"
-        + "    protected InnerUnbinder(T target) {\n"
-        + "      this.target = target;\n"
-        + "    }\n"
         + "    @Override\n"
         + "    public void unbind() {\n"
         + "      if (this.target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
