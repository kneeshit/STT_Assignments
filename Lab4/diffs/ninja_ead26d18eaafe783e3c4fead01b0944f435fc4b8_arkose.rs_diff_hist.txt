diff --git a/openai/src/serve/router/arkose.rs b/openai/src/serve/router/arkose.rs
index 4405f70..9eb30d5 100644
--- a/openai/src/serve/router/arkose.rs
+++ b/openai/src/serve/router/arkose.rs
@@ -1,6 +1,7 @@
 use std::collections::HashMap;
 
-use crate::arkose::ArkoseToken;
+use crate::arkose::{funcaptcha, ArkoseToken};
+use crate::debug;
 use crate::serve::err::{self, ResponseError};
 use crate::serve::{env, Launcher};
 use axum::body::Body;
@@ -46,10 +47,9 @@ async fn proxy(
         .eq("/fc/gt2/public_key/35536E1E-65B4-4D96-9D97-6ADB7EFF8147")
     {
         let env = env::ENV_HOLDER.get_instance();
-        if let Some(endpoint) = env.get_arkose_token_endpoint() {
-            if let Ok(arkose_token) = ArkoseToken::new_from_endpoint("gpt4-fuck", endpoint).await {
-                let target_json = json!({
-                    "token": arkose_token,
+
+        if env.get_arkose_token_endpoint().is_some() || env.get_arkose_yescaptcha_key().is_some() {
+            let mut target_json = json!({
                 "challenge_url":"",
                 "challenge_url_cdn":"https://client-api.arkoselabs.com/cdn/fc/assets/ec-game-core/bootstrap/1.14.1/standard/game_core_bootstrap.js",
                 "challenge_url_cdn_sri":null,
@@ -72,6 +72,16 @@ async fn proxy(
                 }
             });
 
+            if let Some(arkose_token_endpoint) = env.get_arkose_token_endpoint() {
+                if let Ok(arkose_token) =
+                    ArkoseToken::new_from_endpoint("gpt4-fuck", arkose_token_endpoint).await
+                {
+                    if let Some(kv) = target_json.as_object_mut() {
+                        kv.insert(
+                            "token".to_owned(),
+                            serde_json::Value::String(arkose_token.value().to_owned()),
+                        );
+                    }
                     return Ok(Response::builder()
                         .status(StatusCode::OK)
                         .header(header::CONTENT_TYPE, "text/plain; charset=utf-8")
@@ -79,6 +89,47 @@ async fn proxy(
                         .map_err(|err| err::ResponseError::InternalServerError(err))?);
                 }
             }
+
+            if let Some(key) = env.get_arkose_yescaptcha_key() {
+                let arkose_token = ArkoseToken::new("gpt4-fuck").await?;
+                let token = arkose_token.value();
+                debug!("arkose_token: {token:?}");
+                if !arkose_token.valid() {
+                    match funcaptcha::start_challenge(token).await {
+                        Ok(session) => {
+                            if let Some(funcaptcha) = session.funcaptcha() {
+                                let index = funcaptcha::yescaptcha::valid(
+                                    key,
+                                    &funcaptcha.image,
+                                    &funcaptcha.instructions,
+                                )
+                                .await?;
+                                debug!("answer index:{index}");
+                                if session.submit_answer(index).await.is_ok() {
+                                    if let Some(kv) = target_json.as_object_mut() {
+                                        kv.insert(
+                                            "token".to_owned(),
+                                            serde_json::Value::String(format!("{token}|sup=1")),
+                                        );
+                                    }
+                                    return Ok(Response::builder()
+                                        .status(StatusCode::OK)
+                                        .header(header::CONTENT_TYPE, "text/plain; charset=utf-8")
+                                        .body(Body::from(target_json.to_string()))
+                                        .map_err(|err| {
+                                            err::ResponseError::InternalServerError(err)
+                                        })?);
+                                }
+                            }
+                        }
+                        Err(error) => {
+                            eprintln!("Error creating session: {}", error);
+                        }
+                    }
+                }
+            }
+        }
+
         if let Some(body) = &mut body {
             if let Some(v) = body.get_mut("site") {
                 if v.starts_with("http") {
@@ -97,6 +148,7 @@ async fn proxy(
     );
     headers.remove("Host");
     headers.remove("connection");
+    headers.remove("Connection");
     headers.remove("Content-Type");
     headers.remove("Content-Length");
     headers.remove("Cf-Connecting-Ip");
