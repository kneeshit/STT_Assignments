diff --git a/src/args.rs b/src/args.rs
index e7e26b9..af01f98 100644
--- a/src/args.rs
+++ b/src/args.rs
@@ -53,7 +53,7 @@ pub(super) enum ServeSubcommand {
 #[derive(Args, Debug, Default, Serialize, Deserialize)]
 pub(super) struct ServeArgs {
     /// Configuration file path (toml format file)
-    #[clap(short = 'C', long, env = "OPENGPT_CONFIG", value_parser = util::parse_config)]
+    #[clap(short = 'C', long, value_parser = util::parse_config)]
     pub(super) config: Option<PathBuf>,
     /// Server Listen host
     #[clap(short = 'H', long, env = "OPENGPT_HOST", default_value = "0.0.0.0", value_parser = util::parse_host)]
@@ -62,22 +62,22 @@ pub(super) struct ServeArgs {
     #[clap(short = 'P', long, env = "OPENGPT_PORT", default_value = "7999", value_parser = util::parse_port_in_range)]
     pub(super) port: Option<u16>,
     /// Server worker-pool size (Recommended number of CPU cores)
-    #[clap(short = 'W', long, env = "OPENGPT_WORKERS", default_value = "1")]
+    #[clap(short = 'W', long, default_value = "1")]
     pub(super) workers: usize,
-    /// Concurrent limit (Enforces a limit on the concurrent number of requests the underlying)
-    #[clap(long, env = "OPENGPT_CONCUURENT_LIMIT", default_value = "65535")]
+    /// Enforces a limit on the concurrent number of requests the underlying
+    #[clap(long, default_value = "65535")]
     pub(super) concurrent_limit: usize,
     /// Server proxies pool, Example: protocol://user:pass@ip:port
-    #[clap(long, env = "OPENGPT_PROXY", value_parser = util::parse_proxies_url)]
+    #[clap(long, value_parser = util::parse_proxies_url)]
     pub(super) proxies: Option<std::vec::Vec<String>>,
     /// Client timeout (seconds)
-    #[clap(long, env = "OPENGPT_TIMEOUT", default_value = "600")]
+    #[clap(long, default_value = "600")]
     pub(super) timeout: usize,
     /// Client connect timeout (seconds)
-    #[clap(long, env = "OPENGPT_CONNECT_TIMEOUT", default_value = "60")]
+    #[clap(long, default_value = "60")]
     pub(super) connect_timeout: usize,
     /// TCP keepalive (seconds)
-    #[clap(long, env = "OPENGPT_TCP_KEEPALIVE", default_value = "60")]
+    #[clap(long, default_value = "60")]
     pub(super) tcp_keepalive: usize,
     /// TLS certificate file path
     #[clap(long, env = "OPENGPT_TLS_CERT", requires = "tls_key")]
@@ -88,80 +88,54 @@ pub(super) struct ServeArgs {
     /// PUID cookie value of Plus account
     #[clap(long, env = "OPENGPT_PUID")]
     pub(super) puid: Option<String>,
-    /// Obtain the PUID of the Plus account user. Supports split: ':', '-', '--' ... , Example: `user:pass` or `user:pass:mfa`
-    #[clap(long, env = "OPENGPT_PUID_USER", value_parser = util::parse_puid_user)]
+    /// Obtain the PUID of the Plus account user, Example: `user:pass` or `user:pass:mfa`
+    #[clap(long, value_parser = util::parse_puid_user)]
     pub(super) puid_user: Option<(String, String, Option<String>)>,
     /// Web UI api prefix
     #[clap(long, env = "OPENGPT_UI_API_PREFIX", value_parser = util::parse_url)]
     pub(super) api_prefix: Option<String>,
     /// Arkose endpoint, Example: https://client-api.arkoselabs.com
-    #[clap(long, env = "OPENGPT_ARKOSE_ENDPOINT", value_parser = util::parse_url)]
+    #[clap(long, value_parser = util::parse_url)]
     pub(super) arkose_endpoint: Option<String>,
     /// Get arkose-token endpoint
-    #[clap(short = 'A', long, env = "OPENGPT_ARKOSE_TOKEN_ENDPOINT", value_parser = util::parse_url)]
+    #[clap(short = 'A', long, value_parser = util::parse_url)]
     pub(super) arkose_token_endpoint: Option<String>,
-    #[clap(long, env = "OPENGPT_ARKOSE_YESCAPTCHA_KEY")]
+    #[clap(short = 'Y', long)]
     /// yescaptcha client key
     pub(super) arkose_yescaptcha_key: Option<String>,
     /// Enable url signature (signature secret key)
-    #[clap(short = 'S', long, env = "OPENGPT_SIGNATURE")]
+    #[clap(short = 'S', long)]
     #[cfg(feature = "sign")]
     pub(super) sign_secret_key: Option<String>,
     /// Enable token bucket flow limitation
-    #[clap(short = 'T', long, env = "OPENGPT_TB_ENABLE")]
+    #[clap(short = 'T', long)]
     #[cfg(feature = "limit")]
     pub(super) tb_enable: bool,
     /// Token bucket store strategy (mem/redis)
-    #[clap(
-        long,
-        env = "OPENGPT_TB_STORE_STRATEGY",
-        default_value = "mem",
-        requires = "tb_enable"
-    )]
+    #[clap(long, default_value = "mem", requires = "tb_enable")]
     #[cfg(feature = "limit")]
     pub(super) tb_store_strategy: tokenbucket::Strategy,
     /// Token bucket redis url, Example: redis://user:pass@ip:port
-    #[clap(
-    long,
-    env = "OPENGPT_TB_REDIS_URL",
-    default_value = "redis://127.0.0.1:6379",
-    requires = "tb_enable",
-    value_parser = util::parse_url
-    )]
+    #[clap(long, default_value = "redis://127.0.0.1:6379", requires = "tb_enable", value_parser = util::parse_url)]
     #[cfg(feature = "limit")]
     pub(super) tb_redis_url: String,
     /// Token bucket capacity
-    #[clap(
-        long,
-        env = "OPENGPT_TB_CAPACITY",
-        default_value = "60",
-        requires = "tb_enable"
-    )]
+    #[clap(long, default_value = "60", requires = "tb_enable")]
     #[cfg(feature = "limit")]
     pub(super) tb_capacity: u32,
     /// Token bucket fill rate
-    #[clap(
-        long,
-        env = "OPENGPT_TB_FILL_RATE",
-        default_value = "1",
-        requires = "tb_enable"
-    )]
+    #[clap(long, default_value = "1", requires = "tb_enable")]
     #[cfg(feature = "limit")]
     pub(super) tb_fill_rate: u32,
     /// Token bucket expired (seconds)
-    #[clap(
-        long,
-        env = "OPENGPT_TB_EXPIRED",
-        default_value = "86400",
-        requires = "tb_enable"
-    )]
+    #[clap(long, default_value = "86400", requires = "tb_enable")]
     #[cfg(feature = "limit")]
     pub(super) tb_expired: u32,
     /// Cloudflare turnstile captcha site key
-    #[clap(long, env = "OPENGPT_CF_SITE_KEY", requires = "cf_secret_key")]
+    #[clap(long, requires = "cf_secret_key")]
     pub(super) cf_site_key: Option<String>,
     /// Cloudflare turnstile captcha secret key
-    #[clap(long, env = "OPENGPT_CF_SECRET_KEY", requires = "cf_site_key")]
+    #[clap(long, requires = "cf_site_key")]
     pub(super) cf_secret_key: Option<String>,
     /// Disable WebUI
     #[clap(short = 'D', long, env = "OPENGPT_DISABLE_WEBUI")]
