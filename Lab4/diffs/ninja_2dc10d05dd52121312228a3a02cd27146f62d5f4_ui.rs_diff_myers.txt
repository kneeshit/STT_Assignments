diff --git a/openai/src/serve/router/ui.rs b/openai/src/serve/router/ui.rs
index 30bf089..e094ea4 100644
--- a/openai/src/serve/router/ui.rs
+++ b/openai/src/serve/router/ui.rs
@@ -28,7 +28,6 @@ use serde_json::{json, Value};
 
 use crate::info;
 use crate::serve::context;
-use crate::serve::err;
 use crate::serve::err::ResponseError;
 use crate::serve::header_convert;
 use crate::serve::response_convert;
@@ -78,13 +77,13 @@ impl ToString for Session {
 }
 
 impl TryFrom<&str> for Session {
-    type Error = err::ResponseError;
+    type Error = ResponseError;
 
     fn try_from(value: &str) -> std::result::Result<Self, Self::Error> {
         let data = base64::engine::general_purpose::URL_SAFE
             .decode(value)
-            .map_err(|err| err::ResponseError::Unauthorized(err))?;
-        serde_json::from_slice(&data).map_err(|err| err::ResponseError::Unauthorized(err))
+            .map_err(|err| ResponseError::Unauthorized(err))?;
+        serde_json::from_slice(&data).map_err(|err| ResponseError::Unauthorized(err))
     }
 }
 
@@ -247,11 +246,15 @@ async fn post_login(
         return render_template(TEMP_LOGIN, &ctx);
     }
 
-    let env = context::ENV_HOLDER.get_instance();
-    match env.load_auth_client().do_access_token(&account).await {
+    match context::ENV_HOLDER
+        .get_instance()
+        .load_auth_client()
+        .do_access_token(&account)
+        .await
+    {
         Ok(access_token) => {
             let authentication_token = AuthenticateToken::try_from(access_token)
-                .map_err(|err| err::ResponseError::InternalServerError(err))?;
+                .map_err(|err| ResponseError::InternalServerError(err))?;
             let session = Session::from(authentication_token);
 
             let cookie = cookie::Cookie::build(SESSION_ID, session.to_string())
@@ -267,7 +270,7 @@ async fn post_login(
                 .header(header::LOCATION, DEFAULT_INDEX)
                 .header(header::SET_COOKIE, cookie.to_string())
                 .body(Body::empty())
-                .map_err(|err| err::ResponseError::InternalServerError(err))?)
+                .map_err(|err| ResponseError::InternalServerError(err))?)
         }
         Err(e) => {
             let mut ctx = tera::Context::new();
@@ -282,13 +285,13 @@ async fn post_login_token(headers: HeaderMap) -> Result<Response<Body>, Response
     if let Some(token) = headers.get(header::AUTHORIZATION) {
         let access_token = token.to_str().unwrap_or_default();
         let profile = crate::token::check(access_token)
-            .map_err(|err| err::ResponseError::Unauthorized(err))?
-            .ok_or(err::ResponseError::InternalServerError(anyhow!(
+            .map_err(|err| ResponseError::Unauthorized(err))?
+            .ok_or(ResponseError::InternalServerError(anyhow!(
                 "Get Profile Erorr"
             )))?;
 
-        let env = context::ENV_HOLDER.get_instance();
-        let session = match env
+        let session = match context::ENV_HOLDER
+            .get_instance()
             .load_auth_client()
             .do_get_user_picture(access_token)
             .await
@@ -326,7 +329,7 @@ async fn post_login_token(headers: HeaderMap) -> Result<Response<Body>, Response
             .header(header::LOCATION, DEFAULT_INDEX)
             .header(header::SET_COOKIE, cookie.to_string())
             .body(Body::empty())
-            .map_err(|err| err::ResponseError::InternalServerError(err))?);
+            .map_err(|err| ResponseError::InternalServerError(err))?);
     }
     redirect_login()
 }
@@ -356,7 +359,7 @@ async fn get_logout(jar: CookieJar) -> Result<Response<Body>, ResponseError> {
         .header(header::LOCATION, LOGIN_INDEX)
         .header(header::SET_COOKIE, cookie.to_string())
         .body(Body::empty())
-        .map_err(|err| err::ResponseError::InternalServerError(err))?)
+        .map_err(|err| ResponseError::InternalServerError(err))?)
 }
 
 async fn get_session(jar: CookieJar) -> Result<Response<Body>, ResponseError> {
@@ -387,7 +390,7 @@ async fn get_session(jar: CookieJar) -> Result<Response<Body>, ResponseError> {
             .header(header::SET_COOKIE, cookie.to_string())
             .header(header::CONTENT_TYPE, "application/json")
             .body(Body::from(props.to_string()))
-            .map_err(|err| err::ResponseError::InternalServerError(err))?);
+            .map_err(|err| ResponseError::InternalServerError(err))?);
     }
     redirect_login()
 }
@@ -440,7 +443,7 @@ async fn get_chat(
                 ctx.insert(
                     "props",
                     &serde_json::to_string(&props)
-                        .map_err(|err| err::ResponseError::InternalServerError(err))?,
+                        .map_err(|err| ResponseError::InternalServerError(err))?,
                 );
                 settings_template_data(&mut ctx);
                 return render_template(template_name, &ctx);
@@ -481,7 +484,7 @@ async fn get_chat_info(jar: CookieJar) -> Result<Response<Body>, ResponseError>
                     .status(StatusCode::OK)
                     .header(header::CONTENT_TYPE, "application/json")
                     .body(Body::from(body.to_string()))
-                    .map_err(|err| err::ResponseError::InternalServerError(err))?)
+                    .map_err(|err| ResponseError::InternalServerError(err))?)
             }
             Err(_) => {
                 let body = serde_json::json!(
@@ -491,7 +494,7 @@ async fn get_chat_info(jar: CookieJar) -> Result<Response<Body>, ResponseError>
                     .status(StatusCode::OK)
                     .header(header::CONTENT_TYPE, "application/json")
                     .body(Body::from(body.to_string()))
-                    .map_err(|err| err::ResponseError::InternalServerError(err))?)
+                    .map_err(|err| ResponseError::InternalServerError(err))?)
             }
         };
     }
@@ -516,7 +519,7 @@ async fn get_share_chat(
                     .bearer_auth(session.access_token)
                     .send()
                     .await
-                    .map_err(|err| err::ResponseError::InternalServerError(err))?;
+                    .map_err(|err| ResponseError::InternalServerError(err))?;
 
                 match resp.json::<Value>().await {
                     Ok(mut share_data) => {
@@ -590,7 +593,7 @@ async fn get_share_chat(
                     format!("/auth/login?next=%2Fshare%2F{share_id}"),
                 )
                 .body(Body::empty())
-                .map_err(|err| err::ResponseError::InternalServerError(err))?),
+                .map_err(|err| ResponseError::InternalServerError(err))?),
         };
     }
 
@@ -614,7 +617,7 @@ async fn get_share_chat_info(
                 .bearer_auth(session.access_token)
                 .send()
                 .await
-                .map_err(|err| err::ResponseError::InternalServerError(err))?;
+                .map_err(|err| ResponseError::InternalServerError(err))?;
 
             return match resp.json::<Value>().await {
                 Ok(mut share_data) => {
@@ -646,7 +649,7 @@ async fn get_share_chat_info(
                         .status(StatusCode::OK)
                         .header(header::CONTENT_TYPE, "application/json")
                         .body(Body::from(serde_json::to_string(&props).unwrap()))
-                        .map_err(|err| err::ResponseError::InternalServerError(err))?)
+                        .map_err(|err| ResponseError::InternalServerError(err))?)
                 }
                 Err(_) => Ok(Response::builder()
                     .status(StatusCode::OK)
@@ -654,7 +657,7 @@ async fn get_share_chat_info(
                     .body(Body::from(
                         serde_json::to_string(&serde_json::json!({"notFound": true})).unwrap(),
                     ))
-                    .map_err(|err| err::ResponseError::InternalServerError(err))?),
+                    .map_err(|err| ResponseError::InternalServerError(err))?),
             };
         }
 
@@ -665,7 +668,7 @@ async fn get_share_chat_info(
                 format!("/auth/login?next=%2Fshare%2F{share_id}"),
             )
             .body(Body::empty())
-            .map_err(|err| err::ResponseError::InternalServerError(err))?);
+            .map_err(|err| ResponseError::InternalServerError(err))?);
     }
     redirect_login()
 }
@@ -675,7 +678,7 @@ async fn get_share_chat_continue(share_id: Path<String>) -> Result<Response<Body
         .status(StatusCode::PERMANENT_REDIRECT)
         .header(header::LOCATION, format!("/share/{}", share_id.0))
         .body(Body::empty())
-        .map_err(|err| err::ResponseError::InternalServerError(err))?)
+        .map_err(|err| ResponseError::InternalServerError(err))?)
 }
 
 async fn get_share_chat_continue_info(
@@ -694,7 +697,7 @@ async fn get_share_chat_continue_info(
                 .bearer_auth(session.access_token)
                 .send()
                 .await
-                .map_err(|err| err::ResponseError::InternalServerError (err))?;
+                .map_err(|err| ResponseError::InternalServerError (err))?;
             match resp.json::<Value>().await {
                 Ok(mut share_data) => {
                     if let Some(replace) = share_data
@@ -756,13 +759,13 @@ async fn get_share_chat_continue_info(
                     .status(StatusCode::OK)
                     .header(header::CONTENT_TYPE, "application/json")
                     .body(Body::from(serde_json::to_string(&props).unwrap()))
-                    .map_err(|err| err::ResponseError::InternalServerError(err))?)
+                    .map_err(|err| ResponseError::InternalServerError(err))?)
                 }
                 Err(_) => Ok(Response::builder()
                     .status(StatusCode::OK)
                     .header(header::CONTENT_TYPE, "same-origin")
                     .body(Body::from(serde_json::to_string(&serde_json::json!({"notFound": true})).unwrap()))
-                    .map_err(|err| err::ResponseError::InternalServerError(err))?),
+                    .map_err(|err| ResponseError::InternalServerError(err))?),
             }
             },
             Err(_) => {
@@ -775,7 +778,7 @@ async fn get_share_chat_continue_info(
                                         "__N_REDIRECT_STATUS": 307
                                     },
                                     "__N_SSP": true
-                                })).unwrap())).map_err(|err| err::ResponseError::InternalServerError(err))?)
+                                })).unwrap())).map_err(|err| ResponseError::InternalServerError(err))?)
             },
         };
     }
@@ -785,12 +788,15 @@ async fn get_share_chat_continue_info(
 async fn get_image(
     params: Option<axum::extract::Query<ImageQuery>>,
 ) -> Result<impl IntoResponse, ResponseError> {
-    let query = params.ok_or(err::ResponseError::BadRequest(anyhow::anyhow!(
+    let query = params.ok_or(ResponseError::BadRequest(anyhow::anyhow!(
         "Missing URL parameter"
     )))?;
-    let env = context::ENV_HOLDER.get_instance();
-
-    let resp = env.load_client().get(&query.url).send().await;
+    let resp = context::ENV_HOLDER
+        .get_instance()
+        .load_client()
+        .get(&query.url)
+        .send()
+        .await;
     response_convert(resp)
 }
 
@@ -812,15 +818,14 @@ async fn error_404() -> Result<Response<Body>, ResponseError> {
     );
     ctx.insert(
         "props",
-        &serde_json::to_string(&props)
-            .map_err(|err| err::ResponseError::InternalServerError(err))?,
+        &serde_json::to_string(&props).map_err(|err| ResponseError::InternalServerError(err))?,
     );
     render_template(TEMP_404, &ctx)
 }
 
 fn extract_session(cookie_value: &str) -> Result<Session, ResponseError> {
     Session::try_from(cookie_value)
-        .map_err(|_| err::ResponseError::Unauthorized(anyhow!("invalid session")))
+        .map_err(|_| ResponseError::Unauthorized(anyhow!("invalid session")))
         .and_then(|session| match check_token(&session.access_token) {
             Ok(_) => Ok(session),
             Err(err) => Err(err),
@@ -832,7 +837,7 @@ fn redirect_login() -> Result<Response<Body>, ResponseError> {
         .status(StatusCode::FOUND)
         .header(header::LOCATION, LOGIN_INDEX)
         .body(Body::empty())
-        .map_err(|err| err::ResponseError::InternalServerError(err))?)
+        .map_err(|err| ResponseError::InternalServerError(err))?)
 }
 
 fn render_template(name: &str, context: &tera::Context) -> Result<Response<Body>, ResponseError> {
@@ -841,14 +846,14 @@ fn render_template(name: &str, context: &tera::Context) -> Result<Response<Body>
             .as_ref()
             .unwrap()
             .render(name, context)
-            .map_err(|err| err::ResponseError::InternalServerError(err))
+            .map_err(|err| ResponseError::InternalServerError(err))
     }?;
 
     Ok(Response::builder()
         .status(StatusCode::OK)
         .header(header::CONTENT_TYPE, "text/html; charset=utf-8")
         .body(Body::from(tm))
-        .map_err(|err| err::ResponseError::InternalServerError(err))?)
+        .map_err(|err| ResponseError::InternalServerError(err))?)
 }
 
 fn settings_template_data(ctx: &mut tera::Context) {
@@ -865,17 +870,19 @@ fn settings_template_data(ctx: &mut tera::Context) {
 }
 
 fn check_token(token: &str) -> Result<(), ResponseError> {
-    let _ = crate::token::check(token).map_err(|err| err::ResponseError::Unauthorized(err))?;
+    let _ = crate::token::check(token).map_err(|err| ResponseError::Unauthorized(err))?;
     Ok(())
 }
 
 async fn cf_captcha_check(addr: IpAddr, cf_response: Option<&str>) -> Result<(), ResponseError> {
     let data = unsafe { TEMPLATE_DATA.as_ref().unwrap() };
     if data.cf_site_key.is_some() && data.cf_secret_key.is_some() {
-        return match cf_response {
-            Some(cf_response) => {
+        let cf_response = cf_response.ok_or(ResponseError::BadRequest(anyhow::anyhow!(
+            "Missing cf_captcha_response"
+        )))?;
+
         if cf_response.is_empty() {
-                    return Err(err::ResponseError::BadRequest(anyhow::anyhow!(
+            return Err(ResponseError::BadRequest(anyhow::anyhow!(
                 "Missing cf_captcha_response"
             )));
         }
@@ -886,23 +893,21 @@ async fn cf_captcha_check(addr: IpAddr, cf_response: Option<&str>) -> Result<(),
             remoteip: &addr.to_string(),
             idempotency_key: crate::uuid::uuid(),
         };
-                let env = context::ENV_HOLDER.get_instance();
-                let resp = env
+
+        let resp = context::ENV_HOLDER
+            .get_instance()
             .load_client()
             .post("https://challenges.cloudflare.com/turnstile/v0/siteverify")
             .form(&form)
             .send()
             .await
-                    .map_err(|err| err::ResponseError::InternalServerError(err))?;
-                match resp.error_for_status() {
-                    Ok(_) => Ok(()),
-                    Err(err) => Err(err::ResponseError::Unauthorized(err)),
-                }
-            }
-            None => Err(err::ResponseError::BadRequest(anyhow::anyhow!(
-                "Missing cf_captcha_response"
-            ))),
-        };
+            .map_err(|err| ResponseError::InternalServerError(err))?;
+
+        let _ = resp
+            .error_for_status()
+            .map_err(|err| ResponseError::Unauthorized(err))?;
+
+        return Ok(());
     };
     Ok(())
 }
