diff --git a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
index 1a85c4e..2104dab 100644
--- a/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/BindViewsTest.java
@@ -64,18 +64,15 @@ public class BindViewsTest {
         + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -123,18 +120,15 @@ public class BindViewsTest {
         + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -183,18 +177,15 @@ public class BindViewsTest {
         + "        finder.<TextView>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -243,18 +234,15 @@ public class BindViewsTest {
         + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -303,18 +291,15 @@ public class BindViewsTest {
         + "        finder.<Test.TestInterface>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -363,18 +348,15 @@ public class BindViewsTest {
         + "        finder.<View>findRequiredView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -424,18 +406,15 @@ public class BindViewsTest {
         + "        finder.<View>findOptionalView(source, 3, \"field 'thing'\"));\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      target.thing = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
