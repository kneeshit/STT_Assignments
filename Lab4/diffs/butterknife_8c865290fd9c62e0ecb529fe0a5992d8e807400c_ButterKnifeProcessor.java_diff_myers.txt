diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index 887d5f6..e90a48b 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -36,6 +36,7 @@ import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeName;
 import com.sun.source.util.Trees;
 import com.sun.tools.javac.code.Symbol;
+import com.sun.tools.javac.code.Type;
 import com.sun.tools.javac.tree.JCTree;
 import com.sun.tools.javac.tree.TreeScanner;
 import java.io.IOException;
@@ -1454,16 +1455,38 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
   private static class RScanner extends TreeScanner {
     Map<Integer, Id> resourceIds = new LinkedHashMap<>();
 
+    @Override
+    public void visitIdent(JCTree.JCIdent jcIdent) {
+      super.visitIdent(jcIdent);
+      Symbol symbol = jcIdent.sym;
+      if (symbol.type instanceof Type.JCPrimitiveType) {
+        Id id = parseId(symbol);
+        if (id != null) {
+          resourceIds.put(id.value, id);
+        }
+      }
+    }
+
     @Override public void visitSelect(JCTree.JCFieldAccess jcFieldAccess) {
       Symbol symbol = jcFieldAccess.sym;
+      Id id = parseId(symbol);
+      if (id != null) {
+        resourceIds.put(id.value, id);
+      }
+    }
+
+    @Nullable
+    private Id parseId(Symbol symbol) {
+      Id id = null;
       if (symbol.getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {
         try {
           int value = (Integer) requireNonNull(((Symbol.VarSymbol) symbol).getConstantValue());
-          resourceIds.put(value, new Id(value, symbol));
+          id = new Id(value, symbol);
         } catch (Exception ignored) { }
       }
+      return id;
     }
 
     @Override public void visitLiteral(JCTree.JCLiteral jcLiteral) {
