diff --git a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
index 49b4e2f..10794b9 100644
--- a/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
+++ b/butterknife-compiler/src/test/java/butterknife/UnbinderTest.java
@@ -55,19 +55,18 @@ public class UnbinderTest {
         + "    });\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -136,22 +135,21 @@ public class UnbinderTest {
         + "    target.view2 = view;\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
-        + "      view1.setOnClickListener(null);\n"
-        + "      view1.setOnLongClickListener(null);\n"
         + "      target.view = null;\n"
         + "      target.view2 = null;\n"
+        + "      view1.setOnClickListener(null);\n"
+        + "      view1.setOnLongClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -208,21 +206,20 @@ public class UnbinderTest {
         + "    }\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      if (view1 != null) {\n"
         + "        view1.setOnClickListener(null);\n"
+        + "        view1 = null;\n"
         + "      }\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -284,9 +281,11 @@ public class UnbinderTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -321,19 +320,18 @@ public class UnbinderTest {
         + "    });\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -396,9 +394,11 @@ public class UnbinderTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -433,19 +433,18 @@ public class UnbinderTest {
         + "    });\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -512,26 +511,25 @@ public class UnbinderTest {
         + "    });\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
     );
 
-    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/one/TestOne$$ViewBinder", "package test.one;\n"
-        + "\n"
+    JavaFileObject expectedSource2 = JavaFileObjects.forSourceString("test/one/TestOne$$ViewBinder", ""
+        + "package test.one;\n"
         + "import android.view.View;\n"
         + "import butterknife.Unbinder;\n"
         + "import butterknife.internal.DebouncingOnClickListener;\n"
@@ -564,9 +562,11 @@ public class UnbinderTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      view2.setOnClickListener(null);\n"
+        + "      view2 = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -627,19 +627,18 @@ public class UnbinderTest {
         + "    });\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends Test> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    View view1;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -678,9 +677,11 @@ public class UnbinderTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      view1.setOnClickListener(null);\n"
+        + "      view1 = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -898,18 +899,16 @@ public class UnbinderTest {
         + "    target.transparentColor = Utils.getColor(res, theme, 17170445);\n"
         + "  }\n"
         + "  protected static class InnerUnbinder<T extends C> implements Unbinder {\n"
-        + "    private T target;\n"
+        + "    protected T target;\n"
         + "    protected InnerUnbinder(T target) {\n"
         + "      this.target = target;\n"
         + "    }\n"
         + "    @Override\n"
-        + "    public final void unbind() {\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
         + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"
-        + "      unbind(target);\n"
-        + "      target = null;\n"
-        + "    }\n"
-        + "    protected void unbind(T target) {\n"
         + "      target.button1 = null;\n"
+        + "      this.target = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -1040,10 +1039,12 @@ public class UnbinderTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      target.button2 = null;\n"
         + "      view16908290.setOnClickListener(null);\n"
+        + "      view16908290 = null;\n"
         + "    }\n"
         + "  }\n"
         + "}"
@@ -1083,8 +1084,9 @@ public class UnbinderTest {
         + "      super(target);\n"
         + "    }\n"
         + "    @Override\n"
-        + "    protected void unbind(T target) {\n"
-        + "      super.unbind(target);\n"
+        + "    public void unbind() {\n"
+        + "      T target = this.target;\n"
+        + "      super.unbind();\n"
         + "      target.button3 = null;\n"
         + "    }\n"
         + "  }\n"
