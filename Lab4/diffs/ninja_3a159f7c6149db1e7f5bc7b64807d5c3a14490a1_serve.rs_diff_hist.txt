diff --git a/openai/src/serve.rs b/openai/src/serve.rs
index a95a90d..4c6517b 100644
--- a/openai/src/serve.rs
+++ b/openai/src/serve.rs
@@ -4,34 +4,102 @@ use actix_web::{get, patch, post, App, HttpResponse, HttpServer, Responder};
 use actix_web::{web, HttpRequest};
 use anyhow::Context;
 use derive_builder::Builder;
+use reqwest::Client;
 use serde_json::Value;
 use std::fs::File;
 use std::io::BufReader;
-use std::sync::Once;
+use std::sync::{Arc, Once};
 
 use rustls::{Certificate, PrivateKey, ServerConfig};
 use std::net::IpAddr;
-use std::net::Ipv4Addr;
 use std::path::PathBuf;
 
 use super::api::{HEADER_UA, URL_CHATGPT_BASE};
 
-static mut CLIENT: std::mem::MaybeUninit<reqwest::Client> = std::mem::MaybeUninit::uninit();
-static ONCE_INIT: Once = Once::new();
+static INIT: Once = Once::new();
+static mut CLIENT: Option<Arc<Client>> = None;
+
+fn initialize_client(client: Client) {
+    unsafe {
+        INIT.call_once(|| {
+            CLIENT = Some(Arc::new(client));
+        });
+    }
+}
+
+fn client() -> &'static Client {
+    if let Some(client) = unsafe { &CLIENT } {
+        return client;
+    }
+    panic!("request client is required")
+}
 
 #[derive(Builder)]
-pub struct Config {
-    #[builder(default = "IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1))")]
+pub struct Launcher {
     host: IpAddr,
-    #[builder(default = "7999")]
     port: u16,
-    #[builder(default = "1")]
     workers: usize,
     tls_cert: Option<PathBuf>,
     tls_key: Option<PathBuf>,
 }
 
-async fn load_rustls_config(tls_cert: PathBuf, tls_key: PathBuf) -> anyhow::Result<ServerConfig> {
+impl Launcher {
+    pub async fn run(self) -> anyhow::Result<()> {
+        use reqwest::header;
+        let mut headers = header::HeaderMap::new();
+        headers.insert(
+            header::USER_AGENT,
+            header::HeaderValue::from_static(HEADER_UA),
+        );
+        let client = reqwest::ClientBuilder::new()
+            .chrome_builder(reqwest::browser::ChromeVersion::V105)
+            .default_headers(headers)
+            .cookie_store(false)
+            .build()
+            .unwrap();
+
+        initialize_client(client);
+
+        let serve = HttpServer::new(|| {
+            App::new()
+                .wrap(Logger::default())
+                .service(get_models)
+                .service(account_check)
+                .service(get_conversation)
+                .service(get_conversations)
+                .service(post_conversation)
+                .service(post_conversation_gen_title)
+                .service(post_conversation_message_feedback)
+                .service(patch_conversation)
+                .service(patch_conversations)
+        })
+        .keep_alive(None)
+        .workers(self.workers);
+        match self.tls_key {
+            Some(tls_key) => {
+                let tls_config = Self::load_rustls_config(
+                    self.tls_cert.context("tls cert file is required")?,
+                    tls_key,
+                )
+                .await?;
+                serve
+                    .bind_rustls((self.host, self.port), tls_config)?
+                    .run()
+                    .await
+                    .map_err(|e| anyhow::anyhow!(e))
+            }
+            None => serve
+                .bind((self.host, self.port))?
+                .run()
+                .await
+                .map_err(|e| anyhow::anyhow!(e)),
+        }
+    }
+
+    async fn load_rustls_config(
+        tls_cert: PathBuf,
+        tls_key: PathBuf,
+    ) -> anyhow::Result<ServerConfig> {
         use rustls_pemfile::{certs, pkcs8_private_keys};
 
         // init server config builder with safe defaults
@@ -57,63 +125,11 @@ async fn load_rustls_config(tls_cert: PathBuf, tls_key: PathBuf) -> anyhow::Resu
 
         Ok(config.with_single_cert(cert_chain, keys.remove(0))?)
     }
-
-pub async fn run(config: Config) -> anyhow::Result<()> {
-    ONCE_INIT.call_once(|| {
-        use reqwest::header;
-        let mut headers = header::HeaderMap::new();
-        headers.insert(
-            header::USER_AGENT,
-            header::HeaderValue::from_static(HEADER_UA),
-        );
-        let client = reqwest::ClientBuilder::new()
-            .chrome_builder(reqwest::browser::ChromeVersion::V105)
-            .default_headers(headers)
-            .cookie_store(false)
-            .build()
-            .unwrap();
-        unsafe { CLIENT.as_mut_ptr().write(client) }
-    });
-    let serve = HttpServer::new(|| {
-        App::new()
-            .wrap(Logger::default())
-            .service(get_models)
-            .service(account_check)
-            .service(get_conversation)
-            .service(get_conversations)
-            .service(post_conversation)
-            .service(post_conversation_gen_title)
-            .service(post_conversation_message_feedback)
-            .service(patch_conversation)
-            .service(patch_conversations)
-    })
-    .keep_alive(None)
-    .workers(config.workers);
-    match config.tls_key {
-        Some(tls_key) => {
-            let tls_config = load_rustls_config(
-                config.tls_cert.context("tls cert file is required")?,
-                tls_key,
-            )
-            .await?;
-            serve
-                .bind_rustls((config.host, config.port), tls_config)?
-                .run()
-                .await
-                .map_err(|e| anyhow::anyhow!(e))
-        }
-        None => serve
-            .bind((config.host, config.port))?
-            .run()
-            .await
-            .map_err(|e| anyhow::anyhow!(e)),
-    }
 }
 
 #[get("/backend-api/models")]
 async fn get_models(req: HttpRequest) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .get(format!("{URL_CHATGPT_BASE}/models"))
         .headers(header_convert(req.headers()))
         .send()
@@ -126,8 +142,7 @@ async fn get_models(req: HttpRequest) -> impl Responder {
 
 #[post("/backend-api/accounts/check")]
 async fn account_check(req: HttpRequest) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .get(format!("{URL_CHATGPT_BASE}/accounts/check"))
         .headers(header_convert(req.headers()))
         .send()
@@ -140,8 +155,7 @@ async fn account_check(req: HttpRequest) -> impl Responder {
 
 #[get("/backend-api/conversation/{conversation_id}")]
 async fn get_conversation(req: HttpRequest, conversation_id: web::Path<String>) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .get(format!(
             "{URL_CHATGPT_BASE}/conversation/{}",
             conversation_id.into_inner()
@@ -160,9 +174,8 @@ async fn get_conversations(
     req: HttpRequest,
     param: web::Query<ConversationsQuery>,
 ) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
     let param = param.into_inner();
-    match c
+    match client()
         .get(format!(
             "{URL_CHATGPT_BASE}/conversations?offset={}&limit={}&order={}",
             param.offset, param.limit, param.order
@@ -178,8 +191,7 @@ async fn get_conversations(
 
 #[post("/backend-api/conversation")]
 async fn post_conversation(req: HttpRequest, body: Json<Value>) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .post(format!("{URL_CHATGPT_BASE}/conversation"))
         .headers(header_convert(req.headers()))
         .json(&body)
@@ -197,8 +209,7 @@ async fn patch_conversation(
     conversation_id: web::Path<String>,
     body: Json<Value>,
 ) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .patch(format!("{URL_CHATGPT_BASE}/conversation/{conversation_id}"))
         .headers(header_convert(req.headers()))
         .json(&body)
@@ -212,8 +223,7 @@ async fn patch_conversation(
 
 #[patch("/backend-api/conversations")]
 async fn patch_conversations(req: HttpRequest, body: Json<Value>) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .patch(format!("{URL_CHATGPT_BASE}/conversations"))
         .headers(header_convert(req.headers()))
         .json(&body)
@@ -231,8 +241,7 @@ async fn post_conversation_gen_title(
     conversation_id: web::Path<String>,
     body: Json<Value>,
 ) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .post(format!(
             "{URL_CHATGPT_BASE}/conversation/gen_title/{conversation_id}"
         ))
@@ -248,8 +257,7 @@ async fn post_conversation_gen_title(
 
 #[post("/backend-api/conversation/message_feedbak")]
 async fn post_conversation_message_feedback(req: HttpRequest, body: Json<Value>) -> impl Responder {
-    let c = unsafe { CLIENT.as_mut_ptr().read() };
-    match c
+    match client()
         .post(format!("{URL_CHATGPT_BASE}/conversation/message_feedbak"))
         .headers(header_convert(req.headers()))
         .json(&body)
