diff --git a/test/constructor.spec.js b/test/constructor.spec.js
index 792cc70a..a2f3ffbc 100644
--- a/test/constructor.spec.js
+++ b/test/constructor.spec.js
@@ -1,15 +1,12 @@
-import projectX from 'project-x'
+import Alpine from 'alpinejs'
 import { fireEvent, wait } from '@testing-library/dom'
 
-global.MutationObserver = class {
-    observe() {}
-}
 
 test('auto-detect new components and dont lose state of existing ones', async () => {
-    var runObserver
+    var runObservers = []
 
     global.MutationObserver = class {
-        constructor(callback) { runObserver = callback }
+        constructor(callback) { runObservers.push(callback) }
         observe() {}
     }
 
@@ -20,7 +17,7 @@ test('auto-detect new components and dont lose state of existing ones', async ()
         </div>
     `
 
-    projectX.start()
+    Alpine.start()
 
     fireEvent.input(document.querySelector('input'), { target: { value: 'bar' }})
 
@@ -35,7 +32,7 @@ test('auto-detect new components and dont lose state of existing ones', async ()
     `
     document.body.appendChild(div)
 
-    runObserver([
+    runObservers[1]([
         { addedNodes: [ div ] }
     ])
 
@@ -44,3 +41,45 @@ test('auto-detect new components and dont lose state of existing ones', async ()
         expect(document.querySelector('#B span').innerText).toEqual('baz')
     })
 })
+
+test('auto-initialize new elements added to a component', async () => {
+    var runObservers = []
+
+    global.MutationObserver = class {
+        constructor(callback) { runObservers.push(callback) }
+        observe() {}
+    }
+
+    document.body.innerHTML = `
+        <div x-data="{ count: 0 }">
+            <span x-text="count"></span>
+
+            <div id="target">
+            </div>
+        </div>
+    `
+
+    Alpine.start()
+
+    expect(document.querySelector('span').innerText).toEqual(0)
+
+    document.querySelector('#target').innerHTML = `
+        <span x-text="count"></span>
+
+        <button x-on:click="count++"></button>
+    `
+
+    runObservers[0]([
+        { addedNodes: [
+            document.querySelector('#target span'),
+            document.querySelector('#target button'),
+        ] }
+    ])
+
+    await wait(() => { expect(document.querySelector('#target span').innerText).toEqual(0) })
+
+    document.querySelector('button').click()
+
+    await wait(() => { expect(document.querySelector('span').innerText).toEqual(1) })
+    await wait(() => { expect(document.querySelector('#target span').innerText).toEqual(1) })
+})
