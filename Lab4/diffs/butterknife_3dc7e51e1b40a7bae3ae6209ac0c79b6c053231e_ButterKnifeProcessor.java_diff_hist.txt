diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index c31a994..08f4739 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -37,7 +37,6 @@ import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.BitSet;
-import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -360,16 +359,13 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     BindingClass bindingClass = targetClassMap.get(enclosingElement);
     if (bindingClass != null) {
       ViewBindings viewBindings = bindingClass.getViewBinding(id);
-      if (viewBindings != null) {
-        Iterator<FieldViewBinding> iterator = viewBindings.getFieldBindings().iterator();
-        if (iterator.hasNext()) {
-          FieldViewBinding existingBinding = iterator.next();
+      if (viewBindings != null && viewBindings.getFieldBinding() != null) {
+        FieldViewBinding existingBinding = viewBindings.getFieldBinding();
         error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
             BindView.class.getSimpleName(), id, existingBinding.getName(),
             enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
       }
-      }
     } else {
       bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);
     }
