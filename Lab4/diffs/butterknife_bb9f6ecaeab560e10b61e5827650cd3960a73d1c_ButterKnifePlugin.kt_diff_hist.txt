diff --git a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
index 7fdcba1..0f32090 100644
--- a/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt
@@ -12,6 +12,7 @@ import org.gradle.api.Plugin
 import org.gradle.api.Project
 import org.gradle.api.plugins.ExtensionContainer
 import java.io.File
+import java.util.concurrent.atomic.AtomicBoolean
 import kotlin.reflect.KClass
 
 class ButterKnifePlugin : Plugin<Project> {
@@ -20,27 +21,52 @@ class ButterKnifePlugin : Plugin<Project> {
       when (it) {
         is FeaturePlugin -> {
           project.extensions[FeatureExtension::class].run {
-            applyPlugin(featureVariants)
-            applyPlugin(libraryVariants)
+            configureR2Generation(project, featureVariants)
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is LibraryPlugin -> {
+          project.extensions[LibraryExtension::class].run {
+            configureR2Generation(project, libraryVariants)
+          }
+        }
+        is AppPlugin -> {
+          project.extensions[AppExtension::class].run {
+            configureR2Generation(project, applicationVariants)
           }
         }
-        is LibraryPlugin -> applyPlugin(project.extensions[LibraryExtension::class].libraryVariants)
-        is AppPlugin -> applyPlugin(project.extensions[AppExtension::class].applicationVariants)
       }
     }
   }
 
-  private fun applyPlugin(variants: DomainObjectSet<out BaseVariant>) {
+  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {
     variants.all { variant ->
+      val outputDir = project.buildDir.resolve(
+          "generated/source/r2/${variant.dirName}")
+
+      val task = project.tasks.create("generate${variant.name.capitalize()}R2")
+      task.outputs.dir(outputDir)
+      variant.registerJavaGeneratingTask(task, outputDir)
+
+      val once = AtomicBoolean()
       variant.outputs.all { output ->
         val processResources = output.processResources
-        // TODO proper task registered as source-generating?
-        processResources.doLast {
-          val pathToR = processResources.packageForR.replace('.', File.separatorChar)
+        task.dependsOn(processResources)
+
+        // Though there might be multiple outputs, their R files are all the same. Thus, we only
+        // need to configure the task once with the R.java input and action.
+        if (once.compareAndSet(false, true)) {
+          val rPackage = processResources.packageForR
+          val pathToR = rPackage.replace('.', File.separatorChar)
           val rFile = processResources.sourceOutputDir.resolve(pathToR).resolve("R.java")
 
-          FinalRClassBuilder.brewJava(rFile, processResources.sourceOutputDir,
-              processResources.packageForR, "R2")
+          task.apply {
+            inputs.file(rFile)
+
+            doLast {
+              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2")
+            }
+          }
         }
       }
     }
