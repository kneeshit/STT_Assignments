diff --git a/butterknife/src/main/java/butterknife/OnCheckedChanged.java b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
index 950ffa8..fedfa90 100644
--- a/butterknife/src/main/java/butterknife/OnCheckedChanged.java
+++ b/butterknife/src/main/java/butterknife/OnCheckedChanged.java
@@ -1,6 +1,7 @@
 package butterknife;
 
 import butterknife.internal.ListenerClass;
+import butterknife.internal.ListenerMethod;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
@@ -10,29 +11,40 @@ import static java.lang.annotation.RetentionPolicy.CLASS;
 
 /**
  * Annotation for methods which indicate that they should be called when a view is checked or
- * unchecked. Corresponds to adding a {@link OnCheckedChangeListener} to the views specified by
- * {@link #value()}.
+ * unchecked. Corresponds to adding an {@link OnCheckedChangeListener OnCheckedChangeListener} to
+ * the views specified.
  * <pre><code>
  * {@literal @}OnCheckedChanged(R.id.example) void onChecked(boolean checked) {
  *   Toast.makeText(this, checked ? "Checked!" : "Unchecked!", LENGTH_SHORT).show();
  * }
  * </code></pre>
- * Any number of parameters from {@link OnCheckedChangeListener} may be used on the method.
+ * Any number of parameters from
+ * {@link OnCheckedChangeListener#onCheckedChanged(android.widget.CompoundButton, boolean)
+ * onCheckedChanged} may be used on the method.
  *
  * @see OnCheckedChangeListener
  * @see Optional
  */
-@Retention(CLASS) @Target(METHOD)
+@Target(METHOD)
+@Retention(CLASS)
 @ListenerClass(
     targetType = "android.widget.CompoundButton",
     setter = "setOnCheckedChangeListener",
     type = "android.widget.CompoundButton.OnCheckedChangeListener",
+    callbacks = OnCheckedChanged.Callback.class
+)
+public @interface OnCheckedChanged {
+  int[] value();
+  Callback callback() default Callback.CHECKED_CHANGED;
+
+  enum Callback {
+    @ListenerMethod(
         name = "onCheckedChanged",
         parameters = {
             "android.widget.CompoundButton",
             "boolean"
         }
     )
-public @interface OnCheckedChanged {
-  int[] value();
+    CHECKED_CHANGED
+  }
 }
