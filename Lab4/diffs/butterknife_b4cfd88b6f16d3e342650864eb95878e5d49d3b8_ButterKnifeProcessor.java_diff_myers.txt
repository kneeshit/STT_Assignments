diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
index a9cee25..3bc9c26 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java
@@ -31,10 +31,8 @@ import butterknife.internal.ListenerMethod;
 import com.google.auto.common.SuperficialValidation;
 import com.google.auto.service.AutoService;
 import com.google.common.collect.ImmutableSet;
-import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeName;
-import com.sun.source.tree.ClassTree;
 import com.sun.source.util.Trees;
 import com.sun.tools.javac.code.Symbol;
 import com.sun.tools.javac.tree.JCTree;
@@ -53,7 +51,6 @@ import java.util.Deque;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.AbstractProcessor;
@@ -67,16 +64,13 @@ import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.Name;
-import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.MirroredTypeException;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
 
@@ -118,11 +112,6 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
       OnTouch.class //
   );
 
-  private static final List<String> SUPPORTED_TYPES = Arrays.asList(
-      "array", "attr", "bool", "color", "dimen", "drawable", "id", "integer", "string"
-  );
-
-  private Elements elementUtils;
   private Types typeUtils;
   private Filer filer;
   private Trees trees;
@@ -130,7 +119,7 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
   private int sdk = 1;
   private boolean debuggable = true;
 
-  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();
+  private final RScanner rScanner = new RScanner();
 
   @Override public synchronized void init(ProcessingEnvironment env) {
     super.init(env);
@@ -149,7 +138,6 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
 
     debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));
 
-    elementUtils = env.getElementUtils();
     typeUtils = env.getTypeUtils();
     filer = env.getFiler();
     try {
@@ -213,8 +201,6 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     Map<TypeElement, BindingSet.Builder> builderMap = new LinkedHashMap<>();
     Set<TypeElement> erasedTargetNames = new LinkedHashSet<>();
 
-    scanForRClasses(env);
-
     // Process each @BindAnim element.
     for (Element element : env.getElementsAnnotatedWith(BindAnim.class)) {
       if (!SuperficialValidation.validateElement(element)) continue;
@@ -474,11 +460,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
 
     // Assemble information on the field.
     int id = element.getAnnotation(BindView.class).value();
-
     BindingSet.Builder builder = builderMap.get(enclosingElement);
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindView.class, id);
     if (builder != null) {
-      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));
+      String existingBindingName = builder.findExistingBindingName(resourceId);
       if (existingBindingName != null) {
         error(element, "Attempt to use @%s for an already bound ID %d on '%s'. (%s.%s)",
             BindView.class.getSimpleName(), id, existingBindingName,
@@ -493,16 +478,12 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     TypeName type = TypeName.get(elementType);
     boolean required = isFieldRequired(element);
 
-    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));
+    builder.addField(resourceId, new FieldViewBinding(name, type, required));
 
     // Add the type-erased version to the valid binding targets set.
     erasedTargetNames.add(enclosingElement);
   }
 
-  private QualifiedId elementToQualifiedId(Element element, int id) {
-    return new QualifiedId(elementUtils.getPackageOf(element), id);
-  }
-
   private void parseBindViews(Element element, Map<TypeElement, BindingSet.Builder> builderMap,
       Set<TypeElement> erasedTargetNames) {
     TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();
@@ -582,14 +563,9 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     TypeName type = TypeName.get(viewType);
     boolean required = isFieldRequired(element);
 
-    List<Id> idVars = new ArrayList<>();
-    for (int id : ids) {
-      QualifiedId qualifiedId = elementToQualifiedId(element, id);
-      idVars.add(getId(qualifiedId));
-    }
-
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));
+    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind,
+        new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -618,9 +594,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindAnim.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindAnim.class, id);
+
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldAnimationBinding(getId(qualifiedId), name));
+    builder.addResource(new FieldAnimationBinding(resourceId, name));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -649,10 +626,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBool.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindBool.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BOOL));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BOOL));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -685,9 +662,9 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindColor.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindColor.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
+    builder.addResource(new FieldResourceBinding(resourceId, name,
         isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST
             : FieldResourceBinding.Type.COLOR));
 
@@ -722,9 +699,9 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDimen.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindDimen.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,
+    builder.addResource(new FieldResourceBinding(resourceId, name,
         isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));
 
     erasedTargetNames.add(enclosingElement);
@@ -754,10 +731,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindBitmap.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindBitmap.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BITMAP));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BITMAP));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -787,10 +764,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindDrawable.class).value();
     int tint = element.getAnnotation(BindDrawable.class).tint();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
-    QualifiedId qualifiedTint = elementToQualifiedId(element, tint);
+    Map<Integer, Id> resourceIds = elementToIds(element, BindDrawable.class, new int[] {id, tint});
+
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldDrawableBinding(getId(qualifiedId), name, getId(qualifiedTint)));
+    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint)));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -819,10 +796,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindFloat.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindFloat.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FLOAT));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.FLOAT));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -861,8 +838,8 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     }
 
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    QualifiedId qualifiedId = elementToQualifiedId(element, bindFont.value());
-    builder.addResource(new FieldTypefaceBinding(getId(qualifiedId), name, style));
+    Id resourceId = elementToId(element, BindFont.class, bindFont.value());
+    builder.addResource(new FieldTypefaceBinding(resourceId, name, style));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -890,10 +867,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindInt.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindInt.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.INT));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.INT));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -922,10 +899,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindString.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindString.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
     builder.addResource(
-        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.STRING));
+        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -956,9 +933,9 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     // Assemble information on the field.
     String name = element.getSimpleName().toString();
     int id = element.getAnnotation(BindArray.class).value();
-    QualifiedId qualifiedId = elementToQualifiedId(element, id);
+    Id resourceId = elementToId(element, BindArray.class, id);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name, type));
+    builder.addResource(new FieldResourceBinding(resourceId, name, type));
 
     erasedTargetNames.add(enclosingElement);
   }
@@ -1204,9 +1181,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
 
     MethodViewBinding binding = new MethodViewBinding(name, Arrays.asList(parameters), required);
     BindingSet.Builder builder = getOrCreateBindingBuilder(builderMap, enclosingElement);
-    for (int id : ids) {
-      QualifiedId qualifiedId = elementToQualifiedId(element, id);
-      if (!builder.addMethod(getId(qualifiedId), listener, method, binding)) {
+    Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);
+
+    for (int id : resourceIds.keySet()) {
+      if (!builder.addMethod(resourceIds.get(id), listener, method, binding)) {
         error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",
             id, enclosingElement.getQualifiedName(), element.getSimpleName());
         return;
@@ -1311,6 +1289,32 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     processingEnv.getMessager().printMessage(kind, message, element);
   }
 
+  private Id elementToId(Element element, Class<? extends Annotation> annotation, int value) {
+    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
+    if (tree != null) { // tree can be null if the references are compiled types and not source
+      tree.accept(rScanner);
+      return new Id(value, rScanner.rSymbol);
+    }
+    return new Id(value);
+  }
+
+  private Map<Integer, Id> elementToIds(Element element, Class<? extends Annotation> annotation,
+      int[] values) {
+    Map<Integer, Id> resourceIds = new LinkedHashMap<>();
+    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
+    if (tree != null) { // tree can be null if the references are compiled types and not source
+      for (int value : values) {
+        tree.accept(rScanner);
+        resourceIds.put(value, new Id(value, rScanner.rSymbol));
+      }
+    } else {
+      for (int value : values) {
+        resourceIds.put(value, new Id(value));
+      }
+    }
+    return resourceIds;
+  }
+
   private static boolean hasAnnotationWithName(Element element, String simpleName) {
     for (AnnotationMirror mirror : element.getAnnotationMirrors()) {
       String annotationName = mirror.getAnnotationType().asElement().getSimpleName().toString();
@@ -1339,95 +1343,8 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
     return null;
   }
 
-  private Id getId(QualifiedId qualifiedId) {
-    if (symbols.get(qualifiedId) == null) {
-      symbols.put(qualifiedId, new Id(qualifiedId.id));
-    }
-    return symbols.get(qualifiedId);
-  }
-
-  private void scanForRClasses(RoundEnvironment env) {
-    if (trees == null) return;
-
-    RClassScanner scanner = new RClassScanner();
-
-    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {
-      for (Element element : env.getElementsAnnotatedWith(annotation)) {
-        JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));
-        if (tree != null) { // tree can be null if the references are compiled types and not source
-          scanner.setCurrentPackage(elementUtils.getPackageOf(element));
-          tree.accept(scanner);
-        }
-      }
-    }
-
-    for (Map.Entry<PackageElement, Set<Symbol.ClassSymbol>> packageNameToRClassSet
-          : scanner.getRClasses().entrySet()) {
-      PackageElement respectivePackageName = packageNameToRClassSet.getKey();
-      for (Symbol.ClassSymbol rClass : packageNameToRClassSet.getValue()) {
-        parseRClass(respectivePackageName, rClass, scanner.getReferenced());
-      }
-    }
-  }
-
-  private void parseRClass(PackageElement respectivePackageName, Symbol.ClassSymbol rClass,
-      Set<String> referenced) {
-    TypeElement element;
-
-    try {
-      element = rClass;
-    } catch (MirroredTypeException mte) {
-      element = (TypeElement) typeUtils.asElement(mte.getTypeMirror());
-    }
-
-    JCTree tree = (JCTree) trees.getTree(element);
-    if (tree != null) { // tree can be null if the references are compiled types and not source
-      IdScanner idScanner =
-          new IdScanner(symbols, elementUtils.getPackageOf(element), respectivePackageName,
-              referenced);
-      tree.accept(idScanner);
-    } else {
-      parseCompiledR(respectivePackageName, element, referenced);
-    }
-  }
-
-  private void parseCompiledR(PackageElement respectivePackageName, TypeElement rClass,
-      Set<String> referenced) {
-    for (Element element : rClass.getEnclosedElements()) {
-      String innerClassName = element.getSimpleName().toString();
-      if (SUPPORTED_TYPES.contains(innerClassName)) {
-        for (Element enclosedElement : element.getEnclosedElements()) {
-          if (enclosedElement instanceof VariableElement) {
-            String fqName = elementUtils.getPackageOf(enclosedElement).getQualifiedName().toString()
-                + ".R."
-                + innerClassName
-                + "."
-                + enclosedElement.toString();
-            if (referenced.contains(fqName)) {
-              VariableElement variableElement = (VariableElement) enclosedElement;
-              Object value = variableElement.getConstantValue();
-
-              if (value instanceof Integer) {
-                int id = (Integer) value;
-                ClassName rClassName =
-                    ClassName.get(elementUtils.getPackageOf(variableElement).toString(), "R",
-                        innerClassName);
-                String resourceName = variableElement.getSimpleName().toString();
-                QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
-                symbols.put(qualifiedId, new Id(id, rClassName, resourceName));
-              }
-            }
-          }
-        }
-      }
-    }
-  }
-
-  private static class RClassScanner extends TreeScanner {
-    // Maps the currently evaluated rPackageName to R Classes
-    private final Map<PackageElement, Set<Symbol.ClassSymbol>> rClasses = new LinkedHashMap<>();
-    private PackageElement currentPackage;
-    private Set<String> referenced = new HashSet<>();
+  private static class RScanner extends TreeScanner {
+    Symbol rSymbol;
 
     @Override public void visitSelect(JCTree.JCFieldAccess jcFieldAccess) {
       Symbol symbol = jcFieldAccess.sym;
@@ -1435,90 +1352,10 @@ public final class ButterKnifeProcessor extends AbstractProcessor {
           && symbol.getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement() != null
           && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {
-        Set<Symbol.ClassSymbol> rClassSet = rClasses.get(currentPackage);
-        if (rClassSet == null) {
-          rClassSet = new HashSet<>();
-          rClasses.put(currentPackage, rClassSet);
-        }
-        referenced.add(getFqName(symbol));
-        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass());
-      }
-    }
-
-    Map<PackageElement, Set<Symbol.ClassSymbol>> getRClasses() {
-      return rClasses;
-    }
-
-    Set<String> getReferenced() {
-      return referenced;
-    }
-
-    void setCurrentPackage(PackageElement packageElement) {
-      this.currentPackage = packageElement;
-    }
-  }
-
-  private static class IdScanner extends TreeScanner {
-    private final Map<QualifiedId, Id> ids;
-    private final PackageElement rPackageName;
-    private final PackageElement respectivePackageName;
-    private final Set<String> referenced;
-
-    IdScanner(Map<QualifiedId, Id> ids, PackageElement rPackageName,
-        PackageElement respectivePackageName, Set<String> referenced) {
-      this.ids = ids;
-      this.rPackageName = rPackageName;
-      this.respectivePackageName = respectivePackageName;
-      this.referenced = referenced;
-    }
-
-    @Override public void visitClassDef(JCTree.JCClassDecl jcClassDecl) {
-      for (JCTree tree : jcClassDecl.defs) {
-        if (tree instanceof ClassTree) {
-          ClassTree classTree = (ClassTree) tree;
-          String className = classTree.getSimpleName().toString();
-          if (SUPPORTED_TYPES.contains(className)) {
-            ClassName rClassName = ClassName.get(rPackageName.getQualifiedName().toString(), "R",
-                    className);
-            VarScanner scanner = new VarScanner(ids, rClassName, respectivePackageName, referenced);
-            ((JCTree) classTree).accept(scanner);
-          }
-        }
-      }
-    }
-  }
-
-  private static class VarScanner extends TreeScanner {
-    private final Map<QualifiedId, Id> ids;
-    private final ClassName className;
-    private final PackageElement respectivePackageName;
-    private final Set<String> referenced;
-
-    private VarScanner(Map<QualifiedId, Id> ids, ClassName className,
-        PackageElement respectivePackageName, Set<String> referenced) {
-      this.ids = ids;
-      this.className = className;
-      this.respectivePackageName = respectivePackageName;
-      this.referenced = referenced;
-    }
-
-    @Override public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
-      if ("int".equals(jcVariableDecl.getType().toString())) {
-        String resourceName = jcVariableDecl.getName().toString();
-        if (referenced.contains(getFqName(jcVariableDecl.sym))) {
-          int id = Integer.valueOf(jcVariableDecl.getInitializer().toString());
-          QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);
-          ids.put(qualifiedId, new Id(id, className, resourceName));
-        }
-      }
+        rSymbol = symbol;
+      } else {
+        rSymbol = null;
       }
     }
-
-  private static String getFqName(Symbol rSymbol) {
-    return rSymbol.packge().getQualifiedName().toString()
-        + ".R."
-        + rSymbol.enclClass().name.toString()
-        + "."
-        + rSymbol.name.toString();
   }
 }
