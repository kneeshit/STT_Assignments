diff --git a/openai/src/serve/router/arkose.rs b/openai/src/serve/router/arkose.rs
index c62c531..4e1b273 100644
--- a/openai/src/serve/router/arkose.rs
+++ b/openai/src/serve/router/arkose.rs
@@ -1,7 +1,9 @@
 use std::collections::HashMap;
 
+use crate::arkose::ArkoseToken;
+use crate::context;
 use crate::serve::err::{self, ResponseError};
-use crate::serve::{context, Launcher};
+use crate::serve::Launcher;
 use axum::body::Body;
 use axum::http::header;
 use axum::http::method::Method;
@@ -28,10 +30,11 @@ async fn proxy(
     uri: Uri,
     method: Method,
     mut headers: HeaderMap,
-    mut body: Option<Form<HashMap<String, String>>>,
+    body: Option<Form<HashMap<String, String>>>,
 ) -> Result<impl IntoResponse, ResponseError> {
-    let mut x = unsafe { super::STATIC_FILES.as_ref().unwrap().iter() };
-    if let Some((_, v)) = x.find(|(k, _v)| k.contains(uri.path())) {
+    if let Some((_, v)) = unsafe { super::STATIC_FILES.as_ref().unwrap().iter() }
+        .find(|(k, _v)| k.contains(uri.path()))
+    {
         return Ok(Response::builder()
             .status(StatusCode::OK)
             .header(header::CONTENT_TYPE, v.mime_type)
@@ -43,8 +46,8 @@ async fn proxy(
         .path()
         .eq("/fc/gt2/public_key/35536E1E-65B4-4D96-9D97-6ADB7EFF8147")
     {
-        let env = context::Context::get_instance();
-        if let Ok(arkose_token) = env.get_arkose_token().await {
+        if let Ok(arkose_token) = ArkoseToken::new_from_context().await {
+            if arkose_token.valid() {
                 let body = serde_json::json!({
                     "token": arkose_token,
                     "challenge_url":"",
@@ -75,42 +78,13 @@ async fn proxy(
                     .body(Body::from(body.to_string()))
                     .map_err(|err| ResponseError::InternalServerError(err))?);
             }
-
-        if let Some(body) = &mut body {
-            if let Some(v) = body.get_mut("site") {
-                if v.starts_with("http") {
-                    *v = "http://localhost:3000".to_owned();
-                }
-            }
         }
+        headers.remove(header::COOKIE);
     }
 
-    headers.insert(header::ORIGIN, "http://localhost:3000".parse().unwrap());
-    headers.insert(
-        header::REFERER,
-        "http://localhost:3000/v2/1.5.4/enforcement.cd12da708fe6cbe6e068918c38de2ad9.html"
-            .parse()
-            .unwrap(),
-    );
-    headers.remove(header::HOST);
     headers.remove(header::CONNECTION);
     headers.remove(header::CONTENT_TYPE);
     headers.remove(header::CONTENT_LENGTH);
-    headers.remove("Cf-Connecting-Ip");
-    headers.remove("Cf-Ipcountry");
-    headers.remove("Cf-Ray");
-    headers.remove("Cf-Request-Id");
-    headers.remove("Cf-Visitor");
-    headers.remove("Cf-Warp-Tag-Id");
-    headers.remove("Cf-Worker");
-    headers.remove("Cf-Device-Type");
-    headers.remove("Cf-Request-Id");
-    headers.remove("X-Forwarded-Host");
-    headers.remove("X-Forwarded-Proto");
-    headers.remove("X-Forwarded-For");
-    headers.remove("X-Forwarded-Port");
-    headers.remove("X-Forwarded-Server");
-    headers.remove("X-Real-Ip");
 
     let client = context::Context::get_instance().load_client();
 
