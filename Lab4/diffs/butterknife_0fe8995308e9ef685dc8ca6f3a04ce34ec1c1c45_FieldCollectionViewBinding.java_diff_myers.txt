diff --git a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
index 2607cda..f96bb6b 100644
--- a/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
+++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java
@@ -1,51 +1,69 @@
 package butterknife.compiler;
 
-import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
+import java.util.List;
 
-final class FieldCollectionViewBinding implements ViewBinding {
+import static butterknife.compiler.BindingSet.UTILS;
+import static butterknife.compiler.BindingSet.requiresCast;
+
+final class FieldCollectionViewBinding {
   enum Kind {
-    ARRAY,
-    LIST
+    ARRAY("arrayOf"),
+    LIST("listOf");
+
+    final String factoryName;
+
+    Kind(String factoryName) {
+      this.factoryName = factoryName;
+    }
   }
 
-  private final String name;
+  final String name;
   private final TypeName type;
   private final Kind kind;
   private final boolean required;
+  private final List<Id> ids;
 
-  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {
+  FieldCollectionViewBinding(String name, TypeName type, Kind kind, List<Id> ids,
+      boolean required) {
     this.name = name;
     this.type = type;
     this.kind = kind;
+    this.ids = ids;
     this.required = required;
   }
 
-  public String getName() {
-    return name;
+  CodeBlock render() {
+    CodeBlock.Builder builder = CodeBlock.builder()
+        .add("target.$L = $T.$L(", name, UTILS, kind.factoryName);
+    for (int i = 0; i < ids.size(); i++) {
+      if (i > 0) {
+        builder.add(", ");
       }
+      builder.add("\n");
 
-  public TypeName getType() {
-    return type;
+      boolean requiresCast = requiresCast(type);
+      if (!requiresCast && !required) {
+        builder.add("source.findViewById($L)", ids.get(i).code);
+      } else {
+        builder.add("$T.find", UTILS);
+        builder.add(required ? "RequiredView" : "OptionalView");
+        if (requiresCast) {
+          builder.add("AsType");
         }
-
-  public ClassName getRawType() {
-    if (type instanceof ParameterizedTypeName) {
-      return ((ParameterizedTypeName) type).rawType;
+        builder.add("(source, $L, \"field '$L'\"", ids.get(i).code, name);
+        if (requiresCast) {
+          TypeName rawType = type;
+          if (rawType instanceof ParameterizedTypeName) {
+            rawType = ((ParameterizedTypeName) rawType).rawType;
           }
-    return (ClassName) type;
+          builder.add(", $T.class", rawType);
         }
-
-  public Kind getKind() {
-    return kind;
+        builder.add(")");
       }
-
-  public boolean isRequired() {
-    return required;
     }
-
-  @Override public String getDescription() {
-    return "field '" + name + "'";
+    return builder.add(")").build();
   }
 }
