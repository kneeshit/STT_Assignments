diff --git a/test/bind.spec.js b/test/bind.spec.js
index a9f8f37f..3f1c1224 100644
--- a/test/bind.spec.js
+++ b/test/bind.spec.js
@@ -197,7 +197,82 @@ test('non-boolean attributes set to null/undefined/false are removed from the el
     expect(document.querySelectorAll('span')[2].getAttribute('visible')).toBeNull()
 })
 
-test('boolean attributes set to false are removed from element', async () => {
+test('non-boolean empty string attributes are not removed', async () => {
+    document.body.innerHTML = `
+        <div x-data="{}">
+            <a href="#hello" x-bind:href="''"></a>
+        </div>
+    `
+    Alpine.start()
+
+    expect(document.querySelectorAll('a')[0].getAttribute('href')).toEqual('')
+})
+
+test('truthy boolean attribute values are set to their attribute name', async () => {
+    document.body.innerHTML = `
+        <div x-data="{ isSet: true }">
+            <input x-bind:disabled="isSet"></input>
+            <input x-bind:checked="isSet"></input>
+            <input x-bind:required="isSet"></input>
+            <input x-bind:readonly="isSet"></input>
+            <details x-bind:open="isSet"></details>
+            <select x-bind:multiple="isSet"></select>
+            <option x-bind:selected="isSet"></option>
+            <textarea x-bind:autofocus="isSet"></textarea>
+            <dl x-bind:itemscope="isSet"></dl>
+            <form x-bind:novalidate="isSet"></form>
+            <iframe
+                x-bind:allowfullscreen="isSet"
+                x-bind:allowpaymentrequest="isSet"
+            ></iframe>
+            <button x-bind:formnovalidate="isSet"></button>
+            <audio
+                x-bind:autoplay="isSet"
+                x-bind:controls="isSet"
+                x-bind:loop="isSet"
+                x-bind:muted="isSet"
+            ></audio>
+            <video x-bind:playsinline="isSet"></video>
+            <track x-bind:default="isSet" />
+            <img x-bind:ismap="isSet" />
+            <ol x-bind:reversed="isSet"></ol>
+            <script
+                x-bind:async="isSet"
+                x-bind:defer="isSet"
+                x-bind:nomodule="isSet"
+            ></script>
+        </div>
+    `
+
+    Alpine.start()
+
+    expect(document.querySelectorAll('input')[0].disabled).toBeTruthy()
+    expect(document.querySelectorAll('input')[1].checked).toBeTruthy()
+    expect(document.querySelectorAll('input')[2].required).toBeTruthy()
+    expect(document.querySelectorAll('input')[3].readOnly).toBeTruthy()
+    expect(document.querySelectorAll('details')[0].open).toBeTruthy()
+    expect(document.querySelectorAll('option')[0].selected).toBeTruthy()
+    expect(document.querySelectorAll('select')[0].multiple).toBeTruthy()
+    expect(document.querySelectorAll('textarea')[0].autofocus).toBeTruthy()
+    expect(document.querySelectorAll('dl')[0].attributes.itemscope).toBeTruthy()
+    expect(document.querySelectorAll('form')[0].attributes.novalidate).toBeTruthy()
+    expect(document.querySelectorAll('iframe')[0].attributes.allowfullscreen).toBeTruthy()
+    expect(document.querySelectorAll('iframe')[0].attributes.allowpaymentrequest).toBeTruthy()
+    expect(document.querySelectorAll('button')[0].attributes.formnovalidate).toBeTruthy()
+    expect(document.querySelectorAll('audio')[0].attributes.autoplay).toBeTruthy()
+    expect(document.querySelectorAll('audio')[0].attributes.controls).toBeTruthy()
+    expect(document.querySelectorAll('audio')[0].attributes.loop).toBeTruthy()
+    expect(document.querySelectorAll('audio')[0].attributes.muted).toBeTruthy()
+    expect(document.querySelectorAll('video')[0].attributes.playsinline).toBeTruthy()
+    expect(document.querySelectorAll('track')[0].attributes.default).toBeTruthy()
+    expect(document.querySelectorAll('img')[0].attributes.ismap).toBeTruthy()
+    expect(document.querySelectorAll('ol')[0].attributes.reversed).toBeTruthy()
+    expect(document.querySelectorAll('script')[0].attributes.async).toBeTruthy()
+    expect(document.querySelectorAll('script')[0].attributes.defer).toBeTruthy()
+    expect(document.querySelectorAll('script')[0].attributes.nomodule).toBeTruthy()
+})
+
+test('null, undefined, or false boolean attribute values are removed', async () => {
     document.body.innerHTML = `
         <div x-data="{ isSet: false }">
             <input x-bind:disabled="isSet"></input>
@@ -262,68 +337,15 @@ test('boolean attributes set to false are removed from element', async () => {
     expect(document.querySelectorAll('script')[0].getAttribute('nomodule')).toBeNull()
 })
 
-test('boolean attributes set to true are added to element', async () => {
+test('boolean empty string attributes are not removed', async () => {
     document.body.innerHTML = `
-        <div x-data="{ isSet: true }">
-            <input x-bind:disabled="isSet"></input>
-            <input x-bind:checked="isSet"></input>
-            <input x-bind:required="isSet"></input>
-            <input x-bind:readonly="isSet"></input>
-            <details x-bind:open="isSet"></details>
-            <select x-bind:multiple="isSet"></select>
-            <option x-bind:selected="isSet"></option>
-            <textarea x-bind:autofocus="isSet"></textarea>
-            <dl x-bind:itemscope="isSet"></dl>
-            <form x-bind:novalidate="isSet"></form>
-            <iframe
-                x-bind:allowfullscreen="isSet"
-                x-bind:allowpaymentrequest="isSet"
-            ></iframe>
-            <button x-bind:formnovalidate="isSet"></button>
-            <audio
-                x-bind:autoplay="isSet"
-                x-bind:controls="isSet"
-                x-bind:loop="isSet"
-                x-bind:muted="isSet"
-            ></audio>
-            <video x-bind:playsinline="isSet"></video>
-            <track x-bind:default="isSet" />
-            <img x-bind:ismap="isSet" />
-            <ol x-bind:reversed="isSet"></ol>
-            <script
-                x-bind:async="isSet"
-                x-bind:defer="isSet"
-                x-bind:nomodule="isSet"
-            ></script>
+        <div x-data="{}">
+            <input x-bind:disabled="''">
         </div>
     `
-
     Alpine.start()
 
-    expect(document.querySelectorAll('input')[0].disabled).toBeTruthy()
-    expect(document.querySelectorAll('input')[1].checked).toBeTruthy()
-    expect(document.querySelectorAll('input')[2].required).toBeTruthy()
-    expect(document.querySelectorAll('input')[3].readOnly).toBeTruthy()
-    expect(document.querySelectorAll('details')[0].open).toBeTruthy()
-    expect(document.querySelectorAll('option')[0].selected).toBeTruthy()
-    expect(document.querySelectorAll('select')[0].multiple).toBeTruthy()
-    expect(document.querySelectorAll('textarea')[0].autofocus).toBeTruthy()
-    expect(document.querySelectorAll('dl')[0].attributes.itemscope).toBeTruthy()
-    expect(document.querySelectorAll('form')[0].attributes.novalidate).toBeTruthy()
-    expect(document.querySelectorAll('iframe')[0].attributes.allowfullscreen).toBeTruthy()
-    expect(document.querySelectorAll('iframe')[0].attributes.allowpaymentrequest).toBeTruthy()
-    expect(document.querySelectorAll('button')[0].attributes.formnovalidate).toBeTruthy()
-    expect(document.querySelectorAll('audio')[0].attributes.autoplay).toBeTruthy()
-    expect(document.querySelectorAll('audio')[0].attributes.controls).toBeTruthy()
-    expect(document.querySelectorAll('audio')[0].attributes.loop).toBeTruthy()
-    expect(document.querySelectorAll('audio')[0].attributes.muted).toBeTruthy()
-    expect(document.querySelectorAll('video')[0].attributes.playsinline).toBeTruthy()
-    expect(document.querySelectorAll('track')[0].attributes.default).toBeTruthy()
-    expect(document.querySelectorAll('img')[0].attributes.ismap).toBeTruthy()
-    expect(document.querySelectorAll('ol')[0].attributes.reversed).toBeTruthy()
-    expect(document.querySelectorAll('script')[0].attributes.async).toBeTruthy()
-    expect(document.querySelectorAll('script')[0].attributes.defer).toBeTruthy()
-    expect(document.querySelectorAll('script')[0].attributes.nomodule).toBeTruthy()
+    expect(document.querySelectorAll('input')[0].disabled).toEqual(true)
 })
 
 test('binding supports short syntax', async () => {
