@@ -44,12 +44,28 @@ class _ExtensionImporter(object):
             try:
                 __import__(realname)
             except ImportError:
+                exc_type, exc_value, tb = sys.exc_info()
+                if self.is_important_traceback(realname, tb):
+                    raise exc_type, exc_value, tb
                 continue
             module = sys.modules[fullname] = sys.modules[realname]
             if '.' not in modname:
                 setattr(ext_module, modname, module)
             return module
-        raise ImportError(fullname)
+        raise ImportError('No module named %s' % fullname)
+
+    def is_important_traceback(self, important_module, tb):
+        """Walks a traceback's frames and checks if any of the frames
+        originated in the given important module.  If that is the case
+        then we were able to import the module itself but apparently
+        something went wrong when the module was imported.  (Eg: import
+        of an import failed).
+        """
+        while tb is not None:
+            if tb.tb_frame.f_globals.get('__name__') == important_module:
+                return True
+            tb = tb.tb_next
+        return False
 
 
 def activate():
